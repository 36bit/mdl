'<PCODE "FIELDS">

<PACKAGE "FIELDS"> 

"communication system message field utilities" 

<ENTRY FLD GETFIX FGETFIX GETSTRING F==? MEMF OK?> 

<USE "M-DEFS" "M-DATA" "MADMAN" "VCTSRC"> 

<SETG FLD <MOBLIST FLD>> 

<FLOAD "COMDAT;FIELD DATA"> 

"GETFIX -- get the FIX representation of a field id" 

<DEFMAC GETFIX ('X "AUX" N) <COND (<TYPE? .X STRING> <COND (<SET N <LOOKUP .X ,
FLD>> ,.N) (ELSE .X)>) (ELSE <FORM FGETFIX .X>)>> 

"FGETFIX -- get the FIX representation of a field id" 

<SETG FGETFIX  %<RSUBR!- '[ %<PCODE!- "FIELDS" 0> FGETFIX #DECL ("VALUE" <OR FIX
STRING> <OR FIX STRING>) VCTSRC DATUM %<RGLOC FLD T> "COMSYS-STRING-FIELDS" 
"COMSYS-FIX-FIELDS" T "COMSYS-FIX-DECLS" "COMSYS-STRING-DECLS" #FALSE (
"INVALID DATUM")]>> 
<AND <ASSIGNED? GLUE> .GLUE <PUT ,FGETFIX PGLUE ![738193408!]>> 


"GETSTRING -- get the STRING version of a field id" 

<SETG GETSTRING %<RSUBR-ENTRY '[FGETFIX GETSTRING #DECL ("VALUE" <OR FIX STRING>
<OR STRING FIX>)] 69>> 

"F==? -- predicate to determine equality of two fields (fix's or strings)" 

<SETG F==? %<RSUBR-ENTRY '[FGETFIX F==? #DECL ("VALUE" <OR ATOM FALSE> <OR FIX 
STRING> <OR FIX STRING>)] 103>> 

"MEMF -- given a field descriptor (fix|string) and a list, acts like
  a memq for a list of field names or fixes..." 

<SETG MEMF %<RSUBR-ENTRY '[FGETFIX MEMF #DECL ("VALUE" <OR FALSE <LIST [REST <OR
FIX STRING>]>> <OR FIX STRING> LIST)] 165>> 

"OK? -- given a field descriptor and a data item, does decl? check
  to see if data is valid.  returns t if ok or if no data
  for that field, and #false(\"invalid-datum\") otherwise" 

<SETG OK? %<RSUBR-ENTRY '[FGETFIX OK? #DECL ("VALUE" <OR ATOM !<FALSE STRING!>> 
<OR FIX STRING> ANY)] 227>> 

<ENDPACKAGE> 
