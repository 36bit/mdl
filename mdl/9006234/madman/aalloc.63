%%<PROG (C)
	<CRLF ,OUTCHAN>
	<PRINC "Is this assembly for Tenex? ">
	<COND (<MEMQ <TYI ,INCHAN> "YyTt">
	       <SETG 10X T>)
	      (<SETG 10X <>>)>
	<CRLF ,OUTCHAN>
	<AND ,10X <USE "JSYS"> <CRLF ,OUTCHAN>>>

%%<DEFINE IFN10X (10X ITS) <COND (,10X .10X) (.ITS)>>



; "Storage allocator.  
   Takes the ASYLUM and number of words required"


<TITLE DATALLOC>
	<DECLARE ("VALUE" <OR FIX FALSE> ASYLUM FIX)>
	<PUSH	TP* (AB)>
	<AOBJN	AB* HERE -1>
	<PUSHJ	P* DATA1>
	<JRST	FINIS>

<INTERNAL-ENTRY DATA1 2>
	<SUBM	M* (P)>
	<MOVE	A* -2(TP)>	; "THE ASYLUM"
	<MOVE	B* <OFFSET MFDPAGE> (A)>
	<LSH	B* 10>	; "ADDRESS OF MFD PAGE"
	<SKIPG	(TP)>
	<JRST	DIRALL>
	<PUSH	P* B>
	<ADDI	B* ALLOCLOCK>
	<PUSH	TP* <TYPE-WORD WORD>>
	<PUSH	TP* B>
	<MCALL	1 DHLOCK>	; "HARD LOCK THE ALLOCATOR"
	<GETYP	B* A>
	<CAIN	B* <TYPE-CODE FALSE>>
	<JRST	ALLOSE>		; "SORRY. ALREADY LOCKED"
	<MOVE	A* -2(TP)>
	<MOVE	B* <OFFSET ALLOCPAGE> (A)>
	<LSH	B* 10>	; "ADDRESS OF ALLOCATION PAGE"
	<MOVE	C* (B)>		; "AOBJN TO TABLE"
	<TRZ	C* *776000*>	; "FLUSH HIGH BITS"
	<ADD	C* B>
	<SKIPL	C>
	<JRST	MUNGED>
	<PUSH	P* C>		; " ** SAVED TOP OF ALLOCATION TABLE **"
ARETRY	<SETZ>			; "USE 0 FOR BEST FIT"
	<MOVEI	E* *777777*>	; "MAKE E HIGH"
	<MOVE	D* (TP)>	; "AMOUNT NEEDED"
	<ADDI	D* DATHDRLEN>	; "ADD HEADER LENGTH"
ALLOOP	<CAMG	D* (C)>		; "BIG ENOUGH?"
	<PUSHJ	P* ALCHECK>	; "CHECK IT OUT"
	<JRST	LOCKED>
ALFROB	<ADD	C* [<2 (2)>]>	; "TRY NEXT ENTRY"
	<JUMPL	C* ALLOOP>

TBLOSE	<JUMPE	O* ALLOS1>	; "LOST IN TABLE SEARCH ==> A REAL LOSSAGE"
	<MOVE	C* O>		; "C HAS AOBJN PTR TO WINNER"
	<PUSHJ	P* PGLOCK>
	<JRST	RESTART>	; "HMM. PAGES HAVE BECOME LOCKED?"
	<MOVE	O* 1(C)>	; "WINNING BLOCK POINTER"
	<ADDM	D* 1(C)>	; "FIX UP THIS BLOCK'S LOCATION"
	<SUBM	D* (C)>
	<MOVNS	(C)>		; "FIX UP BLOCK LENGTH"
	<SUB	P* [<1 (1)>]>	; " ** RESTORED TOP OF ALLOC TABLE **"
	<JRST	ALWIN>		; "FINIS"

RESTART	<MOVE	C* (P)>		
	<JRST	ARETRY>

LOCKED	<ADD	C* [<2 (2)>]>	; "COME HERE IF BLOCK LARGE ENOUGH IS LOCKED"
	<JUMPL	C* ALLOOP>	; "GO BACK TO MAIN LOOP"
	<JUMPE	O* TPSPLT>	; "BREAK UP THE LAST ALLOCATION BLOCK"
	<JRST	TBLOSE 1>	; "HAVE A WINNING ENTRY"

; "COME HERE IF THERE IS A WINNING ENTRY CLOSE ENOUGH TO THE CORRECT SIZE
   TO MAKE IT A WINNER.  IT IS ALREADY LOCKED."

TBLWN1	<MOVE	O* 1(C)>	; "O HAS WINNING BLOCK POINTER"
	<MOVEI	A* 1(C)>
	<POP	P* D>		; " ** RESTORED TOP OF ALLOC TABLE **"
	<PUSHJ	P* BBLT>	; "REMOVE THIS TABLE ENTRY"
	<MOVE	A* -2(TP)>
	<MOVE	A* <OFFSET ALLOCPAGE> (A)>
	<LSH	A* 10>
	<MOVEM	D* (A)>
	<JRST	ALWIN>		; "AND WIN"

BBLT	<SUBM	M* (P)>
	<MOVEI	B* 2(D)>
	<SUBI	A* -1(B)>	; "BLT TABLE UP TWO LOCATIONS"
	<MOVE	E* A>
	<HRLZS	A>
	<HRR	A* D>
	<ADDI	A* -1(E)>
	<MOVEI	C* (B)>
	<SUBI	C* (A)>
	<ADDI	C* -1(E)>
	<HRLI	C* A>
	<POP	A* @ C>
	<TLNE	A* *777777*>
	<JRST	HERE -2>
	<ADD	D* [<2 (2)>]>	; "REST THE TABLE 2"
	<JRST	MPOPJ>

ALWIN	<POP	P* B>		; " ** RESTORED ADDRESS OF MFD **"
	<ADDI	B* ALLOCLOCK>	
	<PUSH	TP* <TYPE-WORD WORD>>
	<PUSH	TP* B>
	<PUSH	P* O>		; "ADDRESS FOR WRITE"
	<MCALL	1 DUNLOCK>	; "UNLOCK THE ALLOCATION TABLE"
ALWIN1	<MOVE	D* -2(TP)>
	<MOVE	B* <OFFSET ALLOCPAGE> (D)>
	<PUSHJ	P* IPGWRI>	; "TASTEFUL CALL TO PGWRIT IMMEDIATE RETURN"
	<MOVE	A* <TYPE-WORD FIX>>
	<POP	P* B>		; "RESTORE WINNING ADDRESS"
	<SUB	TP* [<4 (4)>]>	; "TASTE AND WINNAGE"
	<JRST	MPOPJ>

; "VARIOUS LOSSAGES"

ALLOSE	<SUB	P* [<1 (1)>]>	
	<MOVE	B* <MQUOTE (6)>>
	<JRST	ALLOS2>

ALLOS1	<SUB	P* [<1 (1)>]>
	<POP	P* A>
	<PUSHJ	P* ALUNLK>
	<MOVE	B* <MQUOTE (9)>>
ALLOS2	<MOVE	A* <TYPE-WORD FALSE>>
	<SUB	TP* [<4 (4)>]>
	<JRST	MPOPJ>

MUNGED	<POP	P* A>
	<PUSHJ	P* ALUNLK>
	<ERRUUO* <MQUOTE MUNGED-ALLOCATION-TABLE!-ERRORS>>

OVFLOW	<POP	P* A>
	<PUSHJ	P* ALUNLK>
	<ERRUUO* <MQUOTE ALLOCATION-TABLE-OVERFLOW!-ERRORS>>

; "HERE TO UNLOCK ALLOCATION TABLE IN TIMES OF LOSSAGE"

ALUNLK	<SUBM	M* (P)>
	<ADDI	A* ALLOCLOCK>
	<PUSH	TP* <TYPE-WORD WORD>>
	<PUSH	TP* A>
	<MCALL	1 DUNLOCK>
	<JRST	MPOPJ>

; "HERE TO CHECK WHETHER A TABLE ENTRY LARGE ENOUGH FOR THE REQUEST
   IS OTHERWISE SUITABLE.  ALSO CHECKS THAT THE ENTRY IS LOCKABLE"

ALCHECK	<SUBM	M* (P)>
	<MOVE	B* (C)>
	<CAIL	B* MAXALLDIF (D)>
	<JRST	ALCHK1>
	<PUSHJ	P* PGLOCK1>	; "LOCK THESE PAGES"
	<JRST	MPOPJ>		; "BACK TO THE OLD DRAWING BOARD"
	<SUB	P* [<1 (1)>]>	; "FLUSH THIS PUSHJ FROB"
	<JRST	TBLWN1>		; "WINNAGE"
ALCHK1	<CAIG	E* (C)>		; "IS THIS A SMALLER WINNING ENTRY?"
	<JRST	[<SOS (P)>
		 <JRST MPOPJ>]>	; "NO. BARF"
	<PUSH	P* E>
	<PUSH	P* D>
	<PUSH	P* D>
	<ADD	D* 1(C)>	; "TOP LOCATION"
	<LSH	D* -10>
	<IDIVI	D* P/L>
	<MOVE	A* -5(P)>
	<ADDI	D* PGLOCKS (A)>
	<MOVEM	D* (P)>		; "(P) IS NOW HIGH LOCK"
	<MOVE	D* 1(C)>
	<LSH	D* -10>
	<IDIVI	D* P/L>		; "D IS NOW LOW LOCK"
	<ADDI	D* PGLOCKS (A)>
ALCHLP	<SKIPL	(D)>		; "LOOP TESTING ALL OF THE LOCKS"
	<JRST	ALCHLS>		; "IF ANY FAIL, LOSE."
	<ADDI	D* 1>
	<CAMG	D* (P)>
	<JRST	ALCHLP>
	<MOVE	O* C>		; "SET E AND O TO POINT TO BEST SO FAR"
	<MOVE	E* (C)>
	<MOVEM	E* -2(P)>
	<SOS	-3(P)>		; "SKIP RETURN TO INDICATE WINNING LOCK"
ALCHLS	<POP	P* D>
	<POP	P* D>
	<POP	P* E>
	<JRST	MPOPJ>		; "AND RETURN"


; "PGUNLOCK --
    Given the MFD address, the length of an allocation, and its address,
    unlock all of the pages within that allocation"

<SUB-ENTRY PGUNLOCK ("VALUE" 'T FIX FIX FIX)>
	<PUSH	TP* (AB)>
	<AOBJN	AB* HERE -1>
	<PUSHJ	P* PGUNLOCK1>
	<JRST	FINIS>

<INTERNAL-ENTRY PGUNLOCK1 3>
	<SUBM	M* (P)>
	<MOVE	A* -4(TP)>
	<LSH	A* 10>		; "MFD ADDRESS"
	<MOVE	B* -2(TP)>	; "LENGTH"
	<MOVEI	C* -1(TP)>
	<MOVE	E* [<MCALL 1 DUNLOCK>]>
	<PUSHJ	P* IPGLOCK>
	<JFCL>
	<SUB	TP* [<6 (6)>]>
	<MOVE	A* <TYPE-WORD ATOM>>
	<MOVE	B* <MQUOTE T>>
	<JRST	MPOPJ>


; "PGLOCK to try to lock all pages for a given allocation
   Skip return if successful
   Unlock all previously locked if unsuccessful"

PGLOCK	<SUBM	M* (P)>
	<MOVE	A* -2(P)>
	<JRST	PGLOCK2>

PGLOCK1	<SUBM	M* (P)>
	<MOVE	A* -3(P)>
PGLOCK2	<MOVE	E* [<MCALL 1 DHLOCK>]>
	<MOVE	B* D>
	<JRST	HERE 2>
IPGLOCK	<SUBM	M* (P)>
	<ADD	B* 1(C)>
	<LSH	B* -10>
	<PUSH	P* D>
	<PUSH	P* C>
	<IDIVI	B* P/L>
	<ADDI	B* PGLOCKS (A)>
	<MOVE	D* B>
	<MOVE	C* (P)>
	<MOVE	B* 1(C)>
	<LSH	B* -10>
	<IDIVI	B* P/L>
	<POP	P* C>
	<ADDI	B* PGLOCKS (A)>
	<PUSH	P* [0]>
LOKLP	<PUSH	P* B>
	<PUSHJ	P* BLHACK>
	<JRST	LOKLSR>
	<ADDI	B* 1>
	<CAMG	B* D>
	<JRST	LOKLP>
POPPEM	<POP	P* B>
	<JUMPN	B* HERE -1>
	<SOS	-1(P)>
LOKEND	<POP	P* D>
	<JRST	MPOPJ>		
	
LOKLSR	<CAMN	E* [<MCALL 1 DUNLOCK>]>
	<JRST	POPPEM>
	<POP	P* B>
	<JUMPE	B* LOKEND>
	<MOVE	E* [<MCALL 1 DUNLOCK>]>
	<PUSHJ	P* BLHACK>
	<JRST	LOKLSR>

BLHACK	<SUBM	M* (P)>
	<PUSH	P*>
	<PUSH	P* A>
	<PUSH	P* B>
	<PUSH	P* C>
	<PUSH	P* D>
	<PUSH	P* E>
	<PUSH	TP* <TYPE-WORD WORD>>
	<PUSH	TP* B>
	<XCT	E>
	<GETYP	B* A>
	<CAIE	B* <TYPE-CODE FALSE>>
	<SOS	-6(P)>		; "FOR SKIP RETURN"
	<POP	P* E>
	<POP	P* D>
	<POP	P* C>
	<POP	P* B>
	<POP	P* A>
	<POP	P*>
	<JRST	MPOPJ>

DIRALL	<MOVE	O* MAXADR (B)>	; "USABLE END OF FILE"
	<SUBI	O* *2000*>	; "TAKE A PAGE"
	<CAMGE	O* HIGHADR (B)>	; "IS THIS BELOW HIGHADR"
	<JRST	ALLOS1>		; "EVENTUALLY REARRANGE -- NOW LOSE"
	<MOVEM	O* MAXADR (B)>	; "MAKE THIS MAXADR"
	<MOVN	D* (TP)>	; "DIRECTORY NUMBER"
	<ADD	B* D>
	<MOVEM	O* DIRPTRS (B)>	; "MAKE A POINTER TO THIS DIRECTORY"
	<MOVE	B* <OFFSET ALLOCPAGE> (A)>
	<LSH	B* 10>	; "ADDRESS OF ALLOCATION PAGE"
	<MOVE	C* (B)>		; "AOBJN TO TABLE"
	<TRZ	C* *776000*>	; "FLUSH HIGH BITS"
	<ADD	C* B>
	<HLRE	D* C>
	<SUBM	C* D>		; "D POINTS TO LAST WORD IN ALLOC PAGE"
	<MOVE	C* -2(D)>
	<SUBI	C* *2000*>
	<MOVEM	C* -2(D)>
	<PUSH	P* O>
	<JRST	ALWIN1>

TPSPLT	<MOVE	A* -2(C)>	; "LENGTH OF FINAL ENTRY IN TABLE"
	<SUBI	A* *6000*>	; "WANT THREE PAGES"
	<JUMPL	A* ALLOS1>	; "LOSE IF <0"
	<MOVE	B* A>
	<SUB	B* D>
	<JUMPL	B* ALLOS1>	; "LOSE IF AFTER THIS => STILL NO ROOM"
	<MOVEM	A* -2(C)>	; "TAKE 6K FROM ENTRY"
	<MOVEI	A* *6000*>
	<MOVE	B* -1(C)>
	<ADDM	A* -1(C)>	; "ADD 6K TO STARTING LOCATION"
	<SUB	C* [<2 (2)>]>
	<PUSH	P* D>	
	<PUSH	P* E>
	<MOVE	D* -2(P)>	; "TOP OF TABLE"
	<MOVEI	A* -2(D)>	; "TOP OF TABLE - 2"
	<MOVE	E* A>
	<TRZ	A* *776000*>
	<CAIGE	A* 4>
	<JRST	OVFLW1>
	<HRL	E* D>
	<BLT	E* -3(C)>	; "BACK UP TWO"
	<MOVEM	B* -1(C)>	; "AND PUT IN NEW ENTRY"
	<MOVEI	A* *6000*>
	<MOVEM	A* -2(C)>
	<SUB	D* [<2 (2)>]>
	<MOVE	A* -2(TP)>
	<MOVE	A* <OFFSET ALLOCPAGE> (A)>
	<LSH	A* 10>
	<MOVEM	D* (A)>		; "TOP OF ALLOCATOR"
	<POP	P* E>
	<POP	P* D>
	<JRST	ALLOOP>

OVFLW1	<SUB	P* [<2 (2)>]>
	<JRST	OVFLOW>


; "Storage deallocator.  
   Takes the ASYLUM , number of freed words and location of start
    of freed block
   The SALVAGER takes a special entry to avoid hard-lock conflict.
   The ALLOCATOR had better be locked when calling by SALVDEALLOC"

<SUB-ENTRY SALVDEALLOC ("VALUE" <OR 'T FALSE> ASYLUM FIX <PRIMTYPE WORD>)>
	<PUSH	TP* (AB)>
	<AOBJN	AB* HERE -1>
	<PUSHJ	P* SALV1>
	<JRST	FINIS>

<INTERNAL-ENTRY SALV1 3>
	<SUBM	M* (P)>
	<MOVE	A* -4(TP)>
	<MOVE	B* <OFFSET MFDPAGE> (A)>
	<LSH	B* 10>
	<PUSH	P* B>
	<MOVSI	C* *400000*>
	<IORM	C* (P)>		; "TURN ON CRETIN BIT FOR SALVATION"
	<JRST	SALVIN>

<SUB-ENTRY DATDEALLOC ("VALUE" <OR 'T FALSE> ASYLUM FIX <PRIMTYPE WORD>)>
	<PUSH	TP* (AB)>
	<AOBJN	AB* HERE -1>
	<PUSHJ	P* DATA2>
	<JRST	FINIS>

<INTERNAL-ENTRY DATA2 3>
	<SUBM	M* (P)>
	<MOVE	A* -4(TP)>	; "THE ASYLUM"
	<MOVE	B* <OFFSET MFDPAGE> (A)>
	<LSH	B* 10>		; "ADDRESS OF MFD PAGE"
	<PUSH	P* B>
	<ADDI	B* ALLOCLOCK>
	<PUSH	TP* <TYPE-WORD WORD>>
	<PUSH	TP* B>
	<MCALL	1 DHLOCK>
	<GETYP	B* A>
	<CAIN	B* <TYPE-CODE FALSE>>
	<JRST	ALLOSE>
	<MOVE	A* -4(TP)>
SALVIN	<MOVE	B* <OFFSET ALLOCPAGE> (A)>
	<LSH	B* 10>		; "ADDRESS OF ALLOCATION PAGE"
	<MOVE	C* (B)>		; "AOBJN TO TABLE"
	<TRZ	C* *776000*>	; "FLUSH HIGH BITS"
	<ADD	C* B>
	<SKIPL	C>
	<JRST	MUNGED>
	<PUSH	P* C>
	<MOVE	B* (TP)>	; "LOCATION OF FREE BLOCK"
DELOOP	<CAMG	B* 1(C)>
	<JRST	DEALL1>
	<ADD	C* [<2 (2)>]>
	<JUMPL	C* DELOOP>
	<SUB	P* [<1 (1)>]>
	<POP	P* A>
	<SKIPL	A>		; "DONT UNLOCK IF IN SALVAGER"
	<PUSHJ	P* ALUNLK>	; "UNLOCK THE TABLE"
	<ERRUUO* <MQUOTE DEALLOCATION-OUT-OF-RANGE!-ERRORS>>

DEALL1	<SETO>
	<MOVE	D* B>
	<ADD	D* -2(TP)>	; "HIGH END OF THIS FROB"
	<CAME	D* 1(C)>	; "DO WE TOUCH ON RIGHT?"
	<JRST	DEALL2>
	<MOVEM	B* 1(C)>	; "TACK THIS ON"
	<MOVE	D* -2(TP)>
	<ADDM	D* (C)>
	<SETZ>

DEALL2	<MOVE	D* -2(C)>
	<ADD	D* -1(C)>
	<CAME	D* B>		; "DO WE TOUCH ON LEFT?"
	<JRST	TBLADD>
	<JUMPE	O* TBLREM>
	<MOVE	D* -2(TP)>
	<ADDM	D* -2(C)>
	<JRST	DEWIN1>

TBLADD	<JUMPE	O* DEWIN1>
	<POP	P* D>		; "TOP OF TABLE"
	<MOVEI	A* -2(D)>
	<MOVE	E* A>
	<TRZ	A* *776000*>
	<CAIGE	A* 4>
	<JRST	OVFLOW>
	<HRL	E* D>
	<BLT	E* -3(C)>	; "BACK UP TWO"
	<MOVEM	B* -1(C)>	; "AND PUT IN NEW ENTRY"
	<MOVE	A* -2(TP)>
	<MOVEM	A* -2(C)>
	<SUB	D* [<2 (2)>]>
	<JRST	TBLRM1>

TBLREM	<MOVE	B* (C)>
	<ADDM	B* -2(C)>	; "FIX UP BLOCKS"
	<MOVEI	A* 1(C)>
	<POP	P* D>
	<PUSHJ	P* BBLT>

TBLRM1	<MOVE	A* -4(TP)>	
	<MOVE	A* <OFFSET ALLOCPAGE> (A)>
	<LSH	A* 10>
	<MOVEM	D* (A)>		; "UPDATE AOBJN POINTER"
	<POP	P* A>	
	<JRST	DEWIN2>

DEWIN1	<SUB	P* [<1 (1)>]>
	<POP	P* A>

DEWIN2	<SKIPGE	A>
	<JRST	SLVWIN>
	<ADDI	A* ALLOCLOCK>
	<PUSH	TP* <TYPE-WORD WORD>>
	<PUSH	TP* A>
	<PUSH	P* B>
	<MCALL	1 DUNLOCK>
	<POP	P* B>
SLVWIN	<LSH	B* -12>
	<PUSHJ	P* IPGWRT>	; "WRITE THE ALLOCATOR"
	<MOVE	A* <TYPE-WORD ATOM>>
	<MOVE	B* <MQUOTE T>>
	<SUB	TP* [<6 (6)>]>
	<JRST	MPOPJ>
PATCH	<CHTYPE	<ILIST 20 0> SPLICE>


<SUB-ENTRY DATWRITE ("VALUE" ANY ASYLUM FIX
			<PRIMTYPE WORD> <OR UVECTOR <PRIMTYPE WORD>>)>
	<PUSH	TP* (AB)>
	<AOBJN	AB* HERE -1>
	<PUSHJ	P* DWRITE1>
	<JRST	FINIS>

<INTERNAL-ENTRY DWRITE1 4>
	<SUBM	M* (P)>
	<PUSH	P* [-1]>
	<JRST	DREAD2>

<SUB-ENTRY DATREAD ("VALUE" ANY ASYLUM FIX 
			<PRIMTYPE WORD> <OR UVECTOR <PRIMTYPE WORD>>)>
	<PUSH	TP* (AB)>
	<AOBJN	AB* HERE -1>
	<PUSHJ	P* DREAD1>
	<JRST	FINIS>

<INTERNAL-ENTRY DREAD1 4>
	<SUBM	M* (P)>
	<PUSH	P* [0]>
DREAD2	<PUSH	P* [0]>
	<MOVE	A* -2(TP)>		; "LOW LOCATION"
	<IDIVI	A* *2000*>		; "GET PAGE NUMBER AND OFFSET"
	<PUSH	P* B>			; "SAVE OFFSET"
	<MOVE	B* -4(TP)>		; "LENGTH OF OBJECT"
	<ADD	B* -2(TP)>		; "TOP LOCATION"
	<IDIVI	B* *2000*>		; "DO THIS TO SAVE OFFSET"
	<PUSH	P* C>			; "PAGE LOW AND HIGH IN A & B"
					; "OFFSET LOW AND HIGH IN -1(P) AND (P)"
	<PUSH	P* A>			; "SAVE THIS AS PAGE COUNT"
RDLOOP	<MOVE	D* -6(TP)>		; "THE ASYLUM"
	<PUSHJ	P* MAPPER>		; "MAP IN THIS PAGE, PLEASE"
	<ERRUUO* <MQUOTE PAGE-MAPPING-FAILED!-ERRORS>>
	<LSH	A* 10>			; "TO PAGE NUMBER"
	<MOVE	C* (TP)>
	<ADD	C* -3(P)>
	<HRL	A* C>			; "DESTINATION"	
	<ADD	A* -2(P)>		; "ADD IN MAGIC OFFSET FIRST TIME"
	<SKIPL	-4(P)>			; "IF -1, MAKE THIS A WRITE"
	<MOVSS	A>			; "SWAP 'EM FOR THE BLT"
	<MOVEI	C* *1777*>		; "END OF PAGE"
	<CAME	B* (P)>			; "LAST PAGE?"
	<JRST	RDLOP1>
	<HRRZ	C* -1(P)>		; "GET END OF THIS PAGE"
	<JUMPE	C* RDFIN>		; "FIX OBSCURE BUG WITH WORD AT PG BOUNDARY"
	<SUBI	C* 1>
RDLOP1	<SUB	C* -2(P)>		; "START OF PAGE ==> C == LENGTH OF TRANSFER"
	<ADDM	C* -3(P)>		; "UPDATE DESTINATION POINTER"
	<AOS	-3(P)>			; "OOPS. FORGOT THIS ONE"
	<ADD	C* A>			; "ADD TO DESTINATION"
	<BLT	A* (C)>			; "DO THE BLT"
	<SETZM	-2(P)>			; "ZERO FIRST TIME ONLY FLAG"
	<SKIPL	-4(P)>			; "DO A PGWRIT IF A WRITE"
	<JRST	RDLOP2>
	<PUSH	P* B>			; "SAVE B"
	<MOVE	B* -1(P)>		; "PAGE JUST WRITTEN"
	<LSH	B* 10>
	<PUSHJ	P* IPGWRI>		; "PAGE WRITE IMMEDIATE"
	<POP	P* B>			; "GET IT BACK"
RDLOP2	<CAMN	B* (P)>			; "DONE YET?"
	<JRST	RDFIN>			; "THANK MRC"
	<AOS	(P)>			; "NEXT PAGE"
	<MOVE	A* (P)>
	<JRST	RDLOOP>			; "LOOP"

RDFIN	<MOVE	A* -1(TP)>		; "RETURN LAST ARGUMENT (UV OR WORD)"
	<MOVE	B* (TP)>
	<SUB	P* [<5 (5)>]>
	<SUB	TP* [<8 (8)>]>
	<JRST	MPOPJ>

; "Map in a directory page.  The page of the directory is in A"

<SUB-ENTRY DIRMAP ("VALUE" <OR FALSE 'T> ASYLUM FIX)>
	<PUSH	TP* (AB)>
	<AOBJN	AB* HERE -1>
	<PUSHJ	P* IDIRMAP>
	<JRST	FINIS>

<INTERNAL-ENTRY IDIRMAP 2>
	<SUBM	M* (P)>
	<MOVE	D* -2(TP)>
	<MOVE	A* (TP)>
	<PUSHJ	P* MAPPR1>
	<JRST	DIRMLS>
	<MOVE	B* A>
	<MOVE	A* <TYPE-WORD FIX>>
	<SUB	TP* [<4 (4)>]>
	<JRST	MPOPJ>

DIRMLS	<MOVE	A* <TYPE-WORD FALSE>>
	<MOVE	B* <MQUOTE (12)>>
	<SUB	TP* [<4 (4)>]>
	<JRST	MPOPJ>

; "Map in a page from a ASYLUM file, the ASYLUM is in D
   The page number is in A
   Return the page number of the in-core copy in A
   Only B and D are spared"

<SUB-ENTRY MAP-IN ("VALUE" FIX ASYLUM FIX)>
	<PUSH	TP* (AB)>
	<AOBJN	AB* HERE -1>
	<PUSHJ	P* IMAP-IN>
	<JRST	FINIS>

<INTERNAL-ENTRY IMAP-IN 2>
	<SUBM	M* (P)>
	<MOVE	A* (TP)>
	<MOVE	B* A>
	<MOVE	D* -2(TP)>
	<PUSHJ	P* MAPPER>	
	<ERRUUO* <MQUOTE MAPPING-FAILED!-ERRORS>>
	<MOVE	B* A>
	<MOVE	A* <TYPE-WORD FIX>>
	<SUB	TP* [<4 (4)>]>
	<JRST	MPOPJ>

MAPPER	<SUBM	M* (P)>
	<PUSH	P* B>			; "POINT B AT THE PAGE MAP"
	<MOVE	O* B>			; "POINT O AT HIGH PAGE NEEDED"
	<MOVE	B* <OFFSET PAGEMAP> (D)>; "(P) IS NOW HIGH PAGE NEEDED"
	<JRST	MAPPR2>

MAPPR1	<SUBM	M* (P)>
	<PUSH	P* [-1]>		; "INDICATES DIR HACK"
	<MOVE	O* A>
	<MOVE	B* <OFFSET DIRPAGEMAP> (D)>

MAPPR2	<JUMPGE	B* MAPERR>
	<MOVE	C* <MQUOTE '%<RGLOC LRUCOUNT T>>>
	<ADD	C* GLOTOP 1(TVP)>
	<AOS	1(C)>			; "INCREMENT THE COUNTER"
	<MOVE	C* 1(C)>
	<PUSH	P* C>
	<SETZ	E*>			; "ZERO E"
MAPLP	<SKIPGE	(B)>
	<JRST	MAPWIN>
	<CAMN	A* (B)>			; "HAVE THE RIGHT PAGE?"
	<JRST	MAPWN1>			; "LUCKY"
	<CAMN	C* (P)>
	<JRST	MAPLP1>			; "FIRST TIME ==> TAKE ANYTHING"
	<SKIPL	-1(P)>
	<CAMGE	O* (B)>			; "THIS PAGE NEEDED SOON?"
	<CAMGE	C* 2(B)>	
	<JRST	MAPLP2>			; "YES. SKIP THIS"
MAPLP1	<SKIPGE	-1(P)>			; "SPECIAL HACK FOR DIR"
	<JRST	[<SKIPE 3(B)>
		 <JRST MAPLP2>		; "DONT DO THIS IF ENTRY IS LOCKED"
		 <JRST MAPLP1A>]>
MAPLP1A	<MOVE	E* B>			; "YES. POINT E AT THIS SPOT"
	<MOVE	C* 2(B)>		; "AND MAKE C LRU SO FAR"
MAPLP2	<ADD	B* [<4 (4)>]>		; "NEXT ENTRY"
	<JUMPL	B* MAPLP>		; "LOOP"
	<SKIPN	E>
	<JRST	[<SUB P* [<1 (1)>]>	; "NO VALUE YET. LOSE"
		 <JRST MAPERR>]>	; "RETURN FALSE (12)"
	<MOVE	B* 1(E)>		; "GET CORE PAGE"
	<SKIPE	3(E)>			; "THIS PAGE WAS WRITTEN RECENTLY"
	<PUSHJ	P* PGSWAP>		; "THIS PAGE WANTS TO BE PGWRIT'en"
	<MOVEM	A* (E)>			; "STUFF WITH THIS PAGE NUMBER"
	<POP	P* C>
	<MOVEM	C* 2(E)>
	<SETZM	3(E)>		
	<SKIPGE	(P)>			; "DIR SWITCH"
	<JRST	MAPWN2>
	<SKIPE	-6(P)>
	<SETOM	3(E)>			; "MARK AS WRITTEN NOW"
	<JRST	MAPWN2>
MAPWIN	<POP	P* C>
	<MOVEM	C* 2(B)>
	<SETZM	3(B)>
	<SKIPGE	(P)>			; "DIR SWITCH"
	<JRST	HERE 3>
	<SKIPE	-6(P)>			; "R/W SWITCH"
	<SETOM	3(B)>			; "MARK AS WRITTEN NOW"
	<MOVEM	A* (B)>			; "STUFF FILE PAGE NUMBER"
	<MOVE	B* 1(B)>		; "GET CORE PAGE"
MAPWN2	<PUSH	TP* <TYPE-WORD CHANNEL>>
	<PUSH	TP* <OFFSET DSKCHAN> (D)>
	<PUSH	TP* <TYPE-WORD FIX>>
	<PUSH	TP* A>
	<PUSH	TP* <TYPE-WORD FIX>>
	<PUSH	TP* B>
	<PUSH	P* B>
	<PUSHJ	P* MAP1>		; "INTERNAL CALL TO MAP-PAGE"
	<GETYP	B* A>
	<CAIE	B* <TYPE-CODE FALSE>>
	<SOS	-2(P)>			; "SOS FOR SKIP RETURN (BLETCH)"
	<POP	P* A>			; "CORE PAGE IN A FOR RETURN"
MAPERR	<POP	P* B>
	<JRST	MPOPJ>

MAPWN1	<POP	P* C>
	<MOVEM	C* 2(B)>			; "AOS THE USE COUNTER"
	<MOVE	A* 1(B)>		; "GET CORE PAGE"
	<POP	P* B>
	<SOS	(P)>			; "SKIP RETURN NOW"
	<JRST	MPOPJ>

; "Here if a page must be forced out of core.
   A directory swap request is marked by -1 in -2(P)"

PGSWAP	<SUBM	M* (P)>
	<SKIPGE	-2(P)>
	<JRST	DIRSWP>
	<PUSH	P* A>
	<PUSH	P* B>
	<PUSHJ	P* IPGWRT>		; "PGWRITE IF JUST A RANDOM PAGE"
	<POP	P* B>
	<POP	P* A>
	<JRST	MPOPJ>

DIRSWP	<SUB	P* [<2 (2)>]>		; "FLUSH THIS CALL AND SAVED C"
	<JRST	MAPERR>


<SUB-ENTRY PGWRITE ("VALUE" 'T FIX)>
	<DPUSH	TP* (AB)>
	<PUSHJ	P* PGWRITE1>
	<JRST	FINIS>

<INTERNAL-ENTRY PGWRITE1 1>
	<SUBM	M* (P)>
	<MOVE	B* (TP)>
	<PUSH	P* [-1]>
	<SETZ	C*>
	<JRST	PGWRT1>

IPGWRI	<SUBM	M* (P)>
	<PUSH	P* [0]>
	<MOVEI	C* 1>			; "IMMEDIATE RETURN CONTROL BIT"
	<JRST	PGWRT1>

IPGWRT	<SUBM	M* (P)>
	<PUSH	P* [0]>
	<SETZ	C*>

PGWRT1	<MOVEI	A* 10>
PGWLP	<SKIPN	A>
	<JRST	HUH>

<IFN10X #SPLICE ()
	#SPLICE (
;ITS		<*CALL	[<SETZ>
;ITS			 <SIXBIT "PGWRIT">
;ITS			 <MOVS C>		; "CONTROL BIT"
;ITS			 <SETZ B>]>
;ITS		<SOJA	A* PGWLP>)>

	<POP	P* A>
	<JUMPE	A* MPOPJ>
	<MOVE	A* <TYPE-WORD ATOM>>
	<MOVE	B* <MQUOTE T>>
	<SUB	TP* [<2 (2)>]>
	<JRST	MPOPJ>

HUH	<POP	P* A>
	<JUMPE	A* MPOPJ>
	<MOVE	A* <TYPE-WORD FALSE>>
	<SETZ	B*>
	<SUB	TP* [<2 (2)>]>
	<JRST	MPOPJ>

<SUB-ENTRY MAP-PAGE ("VALUE" <OR FALSE 'T> CHANNEL FIX FIX)>
	<PUSH	TP* (AB)>
	<AOBJN	AB* HERE -1>
	<PUSHJ	P* MAP1>
	<JRST	FINIS>

<INTERNAL-ENTRY MAP1 3>
	<SUBM	M* (P)>

<IFN10X #SPLICE (
;10X		<MOVE	A*	-2	(TP)>
;10X		<LSH	A*	1>
;10X		<MOVE	B*	-4	(TP)>
;10X		<HRL	A*	1	(B)>
;10X		<MOVE	B*	(TP)>
;10X		<LSH	B*	1>
;10X		<TLO	B*	*400000*>
;10X		<PUSH	P*	C>
;10X		<MOVSI	C*	*140000*>
;10X		<PMAP>
;10X		<AOJ	A*>
;10X		<AOJ	B*>
;10X		<PMAP>
;10X		<POP	P*	C>)
	#SPLICE (
;ITS		<MOVE	A* -4(TP)>
;ITS		<*CALL [<SETZ>
;ITS			<SIXBIT "CORBLK">
;ITS		   	<MOVEI *150000*>
;ITS			[-1]
;ITS			<(TP)>
;ITS			<1(A)>
;ITS			<SETZ -2(TP)>]>
;ITS		<JRST	MAPLOSE>)>

	<MOVE	A* <TYPE-WORD ATOM>>
	<MOVE	B* <MQUOTE T>>
	<SUB	TP* [<6 (6)>]>
	<JRST	MPOPJ>

<IFN10X #SPLICE ()
	#SPLICE (
;ITS	MAPLOSE	<MOVE	A* <TYPE-WORD FALSE>>
;ITS		<SETZ	B*>
;ITS		<SUB	TP* [<6 (6)>]>
;ITS		<JRST	MPOPJ>)>
