'<PCODE "LOOP">

<PACKAGE "LOOP"> 

<USE "FMACRO"> 

<RENTRY FOR AS NAMED INITIALLY FINALLY FINISH DO RETURN BUILD COLLECT COUNT 
MAXIMIZE MINIMIZE SUM ALWAYS NEVER THEREIS WHEN IF UNLESS WHILE UNTIL WITH = 
BEING FROM DOWNFROM UPFROM INTO THEN AS-A ABOVE BELOW BY THE STEP APPLYING 
FINISH DOWNTO ITS HIS HER THEIR EACH OF ON TO> 

<ENTRY LOOP DEFINE-LOOP-GENERATOR COMPILE-TIME? LREVERSE LEXPAND LOOP-RETURN 
LOOP-FINISH LOOP-CREATE-VARIABLE LOOP-DECLARATION LOOP-SOURCE-CODE LSCPOP 
LOOP-IN-PATH> 

<SETG ILOOP-OBLIST <1 .OBLIST>> 

<SETG LOOP-REGISTERS '![LOOP-PROLOGUE LOOP-BODY LOOP-AFTER-BODY LOOP-EPILOGUE 
LOOP-PRE-EPILOGUE LOOP-AFTER-EPILOGUE LOOP-CONDITIONALS LOOP-DECLARATIONS 
LOOP-MAPRET-PLACE LOOP-BEFORE-BODY LOOP-ILIST LOOP-INITS LOOP-COLLECT-INITS 
LOOP-COLLECT-VARS LOOP-FIRST-TESTS LOOP-SECOND-TESTS LOOP-FIRST-SETS 
LOOP-SECOND-SETS!]> 

<SETG LOOP-KEYWORDS '![(FOR LOOP-DO-FOR) (AS LOOP-DO-FOR) (WITH LOOP-DO-WITH) (
DO LOOP-DO-DO) (BUILD LOOP-DO-BUILD) (COLLECT LOOP-DO-COLLECT LIST) (WHEN 
LOOP-DO-WHEN #FALSE ()) (RETURN LOOP-DO-RETURN) (INITIALLY LOOP-DO-INITIALLY) (
FINALLY LOOP-DO-FINALLY) (COUNT LOOP-DO-COLLECT COUNT) (MAXIMIZE LOOP-DO-COLLECT
MAX) (MINIMIZE LOOP-DO-COLLECT MIN) (SUM LOOP-DO-COLLECT SUM) (IF LOOP-DO-WHEN #
FALSE ()) (UNLESS LOOP-DO-WHEN T) (ALWAYS LOOP-DO-ALWAYS T) (NEVER 
LOOP-DO-ALWAYS #FALSE ()) (FINISH LOOP-DO-FINISH) (NAMED LOOP-DO-NAMED) (THEREIS
LOOP-DO-THEREIS) (WHILE LOOP-DO-WHILE T) (UNTIL LOOP-DO-WHILE #FALSE ())!]> 

<SETG LOOP-FOR-KEYWORDS '![(= LOOP-FOR-EQUALS) (BEING LOOP-FOR-BEING) (FROM 
LOOP-FOR-ARITHMETIC #FALSE ()) (DOWNFROM LOOP-FOR-ARITHMETIC -) (UPFROM 
LOOP-FOR-ARITHMETIC +) (IN LOOP-FOR-IN) (ON LOOP-FOR-ON)!]> 

<SETG LOOP-PATH-KEYWORDS '()> 

<SETG LOOP-GENERATION-NUMBER 0> 

<SETG LOOP-PATHS '()> 

<GDECL (LOOP-GENERATION-NUMBER) FIX (MAPF-VAR? LAST-COLLECT-1 LOOP-MAPF-VAR 
LOOP-NAME) <OR '#FALSE () ATOM> (MAPENDER) FORM (LOOP-MAPF-FUN) ANY (
LOOP-REGISTERS) <UVECTOR [REST ATOM]> (LOOP-PATHS LOOP-PATH-KEYWORDS) LIST (
LOOP-KEYWORDS LOOP-FOR-KEYWORDS) <UVECTOR [REST LIST]> (LOOP-PROLOGUE LOOP-BODY 
LOOP-EPILOGUE LOOP-PRE-EPILOGUE LOOP-AFTER-EPILOGUE LOOP-CONDITIONALS 
LOOP-SOURCE-CODE LOOP-FIRST-TESTS LOOP-SECOND-TESTS LOOP-AFTER-BODY 
LOOP-SECOND-SETS LOOP-MAPRET-PLACE) <LIST [REST ANY]> (LOOP-FIRST-SETS) <LIST [
REST <FORM ATOM>]> (LOOP-DECLARATIONS) <LIST [REST <OR ATOM LIST FORM>]> (
LOOP-ILIST) <LIST [REST ATOM]> (LOOP-COLLECT-INITS LOOP-INITS) <LIST [REST FORM]
>> 

<SETG LOOP-LOOKUP-KEYWORD  %<RSUBR!- '[ %<PCODE!- "LOOP" 0> LOOP-LOOKUP-KEYWORD 
#DECL ("VALUE" <OR FALSE <LIST ATOM>> ANY UVECTOR)]>> 
<AND <ASSIGNED? GLUE> .GLUE <PUT ,LOOP-LOOKUP-KEYWORD PGLUE ![0!]>> 


<SETG LOOP-LOOKUP-PATH  %<RSUBR!- '[ %<PCODE!- "LOOP" 49> LOOP-LOOKUP-PATH #DECL
("VALUE" <OR FALSE <LIST <PRIMTYPE VECTOR> ATOM <LIST [REST ATOM]>>> ANY) %<
RGLOC LOOP-PATHS T>]>> 
<AND <ASSIGNED? GLUE> .GLUE <PUT ,LOOP-LOOKUP-PATH PGLUE ![805306368!]>> 


<SETG LOOP #MACRO ( %<RSUBR!- '[ %<PCODE!- "LOOP" 103> LOOP #DECL ("VALUE" FORM 
"ARGS" LIST) LRESPLICE LOOP-PSET LRESPLICE-N LOOP-LOOKUP-KEYWORD MAPLEAVE %<
RGLOC MAPENDER T> %<RGLOC MAPF-VAR? T> %<RGLOC LOOP-NAME T> %<RGLOC 
LOOP-MAPF-VAR T> %<RGLOC LOOP-MAPF-FUN T> %<RGLOC LAST-COLLECT-1 T> %<RGLOC 
LOOP-SOURCE-CODE T> %<RGLOC LOOP-REGISTERS T> T BIND %<RGLOC LOOP-BEFORE-BODY T>
 AND OR %<RGLOC LOOP-MAPRET-PLACE T> %<RGLOC LOOP-BODY T> %<RGLOC 
LOOP-AFTER-BODY T> MAPRET (T) MAPR SET %<RGLOC LOOP-SECOND-SETS T> %<RGLOC 
LOOP-PROLOGUE T> %<RGLOC LOOP-SECOND-TESTS T> FUN %<RGLOC LOOP-COLLECT-INITS T> 
%<RGLOC LOOP-FIRST-SETS T> %<RGLOC LOOP-FIRST-TESTS T> %<RGLOC LOOP-PRE-EPILOGUE
T> %<RGLOC LOOP-EPILOGUE T> %<RGLOC LOOP-AFTER-EPILOGUE T> RETURN LVAL %<RGLOC 
LOOP-INITS T> %<RGLOC LOOP-DECLARATIONS T> PROG %<RGLOC LOOP-ILIST T> "ACT" 
LNAME NON-ATOM-WHERE-KEYWORD-EXPECTED!-ERRORS %<RGLOC LOOP-KEYWORDS T> 
UNKNOWN-LOOP-KEYWORD!-ERRORS]>)> 
<AND <ASSIGNED? GLUE> .GLUE <PUT ,LOOP PGLUE ![717225983 -1 -1024 0!]>> 

<AND <ASSIGNED? GLUE> .GLUE <PUT <1 ,LOOP> GLUE ![4379120705 4044098563 
201523392 12888067840 4652601617 8334196740 30082596928 22089745 -17178820608 
262145 134221824 268959748 17716752432 130351183 12 3221293056 3233808881 
17200578560 3158017 18546192390 -16975393780 3240083520 143472 1141113968 
1945108480 3254517763 805307073 -3217290240 453778624 1879326832 3241607201 
-11875123194 -16369467384 31142448128 453774348 410009623 2146435072 3408960 
17187475200 268632099 1275129904 7516209152 7579353094 94224 3224371265 
8325890564 17179870209 -4273995776 0 262159 13!]>> 

<SETG LOOP-EMIT-BODY  %<RSUBR!- '[ %<PCODE!- "LOOP" 980> LOOP-EMIT-BODY #DECL (
"VALUE" <LIST ANY> ANY ATOM) CHECKC]>> 
<AND <ASSIGNED? GLUE> .GLUE <PUT ,LOOP-EMIT-BODY PGLUE ![536870912!]>> 


<SETG LOOP-GET-FORM  %<RSUBR!- '[ %<PCODE!- "LOOP" 1018> LOOP-GET-FORM #DECL (
"VALUE" ANY) LRESPLICE %<RGLOC LOOP-SOURCE-CODE T> BIND]>> 
<AND <ASSIGNED? GLUE> .GLUE <PUT ,LOOP-GET-FORM PGLUE ![788529152!]>> 


<SETG LOOP-DO-INITIALLY  %<RSUBR!- '[ %<PCODE!- "LOOP" 1144> LOOP-DO-INITIALLY #
DECL ("VALUE" <LIST ANY>) LOOP-GET-FORM LOOP-EMIT-BODY LOOP-PROLOGUE]>> 
<AND <ASSIGNED? GLUE> .GLUE <PUT ,LOOP-DO-INITIALLY PGLUE ![721420288!]>> 


<SETG LOOP-DO-DO  %<RSUBR!- '[ %<PCODE!- "LOOP" 1161> LOOP-DO-DO #DECL ("VALUE" 
<LIST ANY>) LOOP-GET-FORM LOOP-EMIT-BODY LOOP-BODY]>> 
<AND <ASSIGNED? GLUE> .GLUE <PUT ,LOOP-DO-DO PGLUE ![721420288!]>> 


<SETG LOOP-DO-FINALLY  %<RSUBR!- '[ %<PCODE!- "LOOP" 1178> LOOP-DO-FINALLY #DECL
("VALUE" <LIST ANY>) LOOP-GET-FORM LOOP-EMIT-BODY LOOP-EPILOGUE]>> 
<AND <ASSIGNED? GLUE> .GLUE <PUT ,LOOP-DO-FINALLY PGLUE ![721420288!]>> 


<SETG LPOP #MACRO ( %<RSUBR!- '[ %<PCODE!- "LOOP" 1195> LPOP #DECL ("VALUE" FORM
ATOM) BIND TMP LVAL SET REST .TMP]>)> 
<AND <ASSIGNED? GLUE> .GLUE <PUT ,LPOP PGLUE ![1073479680!]>> 

<AND <ASSIGNED? GLUE> .GLUE <PUT <1 ,LPOP> GLUE ![1078214592 8321499136 987120 
3844 0 262148!]>> 

<SETG LSCPOP #MACRO ( %<RSUBR!- '[ %<PCODE!- "LOOP" 1275> LSCPOP #DECL ("VALUE" 
!<FORM ATOM !<LIST !<LIST ATOM !<FORM FIX !<FORM [2 ATOM]!>!>!>!> !<FORM [2 ATOM
] !<FORM ATOM !<FORM [2 ATOM]!>!>!> !<FORM [2 ATOM]!>!>) <BIND ((TMP <1 ,
LOOP-SOURCE-CODE>)) <SETG LOOP-SOURCE-CODE <REST ,LOOP-SOURCE-CODE>> .TMP>]>)> 
<AND <ASSIGNED? GLUE> .GLUE <PUT ,LSCPOP PGLUE ![805306368!]>> 

<AND <ASSIGNED? GLUE> .GLUE <PUT <1 ,LSCPOP> GLUE ![17230200832 2!]>> 

<SETG LOOP-DO-FOR  %<RSUBR!- '[ %<PCODE!- "LOOP" 1287> LOOP-DO-FOR #DECL (
"VALUE" ATOM) LOOP-OPTIONAL-TYPE LOOP-LOOKUP-KEYWORD LRESPLICE LOOP-PSET %<RGLOC
LOOP-CONDITIONALS T> FOR/AS-STARTING-INSIDE-OF-CONDITIONAL!-ERRORS %<RGLOC 
LOOP-SOURCE-CODE T> UNEXPECTED-END-OF-LOOP-FORM!-ERRORS %<RGLOC 
LOOP-FOR-KEYWORDS T> UNKNOWN-KEYWORD-IN-FOR-OR-AS-CLAUSE!-ERRORS 
INVALID-INIT-LIST-FROM-HANDLER %<RGLOC LOOP-ILIST T> %<RGLOC LOOP-FIRST-TESTS T>
 %<RGLOC LOOP-SECOND-TESTS T> %<RGLOC LOOP-SECOND-SETS T> SET 
HANDLER-RETURNED-VECTOR-WITH-INVALID-NUMBER-OF-ARGUMENTS AND %<RGLOC LOOP-INITS 
T> %<RGLOC LOOP-BEFORE-BODY T> %<RGLOC LOOP-FIRST-SETS T> OR %<RGLOC MAPENDER T>
 %<RGLOC LOOP-AFTER-BODY T> T]>> 
<AND <ASSIGNED? GLUE> .GLUE <PUT ,LOOP-DO-FOR PGLUE ![717225983 -65536!]>> 


<SETG LOOP-OPTIONAL-TYPE  %<RSUBR!- '[ %<PCODE!- "LOOP" 2456> LOOP-OPTIONAL-TYPE
 #DECL ("VALUE" ANY) %<RGLOC LOOP-SOURCE-CODE T>]>> 
<AND <ASSIGNED? GLUE> .GLUE <PUT ,LOOP-OPTIONAL-TYPE PGLUE ![805306368!]>> 


<SETG LOOP-FOR-EQUALS  %<RSUBR!- '[ %<PCODE!- "LOOP" 2544> LOOP-FOR-EQUALS #DECL
("VALUE" <VECTOR <LIST ATOM> FALSE <LIST <LIST ATOM ANY>> [2 FALSE] [REST <
PRIMTYPE LIST>]> ATOM ANY <OR ATOM FORM FALSE>) %<RGLOC LOOP-SOURCE-CODE T> THEN
 UNEXPECTED-END-OF-LOOP-FORM!-ERRORS %<RGLOC LOOP-DECLARATIONS T>]>> 
<AND <ASSIGNED? GLUE> .GLUE <PUT ,LOOP-FOR-EQUALS PGLUE ![1069547520!]>> 


<SETG LOOP-FOR-ON  %<RSUBR!- '[ %<PCODE!- "LOOP" 2753> LOOP-FOR-ON #DECL (
"VALUE" <VECTOR <LIST <LIST ANY ANY> ATOM> FALSE <LIST <LIST ATOM FORM>> FORM 
FALSE FORM <LIST <LIST ATOM FORM>> FALSE FALSE [REST <PRIMTYPE LIST>]> ATOM ANY 
<OR FORM FALSE ATOM>) LOOP-CREATE-VARIABLE %<RGLOC LOOP-SOURCE-CODE T> BY 
UNEXPECTED-END-OF-LOOP-FORM!-ERRORS REST %<RGLOC LOOP-DECLARATIONS T> LVAL 
EMPTY?]>> 
<AND <ASSIGNED? GLUE> .GLUE <PUT ,LOOP-FOR-ON PGLUE ![805289984!]>> 


<SETG LOOP-FOR-IN  %<RSUBR!- '[ %<PCODE!- "LOOP" 3001> LOOP-FOR-IN #DECL (
"VALUE" <VECTOR <LIST <LIST ATOM ANY> ATOM> FORM <LIST <LIST ATOM FORM>> FALSE <
LIST <LIST ATOM FORM>> [REST <PRIMTYPE LIST>]> ATOM ANY <OR FORM FALSE ATOM>) 
LOOP-CREATE-VARIABLE LOOP-OPTIONAL-TYPE %<RGLOC LOOP-SOURCE-CODE T> BY 
UNEXPECTED-END-OF-LOOP-FORM!-ERRORS REST APPLYING %<RGLOC LOOP-DECLARATIONS T> 
EMPTY? LVAL]>> 
<AND <ASSIGNED? GLUE> .GLUE <PUT ,LOOP-FOR-IN PGLUE ![738196480!]>> 


<SETG LSCFIRST #MACRO ( %<RSUBR!- '[ %<PCODE!- "LOOP" 3334> LSCFIRST #DECL (
"VALUE" !<FORM ATOM !<FORM ATOM !<FORM ATOM !<FORM [2 ATOM]!>!>!> !<FORM FIX !<
FORM [2 ATOM]!>!>!>) <AND <NOT <EMPTY? ,LOOP-SOURCE-CODE>> <1 ,LOOP-SOURCE-CODE>
>]>)> 
<AND <ASSIGNED? GLUE> .GLUE <PUT ,LSCFIRST PGLUE ![805306368!]>> 

<AND <ASSIGNED? GLUE> .GLUE <PUT <1 ,LSCFIRST> GLUE ![17230200832 2!]>> 

<SETG LOOP-CREATE-VARIABLE  %<RSUBR!- '[ %<PCODE!- "LOOP" 3346> 
LOOP-CREATE-VARIABLE #DECL ("VALUE" ANY) T "G" %<RGLOC LOOP-GENERATION-NUMBER T>
 %<RGLOC ILOOP-OBLIST T> LOOP-ERROR-SYMBOL-ALREADY-IN-LOOP-INT-OBLIST]>> 
<AND <ASSIGNED? GLUE> .GLUE <PUT ,LOOP-CREATE-VARIABLE PGLUE ![1072693248!]>> 


<PUTPROP TO DIRECTION +> 

<PUTPROP BELOW DIRECTION +> 

<PUTPROP DOWNTO DIRECTION -> 

<PUTPROP ABOVE DIRECTION -> 

<PUTPROP TO ENDTEST G?> 

<PUTPROP BELOW ENDTEST G=?> 

<PUTPROP DOWNTO ENDTEST L?> 

<PUTPROP ABOVE ENDTEST L=?> 

<SETG LOOP-FOR-ARITHMETIC  %<RSUBR!- '[ %<PCODE!- "LOOP" 3404> 
LOOP-FOR-ARITHMETIC #DECL ("VALUE" <VECTOR <LIST <LIST ATOM ANY> ATOM> FALSE <
LIST <LIST ATOM FORM>> <OR FALSE FORM> FALSE <OR FALSE FORM> <LIST <LIST ATOM 
FORM>> FALSE FALSE> ATOM ANY <OR ATOM FALSE FORM> <OR ATOM FALSE>) 
LOOP-CREATE-VARIABLE %<RGLOC LOOP-SOURCE-CODE T> DIRECTION 
UNEXPECTED-END-OF-LOOP-FORM!-ERRORS + STEPPING-IN-TWO-DIRECTIONS!-ERRORS 
APPLYING LVAL APPLY BY STEP %<RGLOC LOOP-ILIST T> SET %<RGLOC LOOP-COLLECT-INITS
T> ENDTEST %<RGLOC LOOP-DECLARATIONS T>]>> 
<AND <ASSIGNED? GLUE> .GLUE <PUT ,LOOP-FOR-ARITHMETIC PGLUE ![805306367 
-17179869184!]>> 


<SETG LOOP-FOR-BEING  %<RSUBR!- '[ %<PCODE!- "LOOP" 4085> LOOP-FOR-BEING #DECL (
"VALUE" <VECTOR <PRIMTYPE LIST> ANY <PRIMTYPE LIST> ANY <PRIMTYPE LIST>> ATOM 
ANY <OR ATOM FALSE FORM>) LOOP-LOOKUP-PATH LOOP-GATHER-PREPS T EACH THE %<RGLOC 
LOOP-SOURCE-CODE T> UNEXPECTED-END-OF-LOOP-FORM!-ERRORS OF AND 
MALFORMED-BEING-CLAUSE!-ERRORS ![ITS HIS HER THEIR EACH!] 
LOOP-EXPECTED-ITS-OR-EACH!-ERRORS UNDEFINED-LOOP-PATHNAME!-ERRORS %<RGLOC 
LOOP-PROLOGUE T>]>> 
<AND <ASSIGNED? GLUE> .GLUE <PUT ,LOOP-FOR-BEING PGLUE ![738197500 0!]>> 


<SETG LOOP-IN-PATH  %<RSUBR!- '[ %<PCODE!- "LOOP" 4512> LOOP-IN-PATH #DECL (
"VALUE" ANY ATOM ATOM <OR ATOM FALSE FORM> LIST <OR 'T '#FALSE ()> ANY "TUPLE" 
TUPLE) LOOP-CREATE-VARIABLE PATH-EXPECTED-IN-PHRASE BY REST APPLYING %<RGLOC 
LOOP-DECLARATIONS T> INCLUSIVE-GENERATION-NOT-SUPPORTED-FOR-IN-PATH-YET EMPTY? 
LVAL]>> 
<AND <ASSIGNED? GLUE> .GLUE <PUT ,LOOP-IN-PATH PGLUE ![805302272!]>> 


<SETG LOOP-GATHER-PREPS  %<RSUBR!- '[ %<PCODE!- "LOOP" 4771> LOOP-GATHER-PREPS #
DECL ("VALUE" LIST LIST) LRESPLICE %<RGLOC LOOP-SOURCE-CODE T> 
UNEXPECTED-END-OF-LOOP-FORM!-ERRORS]>> 
<AND <ASSIGNED? GLUE> .GLUE <PUT ,LOOP-GATHER-PREPS PGLUE ![788529152!]>> 


<SETG DEFINE-LOOP-GENERATOR #MACRO ( %<RSUBR!- '[ %<PCODE!- "LOOP" 4955> 
DEFINE-LOOP-GENERATOR #DECL ("VALUE" FORM "ARGS" LIST) BIND NAME SETG LOOP-PATHS
 !,LOOP-PATHS .NAME]>)> 
<AND <ASSIGNED? GLUE> .GLUE <PUT ,DEFINE-LOOP-GENERATOR PGLUE ![1073479680!]>> 

<AND <ASSIGNED? GLUE> .GLUE <PUT <1 ,DEFINE-LOOP-GENERATOR> GLUE ![4379120704 
-4227843072 1073479680 1007681536 262159 13!]>> 

<SETG LOOP-DO-COLLECT  %<RSUBR!- '[ %<PCODE!- "LOOP" 5028> LOOP-DO-COLLECT #DECL
("VALUE" <OR FALSE <LIST [REST <OR ATOM LIST FORM>]>> ATOM) LOOP-GET-FORM 
LOOP-CREATE-VARIABLE CHECKC T %<RGLOC LOOP-SOURCE-CODE T> INTO 
UNEXPECTED-END-OF-LOOP-FORM!-ERRORS %<RGLOC LAST-COLLECT-1 T> %<RGLOC 
LOOP-COLLECT-VARS T> AS-A ACCUMULATION-STRUCTURE-DECL-MUST-BE-ATOMIC LIST SET 
CHTYPE LVAL %<RGLOC LOOP-PRE-EPILOGUE T> CONFLICTING-COLLECTS-IN-LOOP!-ERRORS 
COND NOT EMPTY? REST PUTREST SUM + COUNT MAX MIN AND G? L? %<RGLOC LOOP-BODY T> 
%<RGLOC LOOP-ILIST T> %<RGLOC LOOP-INITS T> FLOAT %<RGLOC LOOP-COLLECT-INITS T> 
RETURN .LNAME %<RGLOC LOOP-AFTER-EPILOGUE T> %<RGLOC LOOP-DECLARATIONS T> OR FIX
]>> 
<AND <ASSIGNED? GLUE> .GLUE <PUT ,LOOP-DO-COLLECT PGLUE ![721420287 -1 -1048576!
]>> 


<SETG LOOP-DO-BUILD  %<RSUBR!- '[ %<PCODE!- "LOOP" 5979> LOOP-DO-BUILD #DECL (
"VALUE" <OR FALSE <LIST [REST <OR ATOM LIST FORM>]>>) LOOP-CREATE-VARIABLE 
LOOP-GET-FORM CHECKC LOOP-EMIT-BODY %<RGLOC LOOP-CONDITIONALS T> 
BUILD-CLAUSE-STARTING-INSIDE-CONDITIONAL MAPSTOP %<RGLOC MAPENDER T> %<RGLOC 
LOOP-MAPF-VAR T> %<RGLOC LOOP-SOURCE-CODE T> UNEXPECTED-END-OF-LOOP-FORM!-ERRORS
 %<RGLOC LOOP-MAPF-FUN T> FROM %<RGLOC LOOP-ILIST T> SET LOOP-BODY LVAL %<RGLOC 
LOOP-MAPRET-PLACE T> INTO %<RGLOC MAPF-VAR? T> T AS-A %<RGLOC LOOP-DECLARATIONS 
T> T1]>> 
<AND <ASSIGNED? GLUE> .GLUE <PUT ,LOOP-DO-BUILD PGLUE ![717225983 -262144!]>> 


<SETG CHECKC  %<RSUBR!- '[ %<PCODE!- "LOOP" 6356> CHECKC #DECL ("VALUE" ANY ANY)
 LRESPLICE %<RGLOC LOOP-CONDITIONALS T> %<RGLOC LOOP-SOURCE-CODE T> AND COND]>> 
<AND <ASSIGNED? GLUE> .GLUE <PUT ,CHECKC PGLUE ![804257792!]>> 


<SETG LOOP-DO-WHEN  %<RSUBR!- '[ %<PCODE!- "LOOP" 6532> LOOP-DO-WHEN #DECL (
"VALUE" <LIST [REST ANY]> <OR ATOM FALSE>) %<RGLOC LOOP-SOURCE-CODE T> 
UNEXPECTED-END-OF-LOOP-FORM!-ERRORS NOT %<RGLOC LOOP-CONDITIONALS T>]>> 
<AND <ASSIGNED? GLUE> .GLUE <PUT ,LOOP-DO-WHEN PGLUE ![1069547520!]>> 


<SETG LOOP-DO-ALWAYS  %<RSUBR!- '[ %<PCODE!- "LOOP" 6614> LOOP-DO-ALWAYS #DECL (
"VALUE" <LIST ANY> <OR ATOM FALSE>) CHECKC LOOP-EMIT-BODY %<RGLOC 
LOOP-SOURCE-CODE T> UNEXPECTED-END-OF-LOOP-FORM!-ERRORS NOT OR RETURN .LNAME %<
RGLOC LOOP-AFTER-EPILOGUE T> <RETURN T .LNAME> LOOP-BODY]>> 
<AND <ASSIGNED? GLUE> .GLUE <PUT ,LOOP-DO-ALWAYS PGLUE ![738197248!]>> 


<SETG LOOP-DO-THEREIS  %<RSUBR!- '[ %<PCODE!- "LOOP" 6713> LOOP-DO-THEREIS #DECL
("VALUE" <LIST ANY>) CHECKC LOOP-EMIT-BODY %<RGLOC LOOP-SOURCE-CODE T> 
UNEXPECTED-END-OF-LOOP-FORM!-ERRORS AND RETURN .LNAME LOOP-BODY]>> 
<AND <ASSIGNED? GLUE> .GLUE <PUT ,LOOP-DO-THEREIS PGLUE ![738181120!]>> 


<SETG LOOP-DO-WHILE  %<RSUBR!- '[ %<PCODE!- "LOOP" 6786> LOOP-DO-WHILE #DECL (
"VALUE" <LIST ANY> <OR ATOM FALSE>) CHECKC LOOP-EMIT-BODY %<RGLOC 
LOOP-SOURCE-CODE T> UNEXPECTED-END-OF-LOOP-FORM!-ERRORS NOT AND %<RGLOC MAPENDER
T> LOOP-BODY]>> 
<AND <ASSIGNED? GLUE> .GLUE <PUT ,LOOP-DO-WHILE PGLUE ![738181120!]>> 


<SETG LOOP-DO-FINISH  %<RSUBR!- '[ %<PCODE!- "LOOP" 6866> LOOP-DO-FINISH #DECL (
"VALUE" <LIST ANY>) CHECKC LOOP-EMIT-BODY %<RGLOC MAPENDER T> LOOP-BODY]>> 
<AND <ASSIGNED? GLUE> .GLUE <PUT ,LOOP-DO-FINISH PGLUE ![734003200!]>> 


<SETG LOOP-DO-WITH  %<RSUBR!- '[ %<PCODE!- "LOOP" 6887> LOOP-DO-WITH #DECL (
"VALUE" ATOM) LOOP-OPTIONAL-TYPE LOOP-PSET %<RGLOC LOOP-CONDITIONALS T> 
WITH-CLAUSE-INSIDE-CONDITIONAL!-ERRORS %<RGLOC LOOP-SOURCE-CODE T> 
UNEXPECTED-END-OF-LOOP-FORM!-ERRORS = %<RGLOC LOOP-ILIST T> %<RGLOC 
LOOP-DECLARATIONS T> AND %<RGLOC LOOP-INITS T> T]>> 
<AND <ASSIGNED? GLUE> .GLUE <PUT ,LOOP-DO-WITH PGLUE ![738197440!]>> 


<SETG LOOP-DO-RETURN  %<RSUBR!- '[ %<PCODE!- "LOOP" 7155> LOOP-DO-RETURN #DECL (
"VALUE" <LIST [REST ANY]>) LOOP-GET-FORM CHECKC RETURN .LNAME %<RGLOC LOOP-BODY 
T>]>> 
<AND <ASSIGNED? GLUE> .GLUE <PUT ,LOOP-DO-RETURN PGLUE ![737148928!]>> 


<SETG LOOP-RETURN #MACRO ( %<RSUBR!- '[ %<PCODE!- "LOOP" 7198> LOOP-RETURN #DECL
("VALUE" FORM "OPTIONAL" "QUOTE" ANY) RETURN .LNAME]>)> 
<AND <ASSIGNED? GLUE> .GLUE <PUT ,LOOP-RETURN PGLUE ![1006632960!]>> 

<AND <ASSIGNED? GLUE> .GLUE <PUT <1 ,LOOP-RETURN> GLUE ![4379120704 -4043046912 
262159 13!]>> 

<SETG LOOP-PSET  %<RSUBR!- '[ %<PCODE!- "LOOP" 7235> LOOP-PSET #DECL ("VALUE" 
ANY <LIST [REST <LIST ATOM>]>) SET BIND TEM .TEM]>> 
<AND <ASSIGNED? GLUE> .GLUE <PUT ,LOOP-PSET PGLUE ![1069547520!]>> 


<SETG LOOP-DO-NAMED  %<RSUBR!- '[ %<PCODE!- "LOOP" 7325> LOOP-DO-NAMED #DECL (
"VALUE" <OR ATOM FALSE>) %<RGLOC LOOP-SOURCE-CODE T> 
UNEXPECTED-END-OF-LOOP-FORM!-ERRORS %<RGLOC LOOP-NAME T>]>> 
<AND <ASSIGNED? GLUE> .GLUE <PUT ,LOOP-DO-NAMED PGLUE ![1056964608!]>> 


<SETG CHECK-END #MACRO ( %<RSUBR!- '[ %<PCODE!- "LOOP" 7370> CHECK-END #DECL (
"VALUE" !<FORM ATOM !<LIST !<FORM ATOM !<FORM [2 ATOM]!>!> !<FORM [2 ATOM]!>!>!>
) <COND (<EMPTY? ,LOOP-SOURCE-CODE> <ERROR UNEXPECTED-END-OF-LOOP-FORM!-ERRORS>)
>]>)> 
<AND <ASSIGNED? GLUE> .GLUE <PUT ,CHECK-END PGLUE ![805306368!]>> 

<AND <ASSIGNED? GLUE> .GLUE <PUT <1 ,CHECK-END> GLUE ![17230200832 2!]>> 

<SETG COMPILE-TIME? #MACRO ( %<RSUBR!- '[ %<PCODE!- "LOOP" 7382> COMPILE-TIME? #
DECL ("VALUE" !<FORM ATOM !<LIST !<FORM ATOM STRING !<FORM ATOM!>!> ATOM!>!>) <
COND (<LOOKUP "COMPILE" <ROOT>> T)>]>)> 
<AND <ASSIGNED? GLUE> .GLUE <PUT ,COMPILE-TIME? PGLUE ![805306368!]>> 

<AND <ASSIGNED? GLUE> .GLUE <PUT <1 ,COMPILE-TIME?> GLUE ![17230200832 2!]>> 

<SETG LEXPAND  %<RSUBR!- '[ %<PCODE!- "LOOP" 7394> LEXPAND #DECL ("VALUE" ANY 
ANY) T %<RGLOC LOOP T>]>> 
<AND <ASSIGNED? GLUE> .GLUE <PUT ,LEXPAND PGLUE ![1006632960!]>> 


<SETG LX #MACRO ( %<RSUBR!- '[ %<PCODE!- "LOOP" 7453> LX #DECL ("VALUE" FORM 
"QUOTE" FORM) %<RGLOC LOOP T>]>)> 
<AND <ASSIGNED? GLUE> .GLUE <PUT ,LX PGLUE ![805306368!]>> 

<AND <ASSIGNED? GLUE> .GLUE <PUT <1 ,LX> GLUE ![1076891648 1074790400 262148!]>> 

<SETG LOOP-FINISH #MACRO ( %<RSUBR!- '[ %<PCODE!- "LOOP" 7488> LOOP-FINISH #DECL
("VALUE" !<FORM ATOM FORM!>) <MAPLEAVE <>>]>)> 
<AND <ASSIGNED? GLUE> .GLUE <PUT ,LOOP-FINISH PGLUE ![805306368!]>> 

<AND <ASSIGNED? GLUE> .GLUE <PUT <1 ,LOOP-FINISH> GLUE ![17230200832 2!]>> 

<SETG LOOP-DECLARATION  %<RSUBR!- '[ %<PCODE!- "LOOP" 7500> LOOP-DECLARATION #
DECL ("VALUE" <OR FALSE <LIST [REST <OR ATOM LIST FORM>]>> ANY) LIST %<RGLOC 
LOOP-DECLARATIONS T>]>> 
<AND <ASSIGNED? GLUE> .GLUE <PUT ,LOOP-DECLARATION PGLUE ![1006632960!]>> 


<SETG LREVERSE #MACRO ( %<RSUBR!- '[ %<PCODE!- "LOOP" 7541> LREVERSE #DECL (
"VALUE" FORM "QUOTE" ANY) LRESPLICE '()]>)> 
<AND <ASSIGNED? GLUE> .GLUE <PUT ,LREVERSE PGLUE ![1006632960!]>> 

<AND <ASSIGNED? GLUE> .GLUE <PUT <1 ,LREVERSE> GLUE ![1077689360 0 262148!]>> 

<SETG LRESPLICE  %<RSUBR!- '[ %<PCODE!- "LOOP" 7564> LRESPLICE #DECL ("VALUE" 
LIST LIST LIST)]>> 
<AND <ASSIGNED? GLUE> .GLUE <PUT ,LRESPLICE PGLUE ![0!]>> 


<SETG LSPLICE-2 #MACRO ( %<RSUBR!- '[ %<PCODE!- "LOOP" 7592> LSPLICE-2 #DECL (
"VALUE" FORM "QUOTE" ANY "QUOTE" ANY) PUTREST MAPR #FUNCTION ((L) #DECL ((L) 
LIST) .L)]>)> 
<AND <ASSIGNED? GLUE> .GLUE <PUT ,LSPLICE-2 PGLUE ![1056964608!]>> 

<AND <ASSIGNED? GLUE> .GLUE <PUT <1 ,LSPLICE-2> GLUE ![67370108 65536 524294!]>> 

<SETG LRESPLICE-N  %<RSUBR!- '[ %<PCODE!- "LOOP" 7628> LRESPLICE-N #DECL (
"VALUE" LIST "TUPLE" TUPLE)]>> 
<AND <ASSIGNED? GLUE> .GLUE <PUT ,LRESPLICE-N PGLUE ![0!]>> 


<COND (<LOOKUP "COMPILE" <ROOT>>) (ELSE <FAST-MACROS>)> 

<ENDPACKAGE> 
