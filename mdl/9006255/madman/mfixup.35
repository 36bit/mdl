;"(c) Copyright 1978 Massachusetts Institute of Technology.  All Rights Reserved."

<AND <GET ESYASS!-PACKAGE OBLIST>
     <SETG!- <OR <LOOKUP "F*" <GET OP!-PACKAGE OBLIST>>
		 <INSERT "F*" <GET OP!-PACKAGE OBLIST>>>
	     <CHTYPE *000300000000* <LOOKUP "OPCODE" <GET OP!-PACKAGE OBLIST>>>>
     <SETG!- <OR <LOOKUP "G*" <GET OP!-PACKAGE OBLIST>>
		 <INSERT "G*" <GET OP!-PACKAGE OBLIST>>>
	     <CHTYPE *000340000000* <LOOKUP "OPCODE" <GET OP!-PACKAGE OBLIST>>>>>

<SETG BCFALSE #FALSE ("OBJECT-POINTS-OUTSIDE-SPACE" 1)>

; "LFIXUP
     1. TYPE WORD
     2. VALUE WORD
     3. LOW ADDRESS IN CORE
     4. HIGH ADDRESS IN CORE
     5. OFFSET

LFIXUP wanders through core from HIGH to LOW updating all
pointers by doing an <XCT A>. When done, it updates VALUE WORD and
returns the object TYPE/VALUE.
LFIXUP executes <ADDM O* (D)>

--
     1. TYPE WORD
     2. VALUE WORD
     3. VECTOR (FIXUP TABLE)
	  [<pagelow 1> <pagehigh 1> <old pagenum> <pagelow 2> ...]

LHFIXUP is similar but fixes up cases in which one fixed offset
is insufficient due to presence of non-contiguous blocks in the
dumped file.  It more or less loops through the table doing the
right thing in fixing pointers
LHFIXUP executes <PUSHJ P* LHHACK> "

; "AC hackery -
   A = INSTRUCTION TO XCT
   B = HIGH END OF SPACE
   E = LOW END OF SPACE
   C,D,O FOR SCRATCH"

<TITLE LHFIXUP>
	<DECLARE ("VALUE" ANY WORD WORD VECTOR)>
	<DPUSH	TP* (AB)>
	<DPUSH	TP* 2(AB)>
	<DPUSH	TP* 4(AB)>
	<PUSHJ	P* LHFIXUP1>
	<JRST	FINIS>

<INTERNAL-ENTRY LHFIXUP1 3>
	<SUBM	M* (P)>
	<MOVEI	O* *777777*>	; "DISTINGUISH FROM LFIXUP"
	<PUSH	P* [-1]>
	<MOVE	A* [<PUSHJ P* LHHACK>]>
	<MOVE	C* (TP)>
	<JUMPGE	C* LMONAD>
PRELOOP	<SKIPE	1(C)>		; "HAS THIS ENTRY BEEN ZEROED YET?"
	<MOVE	E* 1(C)>	; "NO. GET THE ENTRY"
	<CAMN	E* 7(C)>	; "IS IT SAME AS NEXT ENTRY"
	<SETZM	7(C)>		; "ZERO THE NEXT ENTRY (COPY)"
	<ADD	C* [<6 (6)>]>
	<JUMPGE	C* LLOOP0>
	<JRST	PRELOOP>
LLOOP0	<MOVE	C* (TP)>
LLOOP	<PUSH	P* C>		; "MAIN LOOP FOR LHFIXUP"
	<MOVE	E* 1(C)> 	; "LOW"
	<JUMPE	E* LHFIX>
	<MOVE	B* 3(C)>	; "HIGH"
	<PUSHJ	P* MLOOP0>	; "FIX UP THIS PAGE"
LHFIX	<POP	P* C>
	<ADD	C* [<6 (6)>]>
	<JUMPL	C* LLOOP>
	<MOVE	B* -2(TP)>	; "FIXUP TYPE/VALUE"
	<MOVEI	D* B>
	<PUSHJ	P* LHHACK>
	<MOVE	A* -4(TP)>
	<JRST	MEND1>

LMONAD	<MOVE	A* -4(TP)>
	<MOVE	B* -2(TP)>
	<JRST	MEND1>

<SUB-ENTRY LHPFIX ("VALUE" WORD WORD <VECTOR [REST WORD]>)>
	<DPUSH	TP* (AB)>
	<DPUSH	TP* 2(AB)>
	<PUSHJ	P* LHPFIX1>
	<JRST	FINIS>

<INTERNAL-ENTRY LHPFIX1 1>
	<SUBM	M* (P)>
	<MOVE	B* -2(TP)>
	<MOVEI	D* B>
	<PUSHJ	P* LHHACK>	; "DOES AN ADDM X (D)"
	<MOVE	A* <TYPE-WORD WORD>>
	<SUB	TP* [<4 (4)>]>
	<JRST	MPOPJ>	


LHHACK	<SUBM	M* (P)>
	<PUSH	P* A>
	<PUSH	P* C>
	<PUSH	P* E>
	<MOVE	C* (TP)>
PLOOP	<HRRZ	A* 5(C)>	; "GET OLD PAGE HIGH"
	<HRRZ	E* (D)>
	<CAMGE	A* E>		; "> CURRENT POS?"
	<JRST	PFIX1>		; "NO. WRONG PAGE"
	<SUBI	A* 1024>
	<CAMG	A* E>
	<JRST	PWIN>	
PFIX1	<ADD	C* [<5 (5)>]>
	<AOBJN	C* PLOOP>
	<MOVE	A* <MQUOTE <RGLOC AERRFIX T>>>
	<ADD	A* GLOTOP 1>
	<MOVE	A* (A)>
	<CAME	A* <TYPE-WORD FALSE>>
	 <JRST	[<SETZM (D)>
	 	 <JRST PWIN1>]>
	<SUB	P* [<3 (3)>]>
	<JRST	ILLAREA>

PWIN	<ADDI	A* 1024>	; "OBJECT POINTS HERE"
	<MOVE	C* 3(C)>	; "NEW POINTER TO THAT AREA"
	<SUB	C* A>		; "SUBTRACT OLD POINTER TO GET OFFSET"
	<ADDM	C* (D)>
PWIN1	<POP	P* E>
	<POP	P* C>
	<POP	P* A>
	<JRST	MPOPJ>

<SUB-ENTRY LPFIXUP ("VALUE" ANY ANY UVECTOR VECTOR)>
	<DPUSH	TP* (AB)>
	<DPUSH	TP* 2(AB)>
	<DPUSH	TP* 4(AB)>
	<PUSHJ	P* LPFIX1>
	<JRST	FINIS>

<INTERNAL-ENTRY LPFIX1 3>
	<SUBM	M* (P)>
	<MOVEI	O* *777777*>
	<PUSH	P* [-1]>
	<MOVE	A* [<PUSHJ P* LPHACK>]>
	<MOVE	C* (TP)>
LPMLOOP	<PUSH	P* C>
	<MOVE	E* 1(C)>
	<MOVE	B* 3(C)>
	<PUSHJ	P* MLOOP0>
	<POP	P* C>
	<ADD	C* [<6 (6)>]>
	<JUMPL	C* LPMLOOP>
	<MOVE	A* -2(TP)>
	<MOVE	B* 1(A)>
	<MOVEI	D* B>
	<PUSHJ	P* LPHACK>
	<MOVEM	B* 1(A)>
	<MOVE	A* -3(TP)>
	<MOVE	B* -2(TP)>
	<JRST	MEND1>

LPHACK	<SUBM	M* (P)>
	<PUSH	P* A>
	<PUSH	P* C>
	<PUSH	P* E>
	<PUSH	P* [0]>
	<MOVE	C* (TP)>
	<HRRZ	E* (D)>
LPLOOP	<HRRZ	A* 3(C)>
	<CAMGE	A* E>
	<JRST	LPELOOP>
	<CAML	E* 1(C)>
	<JRST	LPWIN>
LPELOOP	<ADD	C* [<5 (5)>]>
	<AOBJN	C* LPLOOP>
	<GETYP	A* -1(D)>
	<LSH	A* 1>
	<ADD	A* TYPVEC 1>
	<HRRZ	A* (A)>
	<ANDI	A* *777*>
	<CAIE	A* *20*>
	 <CAIN	A* *14*>
	  <JRST	HERE 2>
	<JRST	LPLOSE1>
	<SKIPGE	(P)>
	 <JRST	LPLOSE>
	<ADDI	E* 1>
	<MOVE	C* (TP)>	
	<MOVSI	A* *400000*>
	<IORM	A* (P)>
	<JRST	LPLOOP>
LPLOSE1	<CAIN	A* *15*>		; "WIN WITH CRETIN ATOMS"
	 <JRST	LPWIN 2>
LPLOSE	<SUB	P* [<4 (4)>]>
	<CAIN	F* <TYPE-CODE LIST>>
	 <JRST	ILLLST>
	<CAIN	F* <TYPE-CODE UVECTOR>>
	 <JRST ILLUVC>>
ILLREG	<MOVE	C* -1(D)>
ILLRG1	<MOVE	D* (D)>
ILLRG2	<HLLZS	C>
ILLRG3	<MOVE	A* <MQUOTE <RGLOC AERRFIX T>>>
	<ADD	A* GLOTOP 1>
	<MOVE	A* (A)>
	<CAME	A* <TYPE-WORD FALSE>>
	 <JRST	LPWIN1>
	<JRST	ILLAREA>

ILLUVC	<MOVE	C* (D)>
	<ADD	D* -1(P)>
	<MOVE	D* (D)>
	<TLZ	D* *440000*>
	<EXCH	C* D>
	<JRST	ILLRG2>

ILLLST	<GETYP	C* (D)>
	<CAIE	C* <TYPE-WORD LIST>>
	 <JRST	ILLREG>
	<MOVE	C* (D)>
	<MOVE	D* 1(D)>
	<JRST	ILLRG3>

LPWIN1	<SETZM	(D)>
	<JRST	LPWIN2>

LPWIN	<MOVE	A* 5(C)>
	<ADDM	A* (D)>
LPWIN2	<POP	P* E>
	<POP	P* E>
	<POP	P* C>
	<POP	P* A>
	<JRST	MPOPJ>

<SUB-ENTRY LFIXUP ("VALUE" ANY WORD WORD WORD WORD WORD)>
	<DPUSH	TP* (AB)>
	<DPUSH	TP* 2(AB)>
	<DPUSH	TP* 4(AB)>
	<DPUSH	TP* 6(AB)>
	<DPUSH	TP* 8(AB)>
	<PUSHJ	P* LFIXUP1>
	<JRST	FINIS>

<INTERNAL-ENTRY LFIXUP1 5>
	<SUBM	M* (P)>
	<SKIPN	(TP)>	
	 <JRST	MEND>
	<MOVE	A* [<ADDM O* (D)>]>
	<MOVE	O* (TP)>
LF541	<MOVE	B* -2(TP)>	; "HIGH END OF SPACE"
	<SKIPA	E* -4(TP)>	; "LOW LIMIT"
MLOOP0	 <SUBM	M* (P)>
	<SUBI	B* 2>		; "GET TO FIRST DW/LIST CELL"
MLOOP	<CAMGE	B* E>		; "END OF SPACE?"
	 <JRST	MEND>
	<MOVE	C* (B)>		; "1ST DOPE WORD OR LIST CELL TYPE"
	<TLNN	C* *40000*>	; "TEST FOR VECTORAGE"
	 <JRST	LHACK>		; "MUST BE A LIST CELL"
	<HLRE	D* (B)>		; "TYPE FROM DOPE WORD"
	<TRZ	D* *40000*>	; "TURN OFF VECTOR BIT"
	<HLRZ	C* 1(B)>
	<TRZ	C* *400000*>
	<SUBI	B* -2(C)>	; "POINT TO TOP OF VECTOR"
	<CAMGE	B* E>		; "IN RANGE?"
	 <JRST	CHOMP>		; "THIS IS A DISASTER, IF WE GET HERE"
	<PUSH	P* B>		; "SAVE TOP OF VECTOR"
	<SUBI	C* 2>
	<JUMPL	C* BADV>	; "NEGATIVE LENGTH VECTOR"
	<PUSH	P* C>		; "SAVE LENGTH OF VECTOR"
	<JUMPE	C* VHACK1>	; "EMPTY VECTOR?"
	<JUMPGE	D* UHACK>
	<TRNE	D* *377777*>
	 <JRST	SHACK>

VHACK	<MOVEI	F* <TYPE-CODE VECTOR>>
	<GETYP	C* (B)>		; "GET TYPE OF ELEMENT"
	<LSH	C* 1>		; "CODE TO GET SAT IN C"
	<ADD	C* TYPVEC 1>
	<HRRZ	C* (C)>
	<CAIN	C* 1>		; "ONE SAYS PRIMTYPE WORD"
	<JRST	VHACK0>
	<SKIPN	1(B)>		; "DONT MUNG ZEROS"
	<JRST	VHACK0>
	<MOVEI	D* 1(B)>
	<XCT	A>
VHACK0	<ADDI	B* 2>		; "POINT TO NEXT ELEMENT"
	<SOS	(P)>
	<SOSLE	(P)>
	<JRST	VHACK>		; "LOOP"
VHACK1	<MOVEI	D* 1(B)>	; "POINTER TO SECOND DOPE WORD"
	<HRRZ	B* (D)>		; "RH OF SECOND DOPE WORD"
	<SKIPE	B>		; "DONT FIX UP ZEROS"
	<XCT	A>
VHACK2	<MOVE	B* -1(P)>	; "GET BACK TOP OF VECTOR"
	<SUB	P* [<2 (2)>]>	; "RESET P STACK"
	<SUBI	B* 2>		; "BACK TO NEXT OBJECT"
	<JRST	MLOOP>		; "TO TOP"

UHACK	<MOVEI	F* <TYPE-CODE UVECTOR>>
	<MOVEI	C* (D)>		; "PLAY WITH UTYPE"
	<LSH	C* 1>
	<ADD	C* TYPVEC 1>
	<HRRZ	C* (C)>
	<CAIN	C* 1>
	<JRST	[<ADD B* (P)>
		 <JRST VHACK1>]>
	<SUBI	B* 1>
UHACK1	<SKIPN	1(B)>
	<JRST	HERE 3>
	<MOVEI	D* 1(B)>
	<XCT	A>
	<SOSLE	(P)>
	<AOJA	B* UHACK1>	
	<ADDI	B* 2>
	<JRST	VHACK1>	

LHACK	<MOVEI	F* <TYPE-CODE LIST>>
	<GETYP	C* C>
	<LSH	C* 1>
	<ADD	C* TYPVEC 1>
	<HRRZ	C* (C)>
	<CAIN	C* 1>
	<JRST	LHACK0>		; "CELL HAS NON-STRUCTURED OBJ"
	<SKIPN	1(B)>
	<JRST	LHACK0>
	<MOVEI	D* 1(B)>
	<XCT	A>
LHACK0	<CAIE	C* *14*>
	<CAIN	C* *20*>	; "ASSHOLIC DEFER-STRINGS"
	<JRST	LHACK1>
	<HRRZ	C* (B)>
	<JUMPE	C* LHACK1>	; "END OF LIST"
	<MOVEI	D* (B)>
	<XCT	A>
LHACK1	<SUBI	B* 2>
	<JRST	MLOOP>

MEND	<CAIN	O* *777777*>
	<JRST	MPOPJ>
	<MOVE	A* -8(TP)>
	<SKIPE	B* -6(TP)>
	<ADD	B* (TP)>
MEND1	<CAIE	O* *777777*>
	<SUB	TP* [<4 (4)>]>	; "3 IF LHFIXUP"
MEND2	<SUB	TP* [<6 (6)>]>	; "5 IF LFIXUP"
	<CAIN	O* *777777*>
	<SUB	P* [<1 (1)>]>
	<JRST	MPOPJ>

; "ERRFLS CHECKS FOR AERRFALSE AND SKIPS IF IT IS GASSIGNED AND NOT FALSE"

ERRFLS	<SUBM	M* (P)>
	<PUSH	TP* C>
	<PUSH	TP* D>
	<MOVE	A* (P)>
	<CAIE	O* *777777*>
	<SUB	TP* [<4 (4)>]>
	<POP	P* B>
	<CAME	B* [-1]>
	<JRST	HERE -2>	
	<PUSH	P* A>
	<MOVE	E* <MQUOTE '%<RGLOC AERRCHECK T>>>
	<ADD	E* GLOTOP 1>
	<GETYP	A* (E)>
	<CAIN	A* <TYPE-CODE FALSE>>
	<JRST	MPOPJ>
	<MOVE	B* <MQUOTE AERRFALSE>>
	<PUSHJ	P* CASSQ>	; "AND IS NOT FALSE"
	<JRST	MPOPJ>
	<MOVE	B* <MQUOTE AERRFALSE>>
	<PUSHJ	P* CILVAL>
	<GETYP	E* A>
	<POP	TP* D>
	<POP	TP* C>
	<CAIN	E* <TYPE-CODE FALSE>>
	<JRST	MPOPJ>
ERRFL2	<SOS	(P)>
	<JRST	MPOPJ>

ILLAREA	<PUSHJ	P* ERRFLS>
	<ERRUUO* <MQUOTE OBJECT-POINTS-OUTSIDE-AREA!-ERRORS>>
	<MOVE	B* <MQUOTE <RGLOC BCFALSE T>>>
	<ADD	B* GLOTOP 1>
	<MOVE	A* (B)>
	<MOVE	B* 1(B)>
	<HRRZ	E* (B)>
	<MOVEM	C* (E)>
	<MOVEM	D* 1(E)>
	<JRST	MEND2>

BADV	<PUSHJ	P* ERRFLS>
	<ERRUUO* <MQUOTE NEGATIVE-LENGTH-VECTOR!-ERRORS>>
	<MOVE	A* <PQUOTE #FALSE ("NEGATIVE-LENGTH-VECTOR")>>
	<MOVE	B* <MQUOTE #FALSE ("NEGATIVE-LENGTH-VECTOR")>>
	<JRST	MEND2>

; "HERE TO HACK TEMPLATES"

SHACK	<ANDI	D* *377777*>	; "KILL EXTRA CRUFT"
	<CAIG	D* NUMSAT>	; "TEMPLATE MAYBE?"
	<JRST	BADV>	; "NO CHANCE"
	<ADDI	C* (B)>	; "POINT TO DOPE WORDS"
	<SUBI	D* NUMSAT 1>
	<HRLI	D* (D)>
	<ADD	D* TD.LNT 1>
	<JUMPGE	D* BADV>	; "JUMP IF INVALID TEMPLATE HACKER"

TD.UPD	<PUSH	P* E>
	<PUSH	P* O>		; "OFFSET"
	<PUSH	P* A>		; "INS TO EXECUTE"
	<XCT	(D)>
	<HLRZ	E* B>		; "POSSIBLE BASIC LENGTH"
	<PUSH	P* [0]>
	<PUSH	P* E>
	<MOVEI	B* (B)>		; "ISOLATE LENGTH"
	<PUSH	P* C>		; "SAVE POINTER TO OBJECT"
	<PUSH	P* [0]>		; "HOME FOR VALUES"
	<PUSH	P* [0]>		; "SLOT FOR TEMP"
	<PUSH	P* B>		; "SAVE"
	<SUB	D* TD.LNT 1>
	<PUSH	P* D>		; "SAVE FOR FINDING OTHER TABLES"
	<JUMPE	E* TD.UP2>	; "NO REPEATING SEQ"
	<ADD	D* TD.GET 1>	; "COMP LNTH OF REPEATING SEQ"
	<HLRE	D* (D)>		; "D ==> - LNTH OF TEMPLATE"
	<ADDI	D* (E)>		; "D ==> -LENGTH OF REP SEQ"
	<MOVNS	D>
	<HRLM	D* -5(P)>	; "SAVE IT AND BASIC"

TD.UP2	<SKIPG	D* -1(P)>	; "ANY LEFT?"
	<JRST	TD.UP1>
	<MOVE	E* TD.GET 1>
	<ADD	E* (P)>
	<MOVE	E* (E)>		; "POINTER TO VECTOR IN E"
	<MOVEM	D* -6(P)>	; "SAVE ELMENT #"
	<SKIPN	B* -5(P)>	; "SKIP IF RESTS EXIST"
	<SOJA	D* TD.UP3>
	<MOVEI	O* (B)>		; "BASIC LNT TO 0"
	<SUBI	O* (D)>		; "SEE IF PAST BASIC"
	<JUMPGE	O* HERE -3>	; "JUMP IF O.K."
	<MOVSS	B>		; "REP LNT TO RH*  BASIC TO LH"
	<IDIVI	O* (B)>		; "A==> -WHICH REPEATER"
	<MOVNS	A>
	<ADD	A* -5(P)>	; "PLUS BASIC"
	<ADDI	A* 1>		; "AND FUDGE"
	<MOVEM	A* -6(P)>	; "SAVE FOR PUTTER"
	<ADDI	E* -1(A)>	; "POINT"
	<SOJA	D* HERE 2>

TD.UP3	<ADDI	E* (D)>		; "POINT TO SLOT"
	<XCT	(E)>		; "GET THIS ELEMENT INTO A AND B"
	<JFCL>
	<MOVEM	A* -3(P)>	; "SAVE TYPE FOR LATER PUT"
	<MOVEM	B* -2(P)>
	<MOVE	O* -8(P)>
	<MOVE	A* -7(P)>	; "GET INS"
	<MOVEI	D* -3(P)>	; "POINTER TO HOME"
	<GETYP	C* (D)>
	<LSH	C* 1>		; "CODE TO GET SAT IN C"
	<ADD	C* TYPVEC 1>
	<HRRZ	C* (C)>
	<CAIN	C* 1>		; "ONE SAYS PRIMTYPE WORD"
	<JRST	TD.UP4>	
	<ADDI	D* 1>		; "ONLY UPDATE STRUCTURES"
	<SKIPE	(D)>		; "DONT DIE WITH EMPTY FROBNITZES"
	<XCT	A>		; "AND DO IT"
TD.UP4	<MOVE	C* -4(P)>	; "GET POINTER FOR UPDATE OF ELEMENT"
	<MOVE	E* TD.PUT 1>
	<SOS	D* -1(P)>	; "RESTORE COUNT"
	<ADD	E* (P)>
	<MOVE	E* (E)>		; "POINTER TO VECTOR IN E"
	<MOVE	B* -6(P)>	; "SAVED OFFSET"
	<ADDI	E* (B)-1>	; "POINT TO SLOT"
	<MOVE	A* -3(P)>	; "RESTORE TYPE WORD"
	<MOVE	B* -2(P)>
	<XCT	(E)>		; "SMASH IT BACK"
	<ERRUUO* <MQUOTE TEMPLATE-LOSSAGE!-ERRORS>>
TD.WIN	<MOVE	C* -4(P)>
	<JRST	TD.UP2>

TD.UP1	<SUB	P* [<(7) 7>]>
	<POP	P* A>
	<POP	P* O>
	<POP	P* E>
	<JRST	VHACK2>

CHOMP	<DPUSH	TP* <PQUOTE VECTOR-LOSSAGE>>
	<DPUSH	TP* <PQUOTE LFIXUP>>
	<MCALL	2 ERROR>
	<*VALUE>

<TITLE GET-LIST>
	<DECLARE ("VALUE" LIST WORD)>
	<DPUSH	TP* (AB)>
	<PUSHJ	P* GETL1>
	<JRST	FINIS>

<INTERNAL-ENTRY GETL1 1>
	<SUBM	M* (P)>
	<MOVE	A* <TYPE-WORD LIST>>
	<MOVE	B* (TP)>
	<SUB	TP* [<2 (2)>]>
	<JRST	MPOPJ>