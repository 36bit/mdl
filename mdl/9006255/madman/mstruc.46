;"(c) Copyright 1978 Massachusetts Institute of Technology.  All Rights Reserved."

%%<PROG (C)
	<CRLF ,OUTCHAN>
	<PRINC "Is this assembly for Tenex? ">
	<COND (<MEMQ <TYI ,INCHAN> "YyTt">
	       <SETG 10X T>)
	      (<SETG 10X <>>)>
	<CRLF ,OUTCHAN>
	<AND ,10X <USE "JSYS"> <CRLF ,OUTCHAN>>>

%%<DEFINE IFN10X (10X ITS) <COND (,10X .10X) (.ITS)>>

<BLOCK (<ROOT>)>

TABLOCK

<ENDBLOCK>

; "FUNCTIONS FOR DOING LIST, VECTOR, UVECTOR, STRING CREATION FOR ALLOC"

<TITLE ACONS>
	<DECLARE ("VALUE" <OR LIST FALSE> SPACE ANY LIST)>
	<IFN10X #SPLICE ()
		#SPLICE (<PSEUDO <SETG SLFEEP #OPCODE *042000000003*>>)>
	<PUSH	TP* (AB)>
	<AOBJN	AB* HERE -1>
	<PUSHJ	P* ACONS0>
	<JRST	FINIS>
	
<INTERNAL-ENTRY ACONS0 3>
	<SUBM	M* (P)>
	<PUSH	P* [-1]>
	<MOVE	B* -4(TP)>
	<JRST	ACONS2>

<SUB-ENTRY ALCONS ("VALUE" <OR LIST FALSE> ANY LIST)>
	<PUSH	TP* (AB)>
	<AOBJN	AB* HERE -1>
	<PUSHJ	P* ALCONS1>
	<JRST	FINIS>

<INTERNAL-ENTRY ALCONS1 2>
	<SUBM	M* (P)>
	<PUSH	P* [0]>
	<MOVE	B* <MQUOTE CURSPACE>>
	<PUSHJ	P* CILVAL>
ACONS2	<MOVE	O* B>		; "SAVE SPACE IN O"
	<PUSH	TP* <TYPE-WORD SPACE>>
	<PUSH	TP* O>
	<PUSHJ	P* ACELL>
	<SUB	TP* [<2 (2)>]>	; "FLUSH THE ARGUMENT TO ACELL"
	<MOVE	C* A>
	<MOVE	B* -3(TP)>
	<MOVEM	B* -2(A)>
	<MOVE	B* -2(TP)>
	<MOVEM	B* -1(A)>	; "LOAD THE ARGUMENTS"
	<GETYP	B* -2(A)>
	<LSH	B* 1>
	<ADD	B* TYPVEC 1>
	<HRRZ	B* (B)>
	<ANDI	B* *777*>
	<CAIE	B* *14*>
	<CAIN	B* *20*>
	<PUSHJ	P* CONSHAK>
	<MOVEI	E* -2(C)>
	<MOVE	B* E>
	<MOVE	A* (TP)>
	<HRRM	A* (B)>
	<MOVE	A* <TYPE-WORD LIST>>
	<POP	P* C>
	<SUB	TP* [<(4) 4>]>
	<SKIPE	C>
	 <SUB	TP* [<(2) 2>]>
	<JRST	MPOPJ>

CONSHAK	<SUBM	M* (P)>
	<PUSH	P* D>
	<PUSH	P* A>
	<PUSH	TP* <TYPE-WORD SPACE>>
	<PUSH	TP* O>
	<PUSHJ	P* ACELL>	; "ASK FOR TWO WORDS"
	<SUB	TP* [<2 (2)>]>
	<MOVE	C* A>
	<POP	P* A>
	<POP	P* D>
	<HRLZI	B* *000022*>
	<HLLM	B* -2(C)>
	<SUBI	A* 2>
	<MOVEM	A* -1(C)>
	<ADDI	A* 2>
	<JRST	MPOPJ>

; "LIST HACKERS"

<SUB-ENTRY AILIST ("VALUE" <OR LIST FALSE> SPACE FIX "OPTIONAL" ANY)>
	<DPUSH	TP* (AB)>
	<DPUSH	TP* 2(AB)>
	<ADD	AB* [<4 (4)>]>
	<JUMPG	AB* TOOARG>
	<DPUSH	TP* (AB)>
	<PUSHJ	P* AILIST2>
	<JRST	FINIS>

TOOARG	<PUSHJ	P* AILIST1>
	<JRST	FINIS>

<INTERNAL-ENTRY AILIST2 3>
	<SUBM	M* (P)>
AFOO	<PUSH	TP* -5(TP)>
	<PUSH	TP* -5(TP)>
	<MOVE	B* (TP)>
	<PUSH	P* [-1]>
	<JRST	AILST2>

<INTERNAL-ENTRY AILIST1 2>
	<SUBM	M* (P)>
	<PUSH	TP* [0]>
	<PUSH	TP* [0]>
	<JRST	AFOO>

<SUB-ENTRY ALILIST ("VALUE" <OR LIST FALSE> FIX "OPTIONAL" ANY)>
	<DPUSH	TP* (AB)>
	<AOBJN	AB* HERE 1>
	<AOBJP	AB* ONEARG>
TWOARG	<DPUSH	TP* (AB)>
	<PUSHJ	P* ALILIST2>
	<JRST	FINIS>
ONEARG	<PUSHJ	P* ALILIST1>
	<JRST	FINIS>

<INTERNAL-ENTRY ALILIST2 2>
	<SUBM	M* (P)>
	<JRST	AILST1>

<INTERNAL-ENTRY ALILIST1 1>
	<SUBM	M* (P)>
	<PUSH	TP* [0]>
	<PUSH	TP* [0]>
AILST1	<MOVE	B* <MQUOTE CURSPACE>>
	<PUSHJ	P* CILVAL>
	<PUSH	P* [0]>
	<PUSH	TP* A>
	<PUSH	TP* B>
AILST2	<SOS	D* -4(TP)>	; "LENGTH OF LIST"
	<JUMPL	D* ZEROL>	; "ZERO LENGTH"
	<MOVE	E* -3(TP)>
	<MOVE	O* -2(TP)>
	<PUSH	P* D>
	<PUSH	P* E>
AILOOP	<PUSH	P* E>
	<PUSHJ	P* ACELL>
	<POP	P* E>
	<MOVE	C* A>
	<MOVEM	O* -1(A)>
	<MOVE	B* (P)>
	<MOVEM	B* -2(A)>
	<GETYP	B* B>
	<LSH	B* 1>
	<ADD	B* TYPVEC 1>
	<HRRZ	B* (B)>
	<ANDI	B* *777*>
	<CAIE	B* *14*>
	<CAIN	B* *20*>
	<JRST	[<EXCH O* (TP)>
		 <PUSHJ	P* STRHACK>
		 <EXCH O* (TP)>
		 <JRST AILOOP1>]>
AILOOP1	<MOVE	D* -4(TP)>
	<CAME	D* -1(P)>
	 <HRRM	E* -2(C)>
	<MOVEI	E* -2(C)>
	<SOS	-4(TP)>
	<SOJGE	D* AILOOP>
	<MOVE	B* E>
	<SUB	P* [<2 (2)>]>
	<SKIPA>
ZEROL	<SETZ	B*>
	<MOVE	A* <TYPE-WORD LIST>>
	<POP	P* C>
	<SKIPE	C>
	<SUB	TP* [<2 (2)>]>
	<SUB	TP* [<6 (6)>]>
	<JRST	MPOPJ>

; "FUNCTIONS FOR DOING LIST, VECTOR, UVECTOR, STRING CREATION FOR ALLOC"

<SUB-ENTRY ALIST ("VALUE" <OR LIST FALSE> SPACE "TUPLE" TUPLE)>
	<HLRE	A* AB>
	<MOVNS  A>
	<ASH	A* -1>
	<JUMPGE AB* LZORK1>
LZORK	<PUSH	TP* (AB)>
	<INTGO>
	<AOBJN	AB* LZORK>
LZORK1	<PUSHJ	P* ALIST0>
	<JRST	FINIS>
	
<INTERNAL-ENTRY ALIST0 -1>
	<SUBM	M* (P)>
	<MOVE	B* TP>
	<SOJ	A*>
	<PUSH	P* [-1]>
	<PUSH	P* A>
	<ASH	A* 1>
	<SUB	B* A>
	<MOVE	A* -1(B)>
	<MOVE	B* (B)>
	<JRST	ALIST2>

<SUB-ENTRY ALLIST ("VALUE" <OR LIST FALSE> "TUPLE" TUPLE)>
	<HLRE	A* AB>
	<MOVNS  A>
	<ASH	A* -1>
	<JUMPGE AB* LLZORK1>
LLZORK	<PUSH	TP* (AB)>
	<INTGO>
	<AOBJN	AB* LLZORK>
LLZORK1	<PUSHJ	P* ALIST1>
	<JRST	FINIS>

<INTERNAL-ENTRY ALIST1 -1>
	<SUBM	M* (P)>
	<PUSH	P* [0]>
	<PUSH	P* A>
	<MOVE	B* <MQUOTE CURSPACE>>
	<PUSHJ	P* CILVAL>
ALIST2	<MOVE	O* B>		; "SAVE SPACE IN O"
	<SOS	D* (P)>
	<JUMPL	D* NOARG>
	<MOVEI	E* 0>	;"MSB, 2/5/76, TO FLUSH GARBAGE FROM LAST ELEMENT OF LIST
				ALSO REMOVAL OF THE <CAME D* (P)> BELOW"
LLOOP	<PUSH	TP* <TYPE-WORD SPACE>>
	<PUSH	TP* O>
	<PUSH	P* E>
	<PUSHJ	P* ACELL>
	<POP	P* E>
	<SUB	TP* [<2 (2)>]>
	<MOVE	C* A>
	<POP	TP* -1(A)>	; "LOAD THE ARGUMENTS"
	<POP	TP* -2(A)>
	<GETYP	B* -2(A)>
	<LSH	B* 1>
	<ADD	B* TYPVEC 1>
	<HRRZ	B* (B)>
	<ANDI	B* *777*>
	<CAIE	B* *14*>
	<CAIN	B* *20*>
	<PUSHJ	P* STRHACK>
;	<CAME	D* (P)>
	<HRRM	E* -2(C)>
	<MOVEI	E* -2(C)>
LLOOP1	<SOSL	(P)>
	 <JRST	LLOOP>
	<SKIPA	B* E>
NOARG	<SETZ	B*>
	<MOVE	A* <TYPE-WORD LIST>>
	<SUB	P* [<(1) 1>]>
	<POP	P* C>
	<SKIPE	C>
	<SUB	TP* [<(2) 2>]>
	<JRST	MPOPJ>

STRHACK	<SUBM	M* (P)>
	<PUSH	P* E>
	<PUSH	P* D>
	<PUSH	P* A>
	<PUSH	TP* <TYPE-WORD SPACE>>
	<PUSH	TP* O>
	<PUSHJ	P* ACELL>	; "ASK FOR TWO WORDS"
	<SUB	TP* [<2 (2)>]>
	<MOVE	C* A>
	<POP	P* A>
	<POP	P* D>
	<POP	P* E>
	<HRLZI	B* *000022*>
	<HLLM	B* -2(C)>
	<SUBI	A* 2>
	<MOVEM	A* -1(C)>
	<ADDI	A* 2>
	<JRST	MPOPJ>

<SUB-ENTRY AIVECTOR ("VALUE" <OR VECTOR FALSE> SPACE FIX "OPTIONAL" ANY)>
	<DPUSH	TP* (AB)>
	<DPUSH	TP* 2(AB)>
	<ADD	AB* [<4 (4)>]>
	<JUMPG	AB* TWOARG1>
	<DPUSH	TP* (AB)>
	<PUSHJ	P* AIVECTOR3>
	<JRST	FINIS>
TWOARG1	<PUSHJ	P* AIVECTOR2>
	<JRST	FINIS>

<INTERNAL-ENTRY AIVECTOR3 3>
	<SUBM	M* (P)>
	<JRST	AIVECT2>

<INTERNAL-ENTRY AIVECTOR2 2>
	<SUBM	M* (P)>
	<PUSH	TP* <TYPE-WORD UNBOUND>>
	<PUSH	TP* [-1]>
AIVECT2	<PUSH	P* [-1]>
	<PUSH	TP* -5(TP)>
	<PUSH	TP* -5(TP)>
	<MOVE	B* (TP)>
	<JRST	AIVEC2>

<SUB-ENTRY ALIVECTOR ("VALUE" <OR VECTOR FALSE> FIX "OPTIONAL" ANY)>
	<DPUSH	TP* (AB)>
	<AOBJN	AB* HERE 1>
	<AOBJP	AB* ONEARG1>
	<DPUSH	TP* (AB)>
	<PUSHJ	P* ALIVECTOR2>
	<JRST	FINIS>
ONEARG1	<PUSHJ	P* ALIVECTOR1>
	<JRST	FINIS>

<INTERNAL-ENTRY ALIVECTOR2 2>
	<SUBM	M* (P)>
	<JRST	ALIOOP1>

<INTERNAL-ENTRY ALIVECTOR1 1>
	<SUBM	M* (P)>
	<PUSH	TP* <TYPE-WORD UNBOUND>> ;"THIS WASN'T REALLY -1 BEFORE, WAS IT???"
	<PUSH	TP* [-1]>
ALIOOP1	<MOVE	B* <MQUOTE CURSPACE>>	;"GET THE SPACE"
	<PUSHJ	P* CILVAL>
	<PUSH	P* [0]>
	<PUSH	TP* A>
	<PUSH	TP* B>
AIVEC2	<MOVE	D* -4(TP)>	;"LENGTH OF VECTOR"
	<IMULI	D* 2>
	<PUSH	P* D>
	<ADDI	D* 2>
	<PUSHJ	P* ABLOCK>
	<MOVE	B* A>
	<MOVSS	D>
	<HRRI	D* -1(B)>
	<MOVEM	D* -1(B)>	;"2ND DOPE WORD"
	<MOVE	D* [<(*440000*)>]>
	<MOVEM	D* -2(B)>
	<POP	P* D>
	<PUSH	P* B>
	<SUBI	B* 2(D)>
	<GETYP	E* -3(TP)>
	<CAIE	E* <TYPE-CODE UNBOUND>>
	 <JRST	FILLIN1>
FILEND1	<POP	P* E>
	<MOVNS	D>
	<HRL	B* D>
	<MOVE	A* <TYPE-WORD VECTOR>>
	<POP	P* C>
	<SKIPE	C>
	<SUB	TP* [<2 (2)>]>
	<SUB	TP* [<6 (6)>]>
	<JRST	MPOPJ>

FILLIN1	<MOVE	O* -3(TP)>
	<MOVE	A* -2(TP)>
	<MOVE	C* (P)>
	<MOVE	E* B>
FILOOP1	<CAIL	E* -2(C)>
	<JRST	FILEND1>
	<MOVEM	O* (E)>
	<MOVEM	A* 1(E)>
	<ADDI	E* 2>
	<JRST	FILOOP1>



; "UVECTOR HACKERS"

<SUB-ENTRY AIUVECTOR ("VALUE" <OR UVECTOR FALSE> SPACE FIX "OPTIONAL" ANY)>
	<DPUSH	TP* (AB)>
	<DPUSH	TP* 2(AB)>
	<ADD	AB* [<4 (4)>]>
	<JUMPG	AB* TWOARG2>
	<DPUSH	TP* (AB)>
	<PUSHJ	P* AIUVECTOR3>
	<JRST	FINIS>
TWOARG2	<PUSHJ	P* AIUVECTOR2>
	<JRST	FINIS>

<INTERNAL-ENTRY AIUVECTOR3 3>
	<SUBM	M* (P)>
	<JRST	AIUVC2>

<INTERNAL-ENTRY AIUVECTOR2 2>
	<SUBM	M* (P)>
	<PUSH	TP* <TYPE-WORD UNBOUND>>
	<PUSH	TP* [-1]>
AIUVC2	<PUSH	P* [-1]>
	<PUSH	TP* -5(TP)>
	<PUSH	TP* -5(TP)>
	<MOVE	B* (TP)>
	<JRST	AIUVEC2>

<SUB-ENTRY ALIUVECTOR ("VALUE" <OR UVECTOR FALSE> FIX "OPTIONAL" ANY)>
	<DPUSH	TP* (AB)>
	<AOBJN	AB* HERE 1>
	<AOBJP	AB* ONEARG2>
	<DPUSH	TP* (AB)>
	<PUSHJ	P* ALIUVECTOR2>
	<JRST	FINIS>
ONEARG2	<PUSHJ	P* ALIUVECTOR1>
	<JRST	FINIS>

<INTERNAL-ENTRY ALIUVECTOR2 2>
	<SUBM	M* (P)>
	<JRST	ALIOOP2>

<INTERNAL-ENTRY ALIUVECTOR1 1>
	<SUBM	M* (P)>
	<PUSH	TP* <TYPE-WORD UNBOUND>>
	<PUSH	TP* [-1]>
ALIOOP2	<PUSH	P* [0]>
	<MOVE	B* <MQUOTE CURSPACE>>
	<PUSHJ	P* CILVAL>>
	<PUSH	TP* A>
	<PUSH	TP* B>
AIUVEC2	<MOVE	D* -4(TP)>	;"LENGTH OF VECTOR"
	<PUSH	P* D>
	<ADDI	D* 2>
	<PUSHJ	P* ABLOCK>
	<MOVE	B* A>
	<MOVSS	D>
	<HRRI	D* -1(B)>
	<MOVEM	D* -1(B)>	;"2ND DOPE WORD"
	<MOVE	D* [<(*40000*)>]>
	<MOVEM	D* -2(B)>
	<POP	P* D>
	<PUSH	P* B>
	<SUBI	B* 2(D)>
	<GETYP	E* -3(TP)>
	<CAIE	E* <TYPE-CODE UNBOUND>>
	 <JRST	FILLIN2>
FILEND2	<POP	P* E>
	<MOVNS	D>
	<HRL	B* D>
	<MOVE	A* <TYPE-WORD UVECTOR>>
	<POP	P* C>
	<SKIPE	C>
	<SUB	TP* [<2 (2)>]>
	<SUB	TP* [<6 (6)>]>
	<JRST	MPOPJ>
	
FILLIN2	<MOVE	A* -2(TP)>
	<MOVE	C* (P)>
	<MOVE	E* B>
FILOOP2	<CAIL	E* -2(C)>
	<JRST	FILEND0>
	<MOVEM	A* (E)>
	<AOJA	E* FILOOP2>
FILEND0	<GETYP	A* -3(TP)>
	<PUTYP	A* (E)>
	<JRST	FILEND2>

; "BYTE-STRINGS"

<SUB-ENTRY ABYTES ("VALUE" <OR BYTES FALSE> SPACE FIX "TUPLE" TUPLE)>
	<HLRE	A* AB>
	<MOVNS  A>
	<ASH	A* -1>
	<JUMPGE AB* BZORK1>
BZORK	<PUSH	TP* (AB)>
	<INTGO>
	<AOBJN	AB* BZORK>
BZORK1	<PUSHJ	P* ABSTR>
	<JRST	FINIS>

<INTERNAL-ENTRY ABSTR -1>
	<SUBM	M* (P)>
	<MOVE	B* TP>
	<SUBI	A* 2>
	<PUSH	P* [-1]>
	<PUSH	P* [0]>
	<PUSH	P* A>
	<ASH	A* 1>
	<SUB	B* A>
	<MOVE	C* (B)>
	<MOVEM	C* -1(P)>
	<MOVE	A* -3(B)>
	<MOVE	B* -2(B)>
	<JRST	ABSTR2>

<SUB-ENTRY ALBYTES ("VALUE" <OR BYTES FALSE> FIX "TUPLE" TUPLE)>
	<HLRE	A* AB>
	<MOVNS  A>
	<ASH	A* -1>
	<JUMPGE AB* BLZORK1>
BLZORK	<PUSH	TP* (AB)>
	<INTGO>
	<AOBJN	AB* BLZORK>
BLZORK1	<PUSHJ	P* ABSTR1>
	<JRST	FINIS>

<INTERNAL-ENTRY ABSTR1 -1>
	<SUBM	M* (P)>
	<PUSH	P* [0]>
	<PUSH	P* [0]>
	<SOJ	A*>
	<PUSH	P* A>
	<MOVE	B* <MQUOTE CURSPACE>>
	<PUSHJ	P* CILVAL>
ABSTR2	<PUSH	TP* A>
	<PUSH	TP* B>
	<MOVE	E* (P)>
	<ADDI	E* 1>
	<ASH	E* 1>
	<HRL	E* E>
	<SUB	TP* E>		; "GO TO TOP OF STACK"
	<MOVE	E* (TP)>
	<SKIPN	-1(P)>
	<MOVEM	E* -1(P)>
	<PUSH	P* [0]>		; "FOR CHARACTER TOTAL"
	<HRLZ	E* -1(P)>	; "ARGUMENTS ==> AOBJN"
	<MOVNS	E>
	<JUMPE	E* EBLOOP1>
BLOOP1	<ADD	TP* [<2 (2)>]>	; "LOOP COUNTING CHARACTERS"
	<GETYP	D* -1(TP)>
	<LSH	D* 1>
	<ADD	D* TYPVEC 1>
	<HRRZ	D* (D)>
	<ANDI	D* *777*>
	<CAIN	D* 1>
	<JRST	[<AOS	(P)>	; "AOS CHAR COUNT"
		 <JRST	EBLOOP1>]>
	<GETYP	D* -1(TP)>
	<CAIE	D* <TYPE-CODE BYTES>>
	<ERRUUO* <MQUOTE ARG-WRONG-TYPE!-ERRORS>>
	<HRRZ	O* -1(TP)>	; "ADD STRINGS CHARACTER COUNT"
	<ADDM	O* (P)>
EBLOOP1	<AOBJN	E* BLOOP1>
	<MOVEI	D* 36>
	<IDIV	D* -2(P)>	; "GET BYTES/WORD"
	<MOVE	D>		; "AND PUT IN O"
	<MOVE	D* (P)>
	<IDIV	D*>		; "CALCULATE WORDS NEEDED"
	<SKIPE	E>
	<AOJ	D*>		; "LENGTH IN WORDS + DOPE WORDS"
	<ADDI	D* 2>
	<PUSH	P* D>		; "SAVE"
	<ADD	TP* [<2 (2)>]>
	<PUSHJ	P* ABLOCK>
	<SUB	TP* [<2 (2)>]>
	<MOVSS	D>
	<HRRI	D* -1(A)>
	<MOVEM	D* -1(A)>	; "2ND DOPE WORD"
	<MOVE	D* [<(*40003*)>]>
	<MOVEM	D* -2(A)>	; "1ST DOPE WORD"
	<SUBB	A* (P)>		; "SAVE TOP WORD IN STRING"
	<MOVE	E* -2(P)>
	<LSH	E* 1>
	<HRL	E* E>
	<SUB	TP* E>
	<HRLI	A* *440700*>
	<MOVE	E* -3(P)>
	<CAILE	E* 36>
	<ERRUUO* <MQUOTE OUT-OF-BOUNDS!-ERRORS>>
	<SKIPGE	E>
	<ERRUUO* <MQUOTE NEGATIVE-ARGUMENT!-ERRORS>>
	<DPB	E* [<(*300600*) A>]>
	<HRLZ	E* -2(P)>	; "RESTORE AOBJN POINTER FOR LOOP"
	<MOVNS	E>
BLOOP2	<ADD	TP* [<2 (2)>]>	; "LOOP THROUGH ARGS ADDING CHARACTERS"
	<GETYP	D* -1(TP)>
	<LSH	D* 1>
	<ADD	D* TYPVEC 1>
	<HRRZ	D* (D)>
	<ANDI	D* *777*>
	<CAIE	D* 1>
	<JRST	BINS>
	<MOVE	D* (TP)>
	<IDPB	D* A>		; "CHARACTER -- IDPB"
EBLOOP2	<AOBJN	E* BLOOP2>
	<MOVE	B* (P)>		; "TOP WORD USED IN STRING"
	<MOVE	A* -1(P)>	; "CHARACTER COUNT"
	<HRLI	A* <TYPE-CODE BYTES>>
	<MOVE	C* -2(P)>	; "RESTORE TP AGAIN"
	<LSH	C* 1>
	<HRL	C* C>
	<SUB	TP* C>
	<SUB	P* [<3 (3)>]>	; "BLESS P STACK"
	<HRLI	B* *10700*>	; "CONSTRUCT BYTE POINTER"
	<POP	P* C>
	<DPB	C* [<(*300600*) B>]>
	<SOJ	B*>		; "SUBTRACT ONE"
	<POP	P* C>
	<SUB	TP* [<2 (2)>]>
	<SKIPE	C>
	<SUB	TP* [<2 (2)>]>	; "MUST POP F***ING SPACE ARGUMENT"
	<JRST	MPOPJ>
	
BINS	<HRLZ	O* -1(TP)>	; "GET CHARACTER COUNT"
	<JUMPE	O* EBLOOP2>	; "FLUSH EMPTY STRING"
	<MOVNS	O>
	<MOVE	D* (TP)>	; "BYTE POINTER TO STRING"
ABLOOP	<ILDB	B* D>		; "TRANSFER"
	<IDPB	B* A>
	<AOBJN	O* ABLOOP>
	<JRST	EBLOOP2>

<SUB-ENTRY AIBYTES ("VALUE" <OR BYTES FALSE> SPACE FIX FIX "OPTIONAL" <PRIMTYPE WORD>)>
	<DPUSH	TP* (AB)>
	<DPUSH	TP* 2(AB)>
	<DPUSH	TP* 4(AB)>
	<ADD	AB* [<5 (5)>]>
	<AOBJP	AB* AIB3>
	<DPUSH	TP* (AB)>
	<PUSHJ	P* AIBYTES4>
	<JRST	FINIS>
AIB3	<PUSHJ	P* AIBYTES3>
	<JRST	FINIS>

<INTERNAL-ENTRY AIBYTES4 4>
	<SUBM	M* (P)>
	<JRST	ABYTR2>

<INTERNAL-ENTRY AIBYTES3 3>
	<SUBM	M* (P)>
	<PUSH	TP* <TYPE-WORD BITS>>
	<PUSH	TP* [0]>
ABYTR2	<PUSH	TP* -7(TP)>
	<PUSH	TP* -7(TP)>
	<MOVE	B* (TP)>
	<PUSH	P* [-1]>
	<JRST	AIBYT2>

<SUB-ENTRY ALIBYTES ("VALUE" <OR BYTES FALSE> FIX FIX "OPTIONAL" <PRIMTYPE WORD>)>
	<DPUSH	TP* (AB)>
	<DPUSH	TP* 2(AB)>
	<ADD	AB* [<3 (3)>]>
	<AOBJP	AB* ALIB1>
	<DPUSH	TP* (AB)>
	<PUSHJ	P* ALIBYTES3>
	<JRST	FINIS>
ALIB1	<PUSHJ	P* ALIBYTES2>
	<JRST	FINIS>

<INTERNAL-ENTRY ALIBYTES3 3>
	<SUBM	M* (P)>
	<JRST	ALIBT2>
	
<INTERNAL-ENTRY ALIBYTES2 2>
	<SUBM	M* (P)>
	<PUSH	TP* <TYPE-WORD BITS>>
	<PUSH	TP* [0]>
ALIBT2	<MOVE	B* <MQUOTE CURSPACE>>
	<PUSHJ	P* CILVAL>
	<PUSH	P* [0]>
	<PUSH	TP* A>
	<PUSH	TP* B>
AIBYT2	<MOVE	E* -6(TP)>
	<PUSHJ	P* AIBS>
	<POP	P* C>
	<SKIPE	C>
	<SUB	TP* [<2 (2)>]>
	<SUB	TP* [<8 (8)>]>
	<JRST	MPOPJ>	

AIBS	<SUBM	M* (P)>
	<MOVE	D* -4(TP)>
	<PUSH	P* D>
	<PUSH	P* E>
	<MOVEI	36>
	<IDIV	E>
	<IDIV	D*>
	<SKIPE	E>
	<AOJ	D*>
	<ADDI	D* 2>
	<PUSHJ	P* ABLOCK>
	<POP	P* E>
	<MOVE	B* A>
	<PUSH	P* D>
	<MOVSS	D>
	<HRRI	D* -1(B)>
	<MOVEM	D* -1(B)>
	<MOVE	D* [<(*40003*)>]>
	<MOVEM	D* -2(B)>
	<SUB	B* (P)>
	<MOVE	A* -1(P)>
	<HRLI	A* <TYPE-CODE BYTES>>
	<SOJ	B*>
	<HRLI	B* *10700*>
	<CAILE	E* 36>
	<ERRUUO* <MQUOTE OUT-OF-BOUNDS!-ERRORS>>
	<SKIPGE	E>
	<ERRUUO* <MQUOTE NEGATIVE-ARGUMENT!-ERRORS>>
	<DPB	E* [<(*300600*) B>]>
	<GETYP	C* -3(TP)>
	<CAIE	C* <TYPE-CODE BITS>>
	 <CAIN	C* <TYPE-CODE UNBOUND>>
	  <JRST	AIBSND>
	<JRST	AIBSIN>
AIBSND	<SUB	P* [<2 (2)>]>
	<JRST	MPOPJ>

AIBSIN	<MOVE	C* -1(P)>
	<JUMPE	C* AIBSND>
	<MOVE	D* B>
	<MOVE	E* -2(TP)>
	<IDPB	E* D>
	<SOJG	C* HERE -1>
	<JRST	AIBSND>

<SUB-ENTRY AISTRING ("VALUE" <OR STRING FALSE> SPACE FIX "OPTIONAL" CHARACTER)>
	<DPUSH	TP* (AB)>
	<DPUSH	TP* 2(AB)>
	<ADD	AB* [<4 (4)>]>
	<JUMPG	AB* TWOARG3>
	<DPUSH	TP* (AB)>
	<PUSHJ	P* AISTRING3>
	<JRST	FINIS>
TWOARG3	<PUSHJ	P* AISTRING2>
	<JRST	FINIS>

<INTERNAL-ENTRY AISTRING3 3>
	<SUBM	M* (P)>
	<JRST	AISTRI2>

<INTERNAL-ENTRY AISTRING2 2>
	<SUBM	M* (P)>
	<PUSH	TP* <TYPE-WORD UNBOUND>>
	<PUSH	TP* [-1]>
AISTRI2	<PUSH	TP* -5(TP)>
	<PUSH	TP* -5(TP)>
	<MOVE	B* (TP)>
	<PUSH	P* [-1]>
	<JRST	AISTR2>

<SUB-ENTRY ALISTRING ("VALUE" <OR STRING FALSE> FIX "OPTIONAL" CHARACTER)>
	<DPUSH	TP* (AB)>
	<AOBJN	AB* HERE 1>
	<AOBJP	AB* ONEARG3>
	<DPUSH	TP* (AB)>
	<PUSHJ	P* ALISTRING2>
	<JRST	FINIS>
ONEARG3	<PUSHJ	P* ALISTRING1>
	<JRST	FINIS>

<INTERNAL-ENTRY ALISTRING2 2>
	<SUBM	M* (P)>
	<JRST	ALIOOP3>

<INTERNAL-ENTRY ALISTRING1 1>
	<SUBM	M* (P)>
	<PUSH	TP* <TYPE-WORD UNBOUND>>
	<PUSH	TP* [-1]>
ALIOOP3	<MOVE	B* <MQUOTE CURSPACE>>
	<PUSHJ	P* CILVAL>
	<PUSH	P* [0]>
	<PUSH	TP* A>
	<PUSH	TP* B>
AISTR2	<MOVEI	E* 7>			; "BYTE LENGTH"
	<PUSHJ	P* AIBS>
	<POP	P* C>
	<SKIPE	C>
	<SUB	TP* [<2 (2)>]>
	<SUB	TP* [<6 (6)>]>
	<HRLI	A* <TYPE-CODE STRING>>
	<JRST	MPOPJ>

; "VECTORS"

<SUB-ENTRY AVECTOR ("VALUE" <OR VECTOR FALSE> SPACE "TUPLE" TUPLE)>
	<HLRE	A* AB>
	<MOVNS	A>
	<ASH	A* -1>
	<JUMPGE	AB* VZORK1>
VZORK	<PUSH	TP* (AB)>
	<INTGO>
	<AOBJN	AB* VZORK>
VZORK1	<PUSHJ	P* AVEC>
	<JRST	FINIS>

<INTERNAL-ENTRY AVEC -1>
	<SUBM	M* (P)>
	<MOVE	B* TP>
	<ASH	A* 1>
	<SUBI	A* 2>
	<PUSH	P* [-1]>
	<PUSH	P* A>
	<SUB	B* A>
	<MOVE	A* -1(B)>
	<MOVE	B* (B)>
	<JRST	AVEC2>	

<SUB-ENTRY ALVECTOR ("VALUE" <OR VECTOR FALSE> "TUPLE" TUPLE)>
	<HLRE	A* AB>
	<MOVNS  A>
	<ASH	A* -1>
	<JUMPGE AB* VLZORK1>
VLZORK	<PUSH	TP* (AB)>
	<INTGO>
	<AOBJN	AB* VLZORK>
VLZORK1	<PUSHJ	P* AVEC1>
	<JRST	FINIS>

<INTERNAL-ENTRY AVEC1 -1>
	<SUBM	M* (P)>
	<ASH	A* 1>
	<PUSH	P* [0]>
	<PUSH	P* A>
	<MOVE	B* <MQUOTE CURSPACE>>
	<PUSHJ	P* CILVAL>
AVEC2	<PUSH	TP* A>		;"SAVE THE SPACE VECTOR"
	<PUSH	TP* B>
	<MOVE	D* (P)>
	<ADDI	D* 2>		;"NUMBER OF WORDS IN VECTOR"
	<PUSHJ	P* ABLOCK>
	<SUB	TP* [<2 (2)>]>
	<MOVSS	D>
	<HRRI	D* -1(A)>
	<MOVEM	D* -1(A)>	;"2ND DOPE WORD"
	<MOVE	D* [<(*440000*)>]>
	<MOVEM	D* -2(A)>
	<POP	P* D>
	<MOVE	E* D>
	<SUBI	A* 2>
	<JUMPE	D* VLOOP1>
VLOOP	<SUBI	A* 1>
	<POP	TP* (A)>
	<SOJG	D* VLOOP>
VLOOP1	<MOVNS	E>
	<HRRZ	B* A>
	<HRL	B* E>
	<MOVE	A* <TYPE-WORD VECTOR>>
	<POP	P* C>
	<SKIPE	C>
	<SUB	TP* [<(2) 2>]>
	<JRST	MPOPJ>

			
; "UVECTORS"

<SUB-ENTRY AUVECTOR ("VALUE" <OR UVECTOR FALSE> SPACE "TUPLE" TUPLE)>
	<HLRE	A* AB>
	<MOVNS  A>
	<ASH	A* -1>
	<JUMPGE AB* UZORK1>
UZORK	<PUSH	TP* (AB)>
	<INTGO>
	<AOBJN	AB* UZORK>
UZORK1	<PUSHJ	P* AUVEC>
	<JRST	FINIS>

<INTERNAL-ENTRY AUVEC -1>
	<SUBM	M* (P)>
	<SOJ	A*>
	<PUSH	P* [-1]>
	<PUSH	P* A>
	<ASH	A* 1>
	<MOVE	B* TP>
	<SUB	B* A>
	<MOVE	A* -1(B)>
	<MOVE	B* (B)>
	<JRST	AUVEC2>

<SUB-ENTRY ALUVECTOR ("VALUE" <OR UVECTOR FALSE> "TUPLE" TUPLE)>
	<HLRE	A* AB>
	<MOVNS  A>
	<ASH	A* -1>
	<JUMPGE AB* ULZORK1>
ULZORK	<PUSH	TP* (AB)>
	<INTGO>
	<AOBJN	AB* ULZORK>
ULZORK1	<PUSHJ	P* AUVEC1>
	<JRST	FINIS>

<INTERNAL-ENTRY AUVEC1 -1>
	<SUBM	M* (P)>
	<PUSH	P* [0]>
	<PUSH	P* A>
	<MOVE	B* <MQUOTE CURSPACE>>
	<PUSHJ	P* CILVAL>
AUVEC2	<PUSH	TP* A>
	<PUSH	TP* B>
	<MOVE	D* (P)>
	<ADDI	D* 2>
	<PUSHJ	P* ABLOCK>
	<SUB	TP* [<2 (2)>]>
	<MOVSS	D>
	<HRRI	D* -1(A)>
	<MOVEM	D* -1(A)>	;"2ND DOPE WORD"
	<HLLZ	B* -1(TP)>
	<HLRZ	O* -1(TP)>
	<TLO	B* *40000*>
	<MOVEM	B* -2(A)>
	<SUBI	A* 2>
	<SKIPN	D* (P)>
	<JRST	[<TLZ	B* *7777*>
		 <MOVEM B* (A)>
		 <JRST  ULOOP1>]>
		;"TAA 3/28--TO MAKE EMPTY UVECTORS NOT OVERPOP TP"
		;"MARC 5/29--TO FIX LOUSY EMPTY UVECTOR HACKING"
ULOOP	<SUBI	A* 1>
	<POP	TP* (A)>
	<HLRZ	E* (TP)>
	<CAME	O* E>
	<ERRUUO* <MQUOTE TYPES-DIFFER-IN-UNIFORM-VECTOR!-ERRORS>>
	<SUB	TP* [<1 (1)>]>
	<SOJG	D* ULOOP>
ULOOP1	<POP	P* E>
	<MOVNS	E>
	<HRRZ	B* A>
	<HRL	B* E>
	<POP	P* C>
	<JUMPE	C* HERE 2>
	<SUB	TP* [<(2) 2>]>
	<MOVE	A* <TYPE-WORD UVECTOR>>
	<JRST	MPOPJ>
	

; "STRINGS"

<SUB-ENTRY ASTRING ("VALUE" <OR STRING FALSE> SPACE "TUPLE" TUPLE)>
	<HLRE	A* AB>
	<MOVNS  A>
	<ASH	A* -1>
	<JUMPGE AB* SZORK1>
SZORK	<PUSH	TP* (AB)>
	<INTGO>
	<AOBJN	AB* SZORK>
SZORK1	<PUSHJ	P* ASTR>
	<JRST	FINIS>

<INTERNAL-ENTRY ASTR -1>
	<SUBM	M* (P)>
	<MOVE	B* TP>
	<SOJ	A*>
	<PUSH	P* [-1]>
	<PUSH	P* A>
	<ASH	A* 1>
	<SUB	B* A>
	<MOVE	A* -1(B)>
	<MOVE	B* (B)>
	<JRST	ASTR2>

<SUB-ENTRY ALSTRING ("VALUE" <OR STRING FALSE> "TUPLE" TUPLE)>
	<HLRE	A* AB>
	<MOVNS  A>
	<ASH	A* -1>
	<JUMPGE AB* SLZORK1>
SLZORK	<PUSH	TP* (AB)>
	<INTGO>
	<AOBJN	AB* SLZORK>
SLZORK1	<PUSHJ	P* ASTR1>
	<JRST	FINIS>

<INTERNAL-ENTRY ASTR1 -1>
	<SUBM	M* (P)>
	<PUSH	P* [0]>
	<PUSH	P* A>
	<MOVE	B* <MQUOTE CURSPACE>>
	<PUSHJ	P* CILVAL>
ASTR2	<PUSH	TP* A>
	<PUSH	TP* B>
	<MOVE	E* (P)>
	<ADDI	E* 1>
	<ASH	E* 1>
	<HRL	E* E>
	<SUB	TP* E>		; "GO TO TOP OF STACK"
	<PUSH	P* [0]>		; "FOR CHARACTER TOTAL"
	<HRLZ	E* -1(P)>	; "ARGUMENTS ==> AOBJN"
	<MOVNS	E>
	<JUMPE	E* ESLOOP1>
SLOOP1	<ADD	TP* [<2 (2)>]>	; "LOOP COUNTING CHARACTERS"
	<GETYP	D* -1(TP)>
	<CAIN	D* <TYPE-CODE CHARACTER>>
	<JRST	[<AOS	(P)>	; "AOS CHAR COUNT"
		 <JRST	ESLOOP1>]>
	<CAIE	D* <TYPE-CODE STRING>>
	<ERRUUO* <MQUOTE NON-CHARACTER-INTO-STRING!-ERRORS>>
	<HRRZ	O* -1(TP)>	; "ADD STRINGS CHARACTER COUNT"
	<ADDM	O* (P)>
ESLOOP1	<AOBJN	E* SLOOP1>
	<MOVE	D* (P)>
	<IDIVI	D* 5>
	<SKIPE	E>
	<AOJ	D*>		; "LENGTH IN WORDS + DOPE WORDS"
	<ADDI	D* 2>
	<PUSH	P* D>		; "SAVE"
	<ADD	TP* [<2 (2)>]>
	<PUSHJ	P* ABLOCK>
	<SUB	TP* [<2 (2)>]>
	<MOVSS	D>
	<HRRI	D* -1(A)>
	<MOVEM	D* -1(A)>	; "2ND DOPE WORD"
	<MOVE	D* [<(*40003*)>]>
	<MOVEM	D* -2(A)>	; "1ST DOPE WORD"
	<SUBB	A* (P)>		; "SAVE TOP WORD IN STRING"
	<MOVE	E* -2(P)>
	<LSH	E* 1>
	<HRL	E* E>
	<SUB	TP* E>
	<HRLI	A* *440700*>
	<HRLZ	E* -2(P)>	; "RESTORE AOBJN POINTER FOR LOOP"
	<MOVNS	E>
	<JUMPE	E* ESLOOP2>
SLOOP2	<ADD	TP* [<2 (2)>]>	; "LOOP THROUGH ARGS ADDING CHARACTERS"
	<HLRZ	D* -1(TP)>
	<CAIE	D* <TYPE-CODE CHARACTER>>
	<JRST	SINS>
	<MOVE	D* (TP)>
	<IDPB	D* A>		; "CHARACTER -- IDPB"
ESLOOP2	<AOBJN	E* SLOOP2>
	<MOVE	B* (P)>		; "TOP WORD USED IN STRING"
	<MOVE	A* -1(P)>	; "CHARACTER COUNT"
	<HRLI	A* <TYPE-CODE STRING>>
	<SOJ	B*>		; "SUBTRACT ONE"
	<HRLI	B* *10700*>	; "CONSTRUCT BYTE POINTER"
	<MOVE	E* -2(P)>	; "RESTORE TP AGAIN"
	<LSH	E* 1>
	<HRL	E* E>
	<SUB	TP* E>
	<SUB	P* [<3 (3)>]>	; "BLESS P STACK"
	<POP	P* C>
	<SKIPE	C>
	<SUB	TP* [<2 (2)>]>	; "MUST POP F***ING SPACE ARGUMENT"
	<JRST	MPOPJ>
	
SINS	<HRLZ	O* -1(TP)>	; "GET CHARACTER COUNT"
	<JUMPE	O* ESLOOP2>	; "FLUSH EMPTY STRING"
	<MOVNS	O>
	<MOVE	D* (TP)>	; "BYTE POINTER TO STRING"
ASLOOP	<ILDB	B* D>		; "TRANSFER"
	<IDPB	B* A>
	<AOBJN	O* ASLOOP>
	<JRST	ESLOOP2>

; "APUT"

<SUB-ENTRY APUT ("VALUE" ANY SPACE STRUCTURED FIX ANY)>
	<DPUSH	TP* (AB)>
	<DPUSH	TP* 2(AB)>
	<DPUSH	TP* 4(AB)>
	<DPUSH	TP* 6(AB)>
	<PUSHJ	P* APUT1>
	<JRST	FINIS>

<INTERNAL-ENTRY APUT1 3>
	<SUBM	M* (P)>
	<MOVE	B* -6(TP)>
	<PUSH	P* B>
	<MOVE	B* -2(TP)>
	<JUMPLE	B* BNDERR>
	<GETYP	A* -5(TP)>
	<LSH	A* 1>
	<ADD	A* TYPVEC 1>
	<HRRZ	A* (A)>
	<ANDI	A* *777*>
	<CAIN	A* *2*>
	<JRST	PLIST>
	<CAIN	A* *5*>
	<JRST	PVECT>
	<CAIN	A* *4*>
	<JRST	PUVECT>
	<CAIN	A* *14*>
	<JRST	PBYTE>
	<CAIN	A* *20*>
	<JRST	PSTR>
	<ERRUUO* <MQUOTE NON-STRUCTURED-ARG-TO-PUT!-ERRORS>>

PVECT	<MOVE	A* -2(TP)>
	<MOVE	B* -4(TP)>
	<SUBI	A* 1>
	<ASH	A* 1>
	<HRL	A* A>
	<ADD	B* A>
	<JUMPG	B* BNDERR>
	<MOVE	A* -1(TP)>
	<MOVEM	A* (B)>
	<MOVE	A* (TP)>
	<MOVEM	A* 1(B)>
	<JRST	PUTEND>	

PSTR	<MOVE	A* -2(TP)>
	<HRRZ	B* -5(TP)>
	<CAMLE	A* B>
	<JRST	BNDERR>
	<GETYP	B* -1(TP)>
	<CAIE	B* <TYPE-CODE CHARACTER>>
	<ERRUUO* <MQUOTE CANT-PUT-NON-CHARACTER-INTO-STRING!-ERRORS>>
	<MOVE	B* -4(TP)>
	<IBP	B>
	<SOJG	A* HERE -1>
	<MOVE	A* (TP)>
	<DPB	A* B>
	<JRST	PUTEND>

PBYTE	<MOVE	A* -2(TP)>
	<HRRZ	B* -5(TP)>
	<CAMLE	A* B>
	<JRST	BNDERR>
	<GETYP	B* -1(TP)>
	<LSH	B* 1>
	<ADD	B* TYPVEC 1>
	<HRRZ	B* (B)>
	<ANDI	B* *777*>
	<CAIE	B* 1>
	<ERRUUO* <MQUOTE ARG-WRONG-TYPE!-ERRORS>>
	<MOVE	B* -4(TP)>
	<IBP	B>
	<SOJG	A* HERE -1>
	<MOVE	A* (TP)>
	<DPB	A* B>
	<JRST	PUTEND>

PUVECT	<MOVE	A* -2(TP)>
	<MOVE	B* -4(TP)>
	<HLRZ	C* B>
	<MOVNS	C>
	<ADD	C* B>
	<GETYP	C* (C)>
	<SUBI	A* 1>
	<HRL	A* A>
	<ADD	B* A>
	<JUMPG	B* BNDERR>
	<GETYP	A* -1(TP)>
	<CAME	A* C>
	<ERRUUO* <MQUOTE TYPES-DIFFER-IN-UVECTOR!-ERRORS>>
	<MOVE	A* (TP)>
	<MOVEM	A* (B)>
	<JRST	PUTEND>

PLIST	<MOVE	A* -2(TP)>
	<HRRZ	C* -4(TP)>
ALOOP	<SOJLE	A* FOUND>
	<HRRZ	C* (C)>			
	<JUMPE	C* END>
	<JRST	ALOOP>

END	<SOJL	A* FOUND>
	<JRST	BNDERR>

FOUND	<GETYP	A* -1(TP)>	; "TYPE OF 3RD ARG"
	<LSH	A* 1>
	<ADD	A* TYPVEC 1>
	<HRRZ	A* (A)>
	<ANDI	A* *777*>
	<CAIE	A* *14*>
	<CAIN	A* *20*>
	<JRST	STRHAK>
	<MOVE	A* -1(TP)>
	<HLLM	A* (C)>
	<MOVE	A* (TP)>
	<MOVEM	A* 1(C)>
	<JRST	PUTEND>

STRHAK	<PUSH	P* C>
	<MOVE	B* -1(P)>
	<MOVEI	D* 2>
	<PUSH	TP* -7(TP)>
	<PUSH	TP* -7(TP)>
	<PUSHJ	P* ABLOCK>
	<SUB	TP* [<2 (2)>]>
	<MOVE	C* -1(TP)>
	<MOVEM	C* -2(A)>
	<MOVE	C* (TP)>
	<MOVEM	C* -1(A)>
	<POP	P* C>	
	<HRLZI	B* *000022*>
	<HLLM	B* (C)>
	<SUBI	A* 2>
	<MOVEM	A* 1(C)>
	<JRST	PUTEND>

BNDERR	<ERRUUO* <MQUOTE OUT-OF-BOUNDS!-ERRORS>>

PUTEND	<MOVE	A* -5(TP)>
	<MOVE	B* -4(TP)>
	<SUB	P* [<(1) 1>]>
	<SUB	TP* [<(8) 8>]>
	<JRST	MPOPJ>	

; "TABLOCK is the TEMPLATE ABLOCK entry.  It takes a fix and returns a
   UVECTOR with that as the length.  The UVECTOR will reside in the SPACE
   which is the GVAL of the atom CURSPACE"

<SUB-ENTRY TABLOCK ("VALUE" UVECTOR FIX)>
	<DPUSH	TP* (AB)>
	<PUSHJ	P* ITABLOCK>
	<JRST	FINIS>

<INTERNAL-ENTRY ITABLOCK 1>
	<SUBM	M* (P)>
	<MOVE	A* <MQUOTE '%<RGLOC CURSPACE T>>>
	<ADD	A* GLOTOP 1>
	<MOVE	D* 1(A)>	; "THE SPACE"
	<CAMN	D* [-1]>	; "-1 MEANS NOT GASSIGNED"
	<ERRUUO* <MQUOTE CURSPACE-NOT-GASSIGNED!-ERRORS>>
	<MOVE	D* (TP)>	; "NUMBER OF ELEMENTS"
	<MOVN	E* D>		; "- NUMBER OF ELEMENTS FOR LH OF VALUE WORD"
	<ADDI	D* 2>		; "ADD DOPE WORDS"
	<PUSH	TP* (A)>	; "PUSH THE SPACE"
	<PUSH	TP* 1(A)>
	<PUSHJ	P* ABLOCK>	; "PUSHJ TO TASTEFUL ABLOCK"
	<MOVSS	D>
	<HRRI	D* -1(A)>
	<MOVEM	D* -1(A)>	; "2ND DOPE WORD"
	<MOVE	D* [<(*40000*)>]>
	<MOVEM	D* -2(A)>	; "1ST DOPE WORD"
	<ADDI	A* -2(E)>	; "MAKE UP VALUE WORD"
	<MOVE	B* A>		; "AND PUT INTO B"
	<HRL	B* E>		; "PUT - LENGTH INTO LH"
	<MOVE	A* <TYPE-WORD UVECTOR>>
	<SUB	TP* [<2 (2)>]>	; "RETURN THE UVECTOR"	
	<JRST	MPOPJ>


; "Most of the known universe PUSHJs here for storage allocation
   The amount required is in D.
   A pointer to the last used location is returned in A.
   The calling program may assume that it can use locations
   (A-1) to ((A-1)-D) for its storage.  Calling programs had
   better use all of the storage alloted or gross lossage will
   ensue.
   The SPACE had better be in (TP)"


ABLOCK	<SUBM	M* (P)>
	<PUSH	P* E>		; "SAVE E AND D"
	<PUSH	P* D>
	<MOVE	A* (TP)>	; "POINTS TO THE SPACE"
	<PUSHJ	P* LOCKIT>
	<MOVE	B* 15(A)>	; "THE BITS"
	<TLNN	B* *40000*>
	 <JRST	ABLOK>
	<PUSHJ	P* ACHAIN>
	 <JRST	AVCHN>
ABLEND	<MOVE	D* (TP)>
	<SETOM	13(D)>		; "UNLOCK THE ALLOCATOR"
	<POP	P* D>
	<POP	P* E>
	<JRST	MPOPJ>	

AVCHN	<PUSHJ	P* ANORML>
	 <JRST	AVLOSS>
	<JRST	ABLEND>

ABLOK	<PUSHJ	P* ANORML>
	 <CAIA>
	  <JRST	ABLEND>
	<PUSHJ	P* ACHAIN>
	 <JRST	AVLOSS>
	<JRST	ABLEND>


ANORML	<SUBM	M* (P)>
	<MOVE	A* (TP)>
	<MOVE	B* 3(A)>	; "LAST LOCATION USED"
	<MOVE	C* 5(A)>	; "BOTTOM OF THE SPACE"
	<MOVE	E* B>
	<SUB	E* -1(P)>
	<CAMGE	E* C>		; "IS THERE ENOUGH AT THE BOTTOM?"
	 <JRST	MPOPJ>		; "NO. TRY THE FVC"
	<MOVEM	E* 3(A)>	; "STUFF THE NEW LAST LOCATION"
	<MOVE	A* B>		; "AND RETURN IN A"
MPOPJ1	<SOS	(P)>
	<JRST	MPOPJ>

ACHAIN	<SUBM	M* (P)>
	<MOVE	A* (TP)>
	<MOVE	C* 7(A)>	; "C POINTS TO START OF CHAIN"
	<MOVEI	D* 7(A)>	; "LOCATION OF START OF CHAIN"
	<SKIPN	C>
	 <JRST	MPOPJ>		; "NOTHING THERE (LOSES WITH JUMPE BECAUSE OF SUBRFY)"
	<JRST	AVLOP1>		; "ALREADY HAVE C AND D SET"
AVLOOP	<MOVEI	D* (C)>		; "SAVE BACK POINTER IN D"
	<HRRZ	C* A>
	<SKIPN	C>
	 <JRST	MPOPJ>		; "CHAIN EMPTY. NEXT VICTIM"
AVLOP1	<MOVE	A* (C)>		; "NEXT ON CHAIN"
	<HLRZ	B* A>		; "LENGTH"
	<CAMGE	B* -1(P)>	; "ENOUGH?"
	 <JRST	AVLOOP>		; "STROLL DOWN THE LIST"
	<MOVE	E* -1(P)>	; "WANTED - GOTTEN + 2 > 0"
	<CAMN	E* B>
	 <JRST	CHAIN1>
	<SUBI	E* -2(B)>	; "CAUSE CANT BUILD A UV WITH ONE WORD"
	<JUMPG	E* AVLOOP>	; "NEED TWO WORDS TO HACK WITH"
	<ADDI	E* 2>		; "UNCOMPENSATE PREVIOUS COMPENSATION"
	<CAIA>
CHAIN1	 <SETZ	E*>
CHAIN2	<HRRZ	O* A>		; "NEXT POINTER ON CHAIN"
	<PUSH	P* C>		; "SAVE LAST LOCATION USED"
	<JUMPE	E* AVEXIT1>
	<SUB	C* -2(P)>	; "MAKE THIS MY BOTTOM LOCATION"
	<SUB	B* -2(P)>	; "WHATS THE DIFFERENCE"
	<MOVE	E* [<(*040000*)>]>	; "CREATE BOGUS UV"
	<MOVEM	E* -1(C)>	; "FIRST DOPE WORD"
	<HRLZM	B* (C)>		; "SECOND DOPE WORD"	
	<HRRM	C* (D)>		; "FIXUP THE FVC TO POINT TO BOGUS UV"
	<HRRM	O* (C)>		; "AND MAKE BOGUS UV POINT TO NEXT ELEMENT"
AVEXIT2	<POP	P* A>
	<ADDI	A* 1>
	<JRST	MPOPJ1>

AVEXIT1	<HRRM	O* (D)>		; "FLUSH THIS ENTRY COMPLETELY"
	<JRST	AVEXIT2>

AVLOSS	<PUSH	TP* -1(TP)>	; "NO MORE ROOM IN SPACE"
	<PUSH	TP* -1(TP)>	; "PUSH THE SPACE"
	<PUSH	TP* <TYPE-WORD FIX>>
	<PUSH	TP* (P)>	; "AND NUMBER OF WORDS REQUIRED"
	<MCALL	2 ADD-ALLOC>	; "CALL ADD-ALLOC"
	<MOVE	B* (TP)>	; "NEW UPDATED SPACE"
	<MOVE	A* 3(B)>	; "CURRENT LOCATION"
	<MOVE	C* A>		; "MOVE OVER TO C"
	<SUB	C* (P)>		; "AND SUBTRACT AMOUNT WE USE"
	<MOVEM	C* 3(B)>	; "MAKE THIS THE CURRENT LOCATION"
	<JRST	ABLEND>

; "Here to generate a LIST cell"

ACELL	<SUBM	M* (P)>
	<PUSH	P* O>
	<PUSH	P* C>
	<MOVE	A* (TP)>	; "POINTS TO THE SPACE"
	<PUSHJ	P* LOCKIT>
	<SKIPN	C* 9(A)>	; "CHECK FREE CHAIN FIRST"
	 <JRST	ACELL1>
	<HRRZ	B* (C)>		; "GET FORWARD POINTER"
	<MOVEM	B* 9(A)>	; "SAVE IT AWAY"
	<MOVEI	A* 2(C)>	; "AND POINT CORRECTLY"
	<HLLZS	-2(A)>		; "FOO. CLEAR REST POINTER"
ACEND	<MOVE	C* (TP)>
	<SETOM	13(C)>		; "UNLOCK ALLOCATOR"
	<POP	P* C>
	<POP	P* O>
	<JRST	MPOPJ>

ACELL1	<MOVE	B* 3(A)>	; "LAST LOCATION USED"
	<MOVE	C* 5(A)>	; "BOTTOM OF THE SPACE"
	<CAILE	C* -2(B)>
	 <JRST	ACLOSS>		; "NO. TRY THE FREE LIST"
	<SOS	3(A)>
	<SOS	3(A)>
	<MOVE	A* B>		; "AND RETURN IN A"
	<JRST	ACEND>

ACLOSS	<PUSH	TP* -1(TP)>	; "NO MORE ROOM IN SPACE"
	<PUSH	TP* -1(TP)>	; "PUSH THE SPACE"
	<PUSH	TP* <TYPE-WORD FIX>>
	<PUSH	TP* [2]>	; "AND NUMBER OF WORDS REQUIRED"
	<PUSH	P* E>
	<MCALL	2 ADD-ALLOC>	; "CALL ADD-ALLOC"
	<POP	P* E>
	<MOVE	B* (TP)>	; "NEW UPDATED SPACE"
	<MOVE	A* 3(B)>	; "CURRENT LOCATION"
	<MOVEI	C* -2(A)>	; "MOVE OVER TO C"
	<MOVEM	C* 3(B)>	; "MAKE THIS THE CURRENT LOCATION"
	<JRST	ACEND>

LOCKIT	<SUBM	M* (P)>
	<JSP	B* DSLEEP>
	<AOSE	13(A)>
	<ERRUUO* <MQUOTE CANT-LOCK-SPACE>>
	<JRST	MPOPJ>		

DSLEEP1	<SKIPN	C>
	<XCT	1(B)>
	<PUSH	P* A>	
<IFN10X #SPLICE (
	<MOVEI	A* 500>
	<DISMS>)
	#SPLICE (
	<MOVEI	A* 15>
	<SLFEEP	A*>)>
	<POP	P* A>
	<CAIA>	
DSLEEP	<MOVEI	C* 10>
	<XCT	(B)>
	<SOJA	C* DSLEEP1>
	<JRST	2(B)>

; "ARELEASE releases the object given as an argument and adds its
   storage to a free vector chain pointer in <4 SPACE>.  This
   is free to be reused where possible by ABLOCK.  An optional
   recursion argument may be given to specify the extent of the
   RELEASE.  The argument defaults to 1 (top level object only).
   A 3rd argument of -1 indicates complete release"


<TITLE ARELEASE>
	<DECLARE ("VALUE" ANY SPACE ANY "OPTIONAL" FIX)>
	<DPUSH	TP* (AB)>
	<DPUSH	TP* 2(AB)>
	<ADD	AB* [<4 (4)>]>
	<JUMPG	AB* ONEARG>
	<DPUSH	TP* (AB)>
	<PUSHJ	P* AREL1>
	<JRST	FINIS>
ONEARG	<PUSHJ	P* AREL1A>
	<JRST	FINIS>

<INTERNAL-ENTRY AREL1A 2>
	<PUSH	TP* <TYPE-WORD FIX>>
	<PUSH	TP* [1]>	; "DEFAULT THE 3RD ARGUMENT TO 1"
<INTERNAL-ENTRY AREL1 3>
	<SUBM	M* (P)>
AREL0	<MOVE	A* -4(TP)>	; "SPACE"
	<MOVE	O* (TP)>	; "FIX ARGUMENT"
	<SUB	TP* [<2 (2)>]>	; "PUT STRUCTURE ON TOP"
	<ADDI	O* 1>		; "ADD ONE TO ARGUMENT SO ONE PASS WINS"
	<SETZ	E*>		; "CLEAR TOTAL FREED WORD COUNT"
	<PUSHJ	P* AREL2>	; "GO"
	<MOVE	A* <TYPE-WORD FIX>>
	<MOVN	B* E>		; "RETURN THE NUMBER (- THE NUMBER)"
	<SUB	TP* [<2 (2)>]>	; "POP OFF THE SPACE"
	<JRST	MPOPJ>

AREL2	<SUBM	M* (P)>
	<SOJE	O* RELEND1>	; "ADD TO RECURSION COUNT. TOO DEEP==>FLUSH"
AREL3	<PUSH	P* D>		; "SAVE D AND C"
	<PUSH	P* C>
	<GETYP	C* -1(TP)>	; "GET TYPE WORD OF OBJECT"
	<LSH	C* 1>		; "AND COMPUTE SAT"
	<ADD	C* TYPVEC 1>
	<HRRZ	C* (C)>
	<ANDI	C* *777*>	; "HAVE THE SAT"
	<CAIE	C* *5*>		; "5-VECTOR/4-UVECTOR/20-STRING"
	<CAIN	C* *4*>
	<JRST	UVS>
	<CAIE	C* *14*>
	<CAIN	C* *20*>
	<JRST	STR>		; "20-STRING"
	<CAIE	C* *2*>		; "2-LIST"
	<JRST	RELEND>
	<MOVE	B* (TP)>	; "TOP LEVEL LIST"
	<JUMPE	B* RELEND>	; "FOO. EMPTY LIST!"
	<PUSH	P* B>		; "SAVE ITS POINTER"
LLOOP	<PUSHJ	P* BDCHKB>	; "CHECK POINTER IN B FOR BADNESS"
	 <JRST	[<SUB	P* [<(1) 1>]>
		 <JRST	RELEND>]> ; "FIX UP P AND FLUSH"
	<PUSH	P* B>		; "SAVE LOCAL POINTER"
	<GETYP	C* (B)>
	<CAIN	C* *22*>	; "MAGIC DEFER"
	<MOVE	B* 1(B)>	; "PUSH REAL STRING"
	<PUSH	TP* (B)>
	<PUSH	TP* 1(B)>
	<PUSHJ	P* AREL2>	; "RELEASE NEXT ELEMENT"
	<SUBI	E* 2>
	<POP	P* B>		; "RESTORE LAST CELL POINTER"
	<GETYP	C* (B)>		; "GET TYPE AGAIN"
	<CAIE	C* *22*>	; "CRETIN DEFER?"
	<JRST	LLOOP1>
	<HRRZ	C* 1(B)>	; "MAKE THE DEFER THE CDR"
	<MOVEI	D* <TYPE-CODE FIX>>
	<PUTYP	D* (C)>		; "MAKE THE STRING A LIST ELEMENT"
	<PUTYP	D* (B)>
	<HRRZ	D* (B)>		
	<HRRM	D* (C)>		; "LOOKING LIKE A FIX"
	<HRRM	C* (B)>		; "POINT THE LIST CORRECTLY"
	<JRST	LLOOP2>		; "HAHAHA"
LLOOP1	<HRRZ	C* (B)>		; "FIND TO CDR"
	<JUMPE	C* LFIN>	; "DONE YET?"
LLOOP2	<MOVE	B* C>		; "PUT CDR IN B"
	<JRST	LLOOP>		; "AND LOOP"
LFIN	<MOVE	C* 9(A)>	; "GET FREE LIST"
	<POP	P* 9(A)>	; "PUT US AT START OF IT"
	<HRRM	C* (B)>		; "TACK ON THE OLD ONE TO OUR TAIL"
	<JRST	RELEND>		; "FINIS"

STR	<PUSH	P* C>		; "SAVE FOR JUMP INTO UVS"
	<LDB	C* [<(*300600*) (TP)>]>	; "GET BYTE SIZE"
	<MOVEI	B* 36>
	<IDIV	B* C>		; "BYTES/WORD"
	<HRRZ	C* -1(TP)>	; "STRING LENGTH"
	<IDIV	C* B>		; "# WORDS, FIRST APPROXIMATION"
	<MOVNS	D>
	<HRL	D* D>		; "AOBJN PTR FOR ADJUSTING BYTE POINTER"
	<MOVE	B* (TP)>
	<ADD	B* C>
	<SKIPE	D>
	<IBP	B>
	<AOBJN	D* HERE -1>
	<MOVEI	D* 2(B)>	; "POINT TO 2ND DOPE WORD"
	<POP	P* C>		; "C HAS TO BE SAT FOR UVS/UVS1"
	<JRST	UVS1>
	

UVS	<MOVE	B* (TP)>
	<HLRE	D* B>
	<SUBM	B* D>		; "POINT TO D.W."
	<ADDI	D* 1>		; "POINT TO 2ND DOPE WORD"
UVS1	<PUSHJ	P* BDCHKD>	; "CHECK POINTER IN D FOR BADNESS"
	 <JRST	RELEND>		; "AND FLUSH"
	<HLRZ	B* (D)>
	<SUB	E* B>		; "ADD TO FREE WORD TOTAL"
	<MOVE	B* 7(A)>	; "GET CHAIN"
	<HRRM	D* 7(A)>	; "ADD ITEM TO CHAIN"
	<HRRM	B* (D)>
	<CAIN	C* *5*>
	<JRST	VECT>		; "HACK VECTOR'S INNARDS"
	<CAIN	C* *4*>
	<JRST	UVECT>		; "LIKEWISE WITH UVECTORS"
	<JRST	RELEND>

VECT	<HLRZ	B* (D)>
	<SUBI	D* -1(B)>	; "POINT TO TOP OF VECT"
	<SUBI	B* 2>
	<PUSH	P* B>
VLOOP	<PUSH	TP* (D)>	; "PUSH TYPE/VALUE OF EACH ELEMENT"
	<PUSH	TP* 1(D)>
	<PUSHJ	P* AREL2>	; "RELEASE IT"
	<ADDI	D* 2>		; "GO TO NEXT ELEMENT IN VECTOR"
	<SOS	(P)>		; "DECREMENT COUNTER BY 2"
	<SOSLE	(P)>
	<JRST	VLOOP>		; "NEXT ELEMENT"
	<POP	P* B>		; "DONE. FLUSH"
	<JRST	RELEND>

UVECT	<GETYP	C* -1(D)>	; "GET THE UTYPE"
	<LSH	C* 1>		; "AND GET THE SAT"
	<ADD	C* TYPVEC 1>
	<HRRZ	C* (C)>
	<ANDI	C* *777*>
	<CAIN	C* 1>
	<JRST	RELEND>		; "LUCKY IF ITS NON-STRUCTURED"
	<GETYP	C* -1(D)>	; "GET THE TYPE BACK"
	<MOVSS	C>		; "IN LEFT HALF"
	<HLRZ	B* (D)>		; "GO TO TOP OF THE UVECTOR"
	<SUBI	D* -1(B)>
	<SUBI	B* 2>
	<PUSH	P* B>
UVLOOP	<PUSH	TP* C>		; "PUSH THE SAVED UTYPE/VALUE"
	<PUSH	TP* (D)>
	<PUSHJ	P* AREL2>	; "RELEASE IT"
	<SOSLE	(P)>		; "DECREMENT COUNTER"
	<AOJA	D* UVLOOP>	; "LOOP"
	<POP	P* B>		; "SOURCE OF JFH BUG #69-GZILLION"
	<JRST	RELEND>		; "DONE"

RELEND	<POP	P* C>		; "FLUSH PUSHED AC'S"
	<POP	P* D>
RELEND1	<ADDI	O* 1>		; "INCREMENT THE RECURSION COUNTER"
	<SUB	TP* [<2 (2)>]>	; "FLUSH THE ARGUMENT"
	<JRST	MPOPJ>		; "LEAVE"

; "COME HERE WITH POINTER IN EITHER B OR D (DEPENDING ON ENTRY USED), SEE
IF IT'S IN SPACE.  SPACE IS IN A.  IF FUNNY BIT (ABIT-RELERR) IN SPACE IS
SET, GIVE ERROR IF NOT IN SPACE; IN ANY CASE, DON'T SKIP."

BDCHKD	<SUBM	M* (P)>
	<PUSH	P* B>
	<MOVE	B* D>		; "PUT ARG IN B"
	<JRST	BDCHKG>

BDCHKB	<SUBM	M* (P)>
	<PUSH	P* B>
BDCHKG	<HRRZS	B>
	<PUSH	P* C>
	<PUSH	P* D>
	<MOVE	C* 1(A)>	; "PBLOCK LIST FROM SPACE"
CHKLOP	<MOVE	D* 1(C)>	; "PBLOCK"
	<CAMLE	B* 3(D)>	; "ARE WE LOWER THAN HIGH WORD OF THIS BLOCK?"
	 <JRST	CHKLEND>	; "NO, GO TO NEXT"
	<SKIPN	5(D)>		; "IF 'LAST WORD' IS 0, THEN CHECK LOWEST LOC IN SPACE"
	 <JRST	[<CAMGE	B* 5(A)> ; "ABOVE LOWEST LOCATION?"
		  <JRST	CHKLEND> ; "NO, GO TO NEXT"
		 <JRST	CHKWON>]>; "YES, SO IN THIS BLOCK"
	<CAML	B* 5(D)>	; "ABOVE LAST WORD IN BLOCK?"
	 <JRST	CHKWON>		; "YES, WON"
CHKLEND	<HRRZ	C* (C)>		; "REST THE PBLOCK LIST"
	<JUMPN	C* CHKLOP>	; "AND TRY THE NEXT ELEMENT"
	<MOVE	C* 15(A)>	; "PICK UP BITS FROM SPACE"
	<TDNN	C* [,ABIT-RELERR]>
	 <JRST	CHKLST>
	<PUSH	TP* <TYPE-WORD ATOM>>
	<PUSH	TP* <MQUOTE 'RELEASE-OUT-OF-SPACE>>
	<PUSH	TP* -3(TP)>
	<PUSH	TP* -3(TP)>	; "OBJECT BEING RELEASED"
	<PUSH	TP* -7(TP)>
	<PUSH	TP* -7(TP)>	; "SPACE"
	<PUSH	P* O>
	<PUSH	P* E>
	<MCALL	3 ERROR>
	<POP	P* E>
	<POP	P* O>
	<MOVE	A* -2(TP)>	; "RESTORE THE SPACE"
	<JRST	CHKLST>		; "AND SAY LOST (IF WE EVER COME BACK FROM THE ERROR)"
CHKWON	<SOS	-3(P)>
CHKLST	<POP	P* D>
	<POP	P* C>
	<POP	P* B>
	<JRST	MPOPJ>
