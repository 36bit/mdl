MEND (Muddle Executer, aNalyzer, and Debugger)		2/6/76 JMB


[1] Starting MEND

		to load MEND:	<USE "MEND">
		to start MEND:	<MEND>

	Once MEND is started, the original process will be single
stepped and monitored.  Type an expression to be evaluated and you
will see displayed a representation of the control stack as evaluation
proceeds.  A level number is printed at the beginning of each line
followed by the object being evaluated at that level in &-printed
form.  This object may contain a pointer (v|v|), which is in place of the
object on the next line.  The pointer will be eventually replaced by
whatever the latter object returns.


[2] Interrupts

	When running, MEND is always listening for certain interrupt
characters.  The characters and their meanings are as follows.  All
but control-L clear the input channel.

	^E	End automatic mode
	^B	Begin automatic mode

	^U	Unprint (stop displaying stack)
	^P	Print (start displaying stack)

	^N	Next step (used when not in automatic mode)
	^O	skip Over (completely evaluate) current object

	^L	cLear screen, reprint stack and input
	^Q	Quit from current MEND


[3] Operating modes

	MEND starts in a mode where execution and associated actions
proceed automatically but it may be stopped and restarted using the
interrupts ^E and ^B.  When stopped it is in a read-eval-print loop
and you may do things like <FRAMES> to examine or change the state of
your process.  MEND itself will be mostly invisible.  Actually you are
typing at an invocation of EDIT.  You have all of the normal editing
commands at your disposal and a number of MEND commands.  The new
commands (and changed old ones) are:

NAME____	ARGS____	MEANING_______
?	none	type out short summary of MEND commands
??	none	type out complete summary of all commands

O	1,any	Open object or the value of an atom or MEND-stack level #arg
V	none	toggle Verbosity

N	1,FIX	do Next arg steps (like ^N)
OV	none	skip OVer current object (like ^O)

Q	none	Quit EDIT & return to automatic mode (like ^B)
QM	none	Quit MEND (like ^Q)

SN	1,FIX	Set Number of lines used for stack display
SV	1,FIX	Set leVel below which MEND will stop 1STEPping
SD	1,num	Set Delay time between steps

PD	1,FIX	Pprint Displayed object in level #arg
PO	1,FIX	Pprint Original (actual) object in level #arg


[4] Displayed objects

	There are two objects associated with each line of the stack
display, the actual object producing that line and the displayed
object.  These are initially exactly the same.  The displayed object
will be altered by argument replacement as each of its arguments is
evaluated (first with the cursor and then EVAL of the argument).  This
will normally proceed until all arguments are evaluated and the actual
object itself returns a value.
	The normal sequence may be altered in two ways.  If the object
is something like a PROG or REPEAT that may repeatedly evaluate some
or all of its arguments, each time the sequence of evaluation is
logically "backed up" the previously replaced arguments again in line
for evaluation will be reset to their original values.  The other case
is when the O command is used to edit the actual object.  Changes in
the actual object may or may not be reflected in the displayed object,
depending upon how much of the displayed object has already been
replaced.

[5] Initial conditions

	MEND originally starts with the following conditions:

1)	automatic mode (^B)
2)	printing on (^P)
3)	delay time (SD) = 1 second
4)	no.  of stack lines displayed (SN) = 12
5)	lowest 1STEPped level (SV) = 100000


[6] Breakpoints

	When MEND is running, the behavior of breakpoints (of the EDIT
variety) is slightly altered.  The change is compatible with the old
behavior to the extent that breakpoints set with MEND-type arguments
will "do the right thing" outside of MEND and vice versa.  When a
breakpoint is encountered in MEND, if its first argument (excluding
the object object) evaluates to false execution continues normally.
If it is one of a special group of atoms or if it is non-false and the
second argument is a special atom, the associated action will occur,
any further arguments will be printed with their values, and execution
will be continued.

	ON	printing will be turned on (like ^P)
	OFF	   "      "   "    "    off (like ^U)
	GO	free-run the object object (like ^O)
	PRINT	sort of a no-op, just print args & continue

Otherwise, all but the first argument are printed with their values
and automatic mode is stopped (like ^E).  You may continue from the
break just as if you had typed ^E yourself.


[7] Read and Write monitors

	to be announced
