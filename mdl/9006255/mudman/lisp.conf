(msg. #944,16064 chars)  RECENT
Mail-From: ARPANET host SRI-KL rcvd at 14-Apr-81 1000-PST
           ARPAnet host RUTGERS rcvd at 14-Apr-81 1001-PST
Date: 14 Apr 1981 1237-EST
From: HEDRICK at RUTGERS
Subject: revised (final?) version of report on Lisp conference
To: eis at MIT-AI, geoff at SRI-KL, boyer at SRI-KL, engelmore at USC-ISI,
    dreifus at WHARTON-10

I have received a number of comments on my earlier report.  Here is a
revision that incorporates most of them.  It is still quite informal
in tone, and should probably not be circulated outside the ARPAnet
community.

---------------------------------------------------------------------
This is a slightly revised report on the Lisp conference at SRI.  It
has been modified to reflect some of the comment of people who read
the first draft. The conference was called by ARPA to discuss the future
of Lisp in the AI community, as well as the proposal for ARPA to buy
Dolphin computers for use within this community.  It lasted from 8:30 am
to about 10pm on 8 April.

One of the major concerns that motivated the meeting was a feeling that
there are suddenly many projects to reimplement Lisp, and that we may
end up with many half-baked, incompatible implementations.  There had
been some hope for getting some coherence among them.  As far as I can
see, these fears are somewhat justified, and little was accomplished
towards creating coherence.  There were in fact 13 Lisp implementation
projects listed.  (Some of these have been finished, however, so that
number is a bit too big.)  Fortunately, none of them are creating new
languages.  Rather they are reimplementations of existing dialects for
new hardware.  Thus there is somewhat less chaos than the number 13
would imply.  Here they are.  All results are publically available
unless stated otherwise.

Interlisp:
   SRI portable Interlisp [SRI].  not yet funded.  projected to take 18
	months once it is funded.  They are thinking of the VAX, F-5, or
	any 32-bit machine that they can get funding for.
   Interlisp-D [Xerox].  For Dophin, a Lisp machine with bit-mapped
	display.  Finished.
   Interlisp-Jericho [BBN].  For BBN's Jericho, a high-performance
	personal computer.  in progress, projected to be ready May,
	1982.  I believe results will be proprietary.
   VAX Interlisp [USC-ISI].  They hope to have the "virtual machine"
	(i.e. the lowest level of the interpreter) running by June, but
	it will be up to a year before the whole environment is working.
	This is the most critical of all the projects as far as most
	users are concerned. 
MACLisp:
   Lisp machine [MIT].  A version of Lisp extended to make heavy use of
	bit-mapped display, and having a number of new language
	features. Finished some time ago, but development continues.
	Results are proprietary, with MIT licensing two commerical
	companies to distribute them.
   NIL [MIT].  Intended to have everything that the Lisp machine has
	that will be useful on a conventional machine.  Also
	high-performance compiler.  Will have something by end of the
	summer, but development will be ongoing.  Mainly intended for
	VAX, but probably will be done for extended-addressing 20.
   S1-NIL.  NIL for the S1.  This is a multi-CPU supermachine sponsored
	by the military (Navy?).  Projected to be ready in about 2.5
	years.
   Spice Lisp [CMU].  Dialect of MACLisp for personal computers.  Will
	use microcode assist.  First implementation will be on VAX and
	extended addressing DEC-20 by simulating the proposed microcode.
	It is unclear whether the VAX and DEC-20 versions will be usable
	Lisps or not. Officially, they are intended mainly for debugging
	until the personal machine  hardware is available.  However they
	obviously have hopes that these will be usable in their own
	right. [see below for comments on this] Projected to be ready in
	early 1982.
   Franz Lisp [Berkley].  MACLisp dialect for VAX.  finished.  Many
	people seem to be unenthusiastic about this, but it seems to be
	a solid implementation.  Maybe a trifle slower than it might be
	and somehow not as "sexy" as a typical MIT product.
Other dialects:
  Standard Lisp (Utah) - This is really a research project in
	portability. They are trying to write as much of Lisp as
	possible in Lisp. The compiler has extensions to allow it to be
	used for system programming.  Currently a very small part is
	still written in assembly language.  They should have an
	implementation for extended-address DEC-20 within 6 months.
  Elisp (Rutgers) - This is a recoding of R/UCI Lisp for extended
	addressing DEC-20.  This should be finished by the end of the
	summer.
  MDL [MIT] - This is not really a Lisp dialect.  It is intended as a
	successor to Lisp.  It has more data types and has been
	generally cleaned up.  they are working on a portable
	implementation.  There has been a DEC-20 implementation for
	years.  They now have an implementation that makes some use of
	extended addressing.  when the portable implementation is
	finished, it will be used to bring up a fully extended version
	for the DEC-20.  This is projected to be in 6 months.

Of all these, the project that generated the most interest was clearly
the VAX Interlisp.  Many people are committed to both the VAX and
Interlisp, and are in bad shape until this happens.

Now some comments as to why there are 13 projects.  I will not comment
much on the "other dialects".  MDL is its own thing, and a portable
implementation for it makes perfect sense.  Similarly, Utah's research
is a very interesting project.  In my opinion it is a more promising
approach than those being used by the Interlisp or MACLisp people, and
these folks would have been well advised to be cooperating more closely
with Utah than they are.  Our project is strictly a short-term fix to a
critical problem, and requires minimal effort.  That is its only
possible justification.  In the long run we will probably want to choose
a dialect that is going to be available on personal machines.

Now for the Interlisp and MACLisp projects.  They are all attempts to
implement existing languages for new hardware.  In the case of MACLisp
they also are trying to clean up and develop the language further.  

The Interlisp projects are coordinated with each other, at least in the
sense that they are all implementing the same language.  Also, much of
the Lisp code is shared.  However apparently the Interlisp "virtual
machine" (i.e. the part done in assembly language) is relatively large,
and the user interface (e.g. debugger) depends upon details of the stack
that are different for different machines.  Thus transporting Interlisp
is a fairly major project.  As far as I can see, the projects other than
SRI's were reimplementations of the virtual machine for particular
hardware, with no particular thought given to portability.  I think SRI
hopes to improve this.  The usefulness of this project will be affected
by who sponsors them, since certain funding arrangements could result in
a proprietary product.  There is a single manual that applies to all
Interlisp versions.  [This is more important than it sounds.]

The MACLisp projects are not particularly coordinated.  Each of them is
implementing different dialects, with separate (or non-existent)
manuals. In general the Lisp Machine seems to have the most features,
and the other dialects are probably more or less subsets of it.  Of the
current projects, there are considerable differences in style:
  Franz Lisp is the most conservative.  They wanted something up
	quickly, using existing technology.  It was done in C, which
	should help its transportability.
  Lisp Machine is the most radical.  First, it is standalone, with
	microcode support.  Second, it has every language feature one
	can imagine except for spaghetti stacks.  Finally, it supports
	the bit-mapped display.  They believe that many of its features
	could only be done on special-purpose hardware.  This might
	possibly be transportable to another microcodable machine with
	similar capabilities, though no particular thought was given to
	portability.
  Spice Lisp and NIL are in some sense compromises.  They are attempts
	at cleaning up the old language design, and taking many of the
	good ideas of Lisp Machine Lisp, but for somewhat more
	conventional machines.  At the moment these projects talk to
	each other, but are planning to implement somewhat different
	dialects.  They were strongly encouraged to talk to each other.
	They are both giving thought to portability, though SPICE is
	only intended to be portable among personal machines with
	certain capabilities.

The big question is, why so many projects?  As far as I can see,
here are the justifications:
  MDL - this is a new language design, with generally good ideas. It has
	been very influential on newer developments in Lisp.
  Utah - this is a research project in portability, and seems to be
	doing very good work.  In retrospect, the AI community would be
	much better off if Utah had decided to do their research using
	either Interlisp or MACLisp.  As it is, they have attempted to
	create a new dialect, and no one is interested.  Probably their
	work will be ignored, much to everyone's hurt, unless they
	decide to change to another dialect, which I do not expect.
  Franz Lisp and Elisp - these are projects to transport existing
	dialects to machines with lots of users that desperately needed
	the results. Elisp should die away eventually if other projects
	succeed. Franz Lisp may well survive.
  Interlisp - these projects are simply transporting Interlisp to other
	machines, which is always reasonable.  The only real criticism
	here would be that it is a shame that they can't develop
	technology to produce a new implementation more quickly.  But
	this is what SRI proposes to do.  In my opinion it is critical
	for that project to be done in such a way that the results are
	public.
  MACLisp - it is unfortunate that so much work is being done on MACLisp
	in an uncoordinated way.  There is some evidence that each
	project is made up of "true believers" who believe that there is
	little merit to the others.  We heard a somewhat amusing comment
	by one.  He said it wasn't true that there was chaos among the
	MACLisp people.  It was just that there were 4 different
	projects going in 4 different directions....

Everyone seems to believe that it is a good idea for there to be ongoing
work on both Interlisp and MACLisp.  Interlisp tends to be more
conservative in its development.  It has good user facilities and
well-coordinated support.  But there was a surprising concensus (that
included most of the Interlisp users) that
  - Interlisp is quite expensive compared to MACLisp
  - Interlisp as a dialect lacked a number of important features
	compared to MACLisp, and had no important features missing in
	MACLisp. Note that this comment refers only to facilities
	commonly used in programs, not to the user support environment.
	Many people believe that in user support Interlisp is better
	than MACLisp (except on the Lisp Machine, where MACLisp really
	shines)
Thus what was keeping people with Interlisp is
  - good user facilities
  - the fact that all implementations are compatible
  - good, complete documentation
  - good support

To the outside observer it appeared that in the long run MACLisp might
in fact take over if it could do the following:
  - supply the user facilities of the same power as Interlisp's, or
	document the fact that it already has them (if it does - I take
	no position on this question)
  - agree on a common language definition, with extensions for the Lisp
	Machine and others who need it
  - produce a complete manual, showing all the user facilities and being
	common among implementations.  A good form for this might be a
	loose-leaf binder, so that they could provide additional pages
	and chapters for the Lisp machine, and let you select which
	debugger and editor you wanted.
  - somehow assure users outside MIT that there was a central support
	organization that would respond to their concerns.  (This seems
	to be true, but there may be a PR problem.)
  - possibly do something to isolate non-MIT users from the hack-of-the
	week club, while preserving the fact that Maclisp will continue
	to develop more aggressively than Interlisp.  It is unclear
	whether there is a real problem here or a PR problem.

I am not convinced that the MACLisp folks can do this if left to
themselves. There was a proposal that ARPA might somehow be able to
cause it to happen.

Finally there is the question of what will happen next as far as
hardware acquisition.  We polled representatives of various user groups.
Most of them have DEC-10's and -20's.  They all say the PDP-10 is dead,
but are still doing most of their work on it.  However there are also a
significant number of people who use VAX as their primary system.  Some
of these are using Franz Lisp.  It seems fine.  But many are desperate
for VAX Interlisp.  Few people are currently using personal computers
for much, or even have definite plans to use them.  The main places that
are highly committed are
   MIT, where most Lisp work is using Lisp Machines
   BBN, which is committed to Jericho
   CMU, which is committed to Spice (in a somewhat indefinite future), 
   PARC, where most Lisp work is done with Dolphins and Dorados
   HPP(Sumex), which is committed to Dolphins
Others are hedging their bets with one or two experimental machines, or
are just plain waiting.

On the other hand, there are a number of complaints of a serious
shortage of cycles.  The most vocal is HPP/Sumex.  Thus there is some
pressure on ARPA to do something immediately.  HPP is pressuring them to
buy a large group of Dolphins.  There may also be pressure from
elsewhere, but it was not clear in this meeting.  A number of other
people have said that if ARPA does go this way, they will follow.  But
few people other than HPP feel strongly enough to commit to Dolphins
with their own money, unless ARPA does.  If ARPA does, then it will
become a de facto standard and no one wants to be left out.  People are
concerned that the Dophin is a bit too slow (apparently about 1/2 the
power of a Lisp Machine). The feeling is that a year ago it would have
been a great idea, but its time may have passed.  The problem is that
there is no obvious other candidate.  People advised ARPA to look around
carefully to see if there wasn't something better.  One problem is that
whatever it is must support Interlisp.  Thus the Lisp machine will only
work if they will put Interlisp-D on it.  This might be technically
feasible, but the Lisp Machine people aren't interested in doing it.
(Whether the smell of that much money will arouse their appetite remains
to be seen.) The Jericho isn't quite ready, nor are any other personal
computers, though many are on the horizon.  The only other thing that
could be done quickly would be a single user VAX, which DEC might be
able to build if they would, or a small Foonly (a PDP-10 equivalent).
DEC had a single user PDP-10, which would be an ideal solution, but
decided not to build it.  The guess is that even ARPA isn't a large
enough customer to cause DEC to do something it otherwise wouldn't do.
If there is nothing better than the Dolphin, I don't have much of a
guess whether ARPA will get it or not. I think they may flip a coin.

The problem is that the proposed buy of Dolphins would be a large
commitment, and might make it hard for ARPA to take advantage of a
better system that may show up in a year.  It is not just that the
hardware will be expensive.  It is that by the time you add in the
software and hardware support, the total is 3 times the actual hardware
purchase price.

At that point the meeting ended, with no conclusion.
-------
   