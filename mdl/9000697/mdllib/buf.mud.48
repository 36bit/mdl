
<PACKAGE "BUF">

"A buffer is a VECTOR of two STRINGs.  The first points to the buffer,
the second to the first unused character in the buffer.

Entry points:

<ADDCHR buffer character>
	adds the character to the buffer.

<ADDCRLF buffer character>
	adds a line-feed to the buffer after the character.  (used in CHRTABLE).

<ADDFILE buffer channel --count-->
	inserts 'count' characters from file, or whole thing.

<ADDSTRING buffer string --count-->
	inserts 'count' characters or the whole string.

<ADD-OFFSET-STRING buffer string string>
	inserts the first string into the buffer, with the second
	string added as a prefix of each non-empty line.

BPRMPT1
BPRMPT2
	Manifest offsets for accessing prompts in buffer.

BUF-BITS
	A MACRO for playing with the BBITS field.  Takes a buffer, a
	bit, and (optionally) an atom or false.  If only two arguments,
	returns the current value (atom or false); if three, sets/clears
	the specified bit.

BUF-ECHO-FLAG
	If FALSE, echoes happen as usual.  If a fix, instead of echoing
	we erase <fix> characters, and setg buf-echo-flag to false.  If
	atom or applicable, apply to the character typed, the buffer,
	and outchan.

<BUFCLEAR buffer>
	clears buffer.

<BUFGROW buffer count>
	grows buffer by count characters.

<BUFLENGTH buffer>
	return number of characters in buffer.

<BUFMAKE count \"OPT\" prompt1 prompt2>
	makes a buffer of length count, with prompts of prompt1 and prompt2.

<BUFPRINT buffer --channel-- prompt? redisp?>
	efficient buffer printer of buffer to (optional) channel.  The
	characters in the buffer are printed, without regard to MUDDLE
	escape characteristics (i.e., double-quote will not be preceded
	by a back-slash).  For printing as a string, see 'BUFSPRINT'.

BUFSIZE
	free variable, amount to grow by if not given.

<BUFSPRINT buffer --channel-->
	prints a buffer on an (optional) channel (default .OUTCHAN).
	The function prints the buffer as a string, 'escaping' the
	characters double-quote and back-slash so that the the string
	may be read correctly as a MUDDLE object.

<BUFTECO buffer character>
	function which applies TECO to a buffer.  May be used in
	CHRTABLE, and is default control-E function.

<BUFTOS buffer>
	uses EXTRACT to generate a string whose length is the number of
	characters in the buffer.

CHRTABLE
	initial table,
	ESC___	Returns from GETSTR (via GETSTRACT)
	^Q	Quotes the next character
	^X	Deletes current line
	^W	Deletes word back to separator
	^@	Clears buffer
	^E	Edit the buffer
	^F	Inserts a file into the buffer
	^P	Undo the last major deletion
	^T	Re-enter TECO without munging its buffer
	^D	Displays the buffer on next line
	^L	Clears the screen and displays the buffer
	^R	On printing terminals, redisplays last line of buffer

<DELCHR buffer character>
	returns deleted character or FALSE.  Applies <GVAL DELPRINT> to
	the character, unless DELPRINT is false.  Initial GVAL of DELPRINT
	is.

<DELPRINT character>
	GVAL applied to chars when deleted, unless GVAL is FALSE.

<DELTOCH buffer string \"OPT\" <or false string>>
	deletes characters from buffer till member of string is deleted.
	Returns # of chrs deleted.  If optional string present, prints
	it (followed by crlf) rather than echoing deleted characters on
	non-display.

<DEL-TO-EOL>
	sends delete-to-end-of-line stream (ctl-P L) to system.

DISPLAY?
	T if console is an erasable display.

<DLINE buffer>
	deletes the current line from the buffer.  The separator
	(initially ,LINEBRKS contains CR__ only) is not deleted.

<DWORD buffer>
	deletes one 'word' in the buffer back from current point
	till a member of ,WORDBRKS is encountered.  The separator is
	not deleted.

<FILEINP>
	asks for file names, inputs the file.

FORMATEFFS
	string of format-effector chars.

<GET-CPOS \"OPT\" channel>
	Reads the cursor position on the channel (it better be open
	on something where that's meaningful) and updates the channel's
	position indicators.  Used internally after SIOTs and such, which
	don't change the data stored in the channel.

<GETSTR buffer --table-->
	reads a string from the tty into the buffer (arg1).  The
	processing for characters is defined by a dispatch table
	(default .CHRTABLE). This argument is a structured object of
	pairs.  The first element is a character, the second an
	applicable object which is applied to the buffer and the
	character, whenever that character is seen.  GETSTR sets up a
	special activation which is bound to the atom GETSTRACT.  This
	activation marks the repeat loop, and thus may be returned from
	to get out of GETSTR.  GETSTR returns the buffer.

GETSTRACT
	GETSTR's activation, special.

<HPOS-BUF buffer>
	takes a BUFFER and does a horizontal position to the calculated
	end of the last line.  For deletions, etc.

<IBUFCLEAR buffer character>
	clears the buffer and does '<BUFPRINT ..>.

<IBUFPRINT buffer character>
	clears screen if character is Form-feed.  Then prints the buffer.

<IDELCHR buffer character>
	deletes on character and returns it, or FALSE if buffer empty.
	(Used in CHRTABLE).

<>
	knows how to delete chars from display.  Uses GVAL of DISPLAY? to
	determine whether applicable.

<INIT>
	initializes defaults, setgs DISPLAY?.

<ISDISPLAY?>
	returns T if console is an erasable display.

LINEBRKS

<QUOTECHR buffer character>
	quotes the next character by calling IOT, thus escaping the
	normal dispatch through GETSTR.  The function assumes the TTY
	environment has been set up correctly. (see MY-TTY-OFF).

REENTER-TECO-CHAR
	character that means reenter TECO without munging its buffer.

TECO-PROGRAM
	a string which is what BUFTECO will use to try to load the
	inferior TECO.

<UNKILL buffer chr>
	Undoes the last `major' deletion (word or more) from the buffer.
	If nothing there, no effect.  CHR is ignored.

WORDBRKS
	strings of breaks to be used in deletion
"

\ 

<ENTRY ADDCHR
       ADDCRLF
       ADDFILE
       ADDSTRING
       ADD-OFFSET-STRING
       BSTR
       BCUR
       BPRMPT1
       BPRMPT2
       BUF-BITS
       BUF-BIT-PROMPT
       BUF-ECHO-FLAG
       BUFCLEAR
       BUFFER
       BUFGROW
       BUFLENGTH
       BUFMAKE
       BUFPRINT
       BUFSIZE
       BUFSPRINT
       BUFTECO
       BUFTOS
       CHRTABLE
       DELCHR
       DELPRINT
       DELTOCH
       DISPLAY?
       DLINE
       DWORD
       FILEINP
       FORMATEFFS
       GET-CPOS
       GETSTR
       GETSTRACT
       HPOS-BUF
       IBUFCLEAR
       IBUFPRINT
       IDELCHR
       INIT
       ISDISPLAY?
       LINEBRKS
       QUOTECHR
       REENTER-TECO-CHAR
       TECO-PROGRAM
       UNKILL
       WORDBRKS>

<USE "SCR" "GET-FILE"						     ;"MUDTEC">

\ 

<NEWTYPE BUFFER
	 VECTOR
	 '<<PRIMTYPE VECTOR> [4 STRING]
			     FIX
			     <PRIMTYPE WORD>
			     STRING
			     FIX
			     <OR ATOM FALSE>>>

<DEFINE MSETG (X Y) <SETG .X .Y> <MANIFEST .X>>

<PROG ()
      <MSETG BSTR 1>
      <MSETG BCUR 2>
      <MSETG BPRMPT1 3>
      <MSETG BPRMPT2 4>
      <MSETG INITIAL-HPOS 5>
      <MSETG BBITS 6>
      <MSETG BSAVED 7>
      <MSETG BSAVED-MAX 8>
      <MSETG BDELETING 9>>

<MSETG BUF-BIT-PROMPT 0>

;"If on, print a new prompt on every cr"

<DEFMAC BUF-BITS ('BUF 'BIT "OPTIONAL" 'NEW) 
	<FORM BIND
	      ((B .BUF) (BIT .BIT))
	      #DECL ((B) BUFFER (BIT) <PRIMTYPE WORD>)
	      <COND (<ASSIGNED? NEW>
		     <FORM PUT
			   <FORM LVAL B>
			   ,BBITS
			   <FORM PUTBITS
				 <FORM BBITS <FORM LVAL B>>
				 <FORM BITS 1 <FORM LVAL BIT>>
				 <FORM COND (.NEW 1) (0)>>>)
		    (T
		     <FORM 1?
			   <FORM CHTYPE
				 <FORM GETBITS
				       <FORM BBITS <FORM LVAL B>>
				       <FORM BITS 1 <FORM LVAL BIT>>>
				 FIX>>)>>>

\ 

<SETG REENTER-TECO-CHAR !\>

;"for BUFTECO only"

<SETG FORMATEFFS <MAPF ,STRING ,ASCII [13 10 14 9 32 8]>>

<SETG WORDBRKS <STRING <ASCII 13> <ASCII 10> "	, ;:.">>

<SETG LINEBRKS <STRING <ASCII 13> <ASCII 10>>>

<SETG DELPRINT T>

<SETG BUFSIZE 200>

<SETG BUF-ECHO-FLAG <>>

<GDECL (INCHAN)
       CHANNEL
       (DISPLAY?)
       <OR ATOM FALSE>
       (FORMATEFFS)
       STRING
       (BUFSIZE)
       FIX>

\ 

<DEFINE BUFMAKE (N
		 "OPTIONAL" (PROMPT1 "") (PROMPT2 "")
		 "AUX" (ST <ISTRING .N>))
	#DECL ((N) FIX (ST PROMPT1 PROMPT2) STRING (VALUE) BUFFER)
	<CHTYPE [.ST .ST .PROMPT1 .PROMPT2 0 0 <REST <ISTRING 20> 20> 20 <>]
		BUFFER>>

<DEFINE BUFLENGTH (BUF) 
	#DECL ((BUF) BUFFER (VALUE) FIX)
	<- <LENGTH <1 .BUF>> <LENGTH <2 .BUF>>>>

<DEFINE BUFGROW (BUFFER
		 "OPTIONAL" (BUFSIZE ,BUFSIZE)
		 "AUX" (STR <1 .BUFFER>) (PTR <2 .BUFFER>)
		       (LSTR <- <LENGTH .STR> <LENGTH .PTR>>))
	#DECL ((VALUE BUFFER) BUFFER (STR PTR) STRING (BUFSIZE LSTR) FIX)
	<SET PTR
	     <REST <SET STR
			<SUBSTRUC .STR
				  0
				  .LSTR
				  <ISTRING <+ .BUFSIZE <LENGTH .STR>>>>>
		   .LSTR>>
	<PUT .BUFFER 1 .STR>
	<PUT .BUFFER 2 .PTR>>

<DEFINE BUFFER-PRINT (BUF "AUX" (L <BUFLENGTH .BUF>) (S ,STREAM)) 
	#DECL ((BUF) BUFFER (L) FIX (S) TTY)
	<DO-OUTPUT .S <BPRMPT1 .BUF>>
	<DO-OUTPUT .S <BPRMPT2 .BUF>>
	<COND (<NOT <0? .L>> <DO-OUTPUT .S <1 .BUF> <> .L>)>>

<PRINTTYPE BUFFER ,BUFFER-PRINT>

\ 

<DEFINE INIT () 
	#DECL ((VALUE) ATOM)
	<SETG STREAM <GET-TTY .OUTCHAN .INCHAN>>
	<SETG DISPLAY? <ISDISPLAY?>>
	T>

<DEFINE ISDISPLAY? () 
	#DECL ((VALUE) <OR ATOM FALSE>)
	<TERM-MOVE? ,STREAM>>

\ 

<DEFINE ADDCHR (BUFFER CHR) 
	#DECL ((CHR) CHARACTER (VALUE BUFFER) BUFFER)
	<COND (<EMPTY? <2 .BUFFER>>			        ;"NO MORE ROOM"
	       <BUFGROW .BUFFER>)>
	<PUT .BUFFER 2 <REST <PUT <2 .BUFFER> 1 .CHR>>>>

<DEFINE BUFTOS (BUF) 
	#DECL ((BUF) BUFFER (VALUE) STRING)
	<SUBSTRUC <1 .BUF> 0 <- <LENGTH <1 .BUF>> <LENGTH <2 .BUF>>>>>

<DEFINE BUFPRINT (BUF
		  "OPTIONAL" (CH .OUTCHAN) (PROMPT? T) (REDISP? <>)
		  "AUX" (STR <1 .BUF>) (LL <BUFLENGTH .BUF>)
		  (TTY? <=? <9 .CH> "TTY">))
   #DECL ((BUF) BUFFER (STR) STRING (VALUE LL) FIX (CH) CHANNEL
	  (TTY? REDISP? PROMPT?) <OR ATOM FALSE>)
   <COND (.PROMPT?
	  <DOSPRINT <BPRMPT1 .BUF> .CH T>
	  <COND (<AND <NOT .REDISP?> <G? .LL <- <13 .CH> <14 .CH>>>>
		 <DOSPRINT "-continued-" .CH>)
		(<SET REDISP? T>)>
	  <DOSPRINT <BPRMPT2 .BUF> .CH>)
	 (<SET REDISP? T>)>
   <COND (.TTY? <GET-CPOS .CH> <PUT .BUF ,INITIAL-HPOS <14 .CH>>)>
   <COND (.REDISP?
	  <COND (<AND .PROMPT? .TTY? <BUF-BITS .BUF ,BUF-BIT-PROMPT>>
		 <REPEAT ((IS <1 .BUF>) (MINL <LENGTH <2 .BUF>>) NS)
			 #DECL ((IS) STRING (MINL) FIX (NS) <OR STRING FALSE>)
			 <COND (<AND <SET NS <MEMBER "
" .IS>>
				     <G? <LENGTH .NS> .MINL>>
				<DOSPRINT .IS
					  .CH
					  <>
					  <+ 2 <- <LENGTH .IS> <LENGTH .NS>>>>
				<SET IS <REST .NS 2>>
				<DOSPRINT <BPRMPT1 .BUF> .CH>
				<DOSPRINT <BPRMPT2 .BUF> .CH>)
			       (<DOSPRINT .IS .CH <> <- <LENGTH .IS> .MINL>>
				<RETURN>)>>)
		(<DOSPRINT .STR .CH <> .LL>)>)>
   .LL>

<DEFINE DOSPRINT (STR CH
		  "OPTIONAL" (UPDATE? <>) (LEN <LENGTH .STR>)
		  "AUX" TEMP)
	#DECL ((STR) STRING (UPDATE?) <OR ATOM FALSE> (LEN) FIX)
	<COND (<OR <NOT <TYPE? .CH CHANNEL>> <N=? <9 .CH> "TTY">>
	       <PRINTSTRING .STR .CH .LEN>)
	      (T
	       <OR <0? .LEN> <DO-OUTPUT ,STREAM .STR <> .LEN>>
	       <COND (.UPDATE? <GET-CPOS .CH>)>)>
	.STR>

<DEFINE GET-CPOS ("OPTIONAL" (CH .OUTCHAN) "AUX" (S ,STREAM)) 
	#DECL ((CH) CHANNEL (S) TTY)
	<PUT .CH 14 <TCURSX .S>>
	<PUT .CH 16 <TCURSY .S>>>

<DEFINE BUFSPRINT (BUF
		   "OPTIONAL" (OUTCHAN .OUTCHAN)
		   "AUX" (STR <1 .BUF>) (L <LENGTH <2 .BUF>>) SS LL FILE?
			 (S ,STREAM) (ESCSTR "\\\"") (ESCESC "\\\\"))
	#DECL ((BUF VALUE) BUFFER (L LL) FIX (ESCSTR ESCESC STR) STRING
	       (FILE?) <OR ATOM FALSE> (SS) <OR STRING FALSE>
	       (OUTCHAN) <SPECIAL CHANNEL>)
	<COND (<SET FILE? <N==? .OUTCHAN ,OUTCHAN>>
	       <PRINC !\">)
	      (ELSE <DO-OUTPUT .S "\"">)>
	<PROG ()
	      <COND (<0? <SET LL <- <LENGTH .STR> .L>>> T)
		    (<SET SS <FIRST-OF .ESCSTR .STR .LL>>	 ;"find losers"
		     <COND (<0? <SET LL <- <LENGTH .STR> <LENGTH .SS>>>>)
			   (.FILE?
			    <PRINTSTRING .STR .OUTCHAN .LL>)
			   (ELSE
			    <DO-OUTPUT .S .STR <> .LL>)>
		     <COND (.FILE?
			    <PRINC <COND (<==? <1 .SS> !\\\> .ESCESC)
				         (ELSE .ESCSTR)>>)
			   (ELSE
			    <DO-OUTPUT .S
				<COND (<==? <1 .SS> !\\\> .ESCESC)
				      (ELSE .ESCSTR)>>)>
		     <SET STR <REST .SS>>
		     <AGAIN>)				   ;"go look some more"
		    (<G? .LL 0>
		     <COND (.FILE? <PRINTSTRING .STR .OUTCHAN .LL>)
			   (ELSE <DO-OUTPUT .S .STR <> .LL>)>)>>
	<COND (.FILE? <PRINC !\">)
	      (ELSE <DO-OUTPUT .S "\"">)>
	.BUF>

<DEFINE FIRST-OF (ES S "OPTIONAL" (L <LENGTH .S>)) 
	#DECL ((ES S) STRING (L) FIX (VALUE) <OR STRING FALSE>)
	<MAPR <>
	      <FUNCTION (C) 
		      #DECL ((C) STRING)
		      <COND (<MEMQ <1 .C> .ES> <MAPLEAVE .C>)
			    (<0? <SET L <- .L 1>>> <MAPLEAVE <>>)>>
	      .S>>

<DEFINE DELTOCH (BUF STOP
		 "OPTIONAL" (LONG? <>)
		 "AUX" DELCH (COUNT 0) (ST <2 .BUF>) (MAXC <BUFLENGTH .BUF>)
		       (NBREAKFLAG <>) C (DISPLAY? ,DISPLAY?) CHAN (S ,STREAM)
		       (BREAKS <>) (DELCNT <>) RETVAL (SAVE-STRING <2 .BUF>))
	#DECL ((BUF) BUFFER (SAVE-STRING ST) STRING (S) TTY
	       (BREAKS) <OR FALSE STRING> (STOPS) <OR FIX STRING>
	       (DELCNT) <OR FIX FALSE>
	       (DELCH) <OR FALSE CHARACTER> (NBREAKFLAG) <OR FALSE ATOM>
	       (C) CHARACTER (LONG?) <OR STRING FALSE>
	       (RETVAL COUNT MAXC VALUE) FIX (DISPLAY?) <OR ATOM FALSE>
	       (CHAN) CHANNEL)
	<COND (<NOT .LONG?> <START-DELETION .BUF>)>
	<COND (<TYPE? .STOP STRING> <SET BREAKS .STOP>)
	      (T
	       <SET DELCNT .STOP>)>
	<SET RETVAL
	     <REPEAT ()
		     <COND (<0? .MAXC>
			    <PUT .BUF 2 .ST>
			    <COND (.DISPLAY?
				   <HPOS-BUF .S .BUF>
				   <CLEAR-EOL ,STREAM>)
				  (.LONG?
				   <DO-OUTPUT .S .LONG?>
				   <FRESH-LINE .S>)>
			    <RETURN .COUNT>)>
		     <SET C <1 <SET ST <BACK .ST>>>>	       ;"get last char"
		     <COND (<OR <AND .BREAKS
				     <MEMQ .C .BREAKS>>
				<AND .DELCNT
				     <L? <SET DELCNT <- .DELCNT 1>> 0>>>
			    <COND (.NBREAKFLAG	        ;"seen any non-breaks?"
				   <PUT .BUF 2 <REST .ST>>
				   <COND (.DISPLAY?
					  <HPOS-BUF .S .BUF>
					  <CLEAR-EOL .S>)
					 (.LONG?
					  <DO-OUTPUT .S .LONG?>
					  <FRESH-LINE .S>)>
				   <RETURN .COUNT>)>)
			   (<SET NBREAKFLAG T>)>		   ;"non-break"
		     <COND (<NOT .DISPLAY?>
			    <COND (<AND <NOT .LONG?> ,DELPRINT>
				   <PUT .BUF 2 .ST>
				   <DO-ERASE .BUF .C>)>)
			   (<==? .C <ASCII 10>>			   ;"linefeed?"
			    <COND (<OR <1? .MAXC>
				       <==? <1 <BACK .ST>> <ASCII 13>>>
				   <HOR-POS-CURSOR .S 0>)
				  (<PUT .BUF 2 .ST> <HPOS-BUF .S .BUF>)>
			    <CLEAR-EOL .S>
			    <UP-CURSOR .S>)
			   (<==? .C <ASCII 13>>				 ;"CR?"
			    <PUT .BUF 2 .ST>
			    <HPOS-BUF .S .BUF>)>
		     <SET COUNT <+ .COUNT 1>>
		     <SET MAXC <- .MAXC 1>>>>
	<SAVE-KILL .BUF .SAVE-STRING>
	.RETVAL>

<DEFINE SAVE-KILL (BUF OLDST "AUX" LEN N)
  #DECL ((BUF) BUFFER (OLDST) <OR STRING FALSE> (LEN N) FIX)
  <COND (.OLDST
	 <SET LEN <- <LENGTH <2 .BUF>> <LENGTH .OLDST>>>
	 <COND (<G? .LEN <BSAVED-MAX .BUF>>
		<PUT .BUF ,BSAVED-MAX <SET N <+ .LEN 20>>>
		<PUT .BUF ,BSAVED <REST <ISTRING .N> .N>>)>
	 <PUT .BUF ,BSAVED
	      <SUBSTRUC <2 .BUF> 0 .LEN
			<BACK <REST <BSAVED .BUF> <LENGTH <BSAVED .BUF>>>
			      .LEN>>>)
	(T
	 <PUT .BUF ,BSAVED <REST <BSAVED .BUF> <LENGTH <BSAVED .BUF>>>>)>>

<DEFINE UNKILL (BUF CHR)
  #DECL ((BUF) BUFFER (CHR) CHARACTER)
  <PADDSTRING .BUF <BSAVED .BUF>>
  <PUT .BUF ,BSAVED <REST <BSAVED .BUF> <LENGTH <BSAVED .BUF>>>>>

\ 

"SUBTITLE INTERACTION WITH INFERIOR TECO"

<SETG TECO-PROGRAM "T">

<DEFINE BUFTECO (BF
		 "OPTIONAL" CHR
		 "AUX" (OUTCHAN .OUTCHAN) R S TEC (OKAY '![*BREAK-16 *VALUE!])
		       (S ,STREAM) (REENTER-TECO-CHAR ,REENTER-TECO-CHAR))
   #DECL ((OKAY) <UVECTOR [REST ATOM]> (OUTCHAN) CHANNEL (BF VALUE) BUFFER
	  (S) TTY (R) ANY (S) FIX (TEC) INF (CHR REENTER-TECO-CHAR) CHARACTER)
   <COND
    (<AND <OR <AND <GASSIGNED? TECO> <TYPE? ,TECO INF> <SET TEC ,TECO>>
	      <AND <PROG ()
			 <CLEAR-SCREEN .S>
			 <DOSPRINT "You are starting " .OUTCHAN>
			 <DOSPRINT ,TECO-PROGRAM .OUTCHAN>
			 <DOSPRINT " for the first time.  If your INIT
is unconventional, you may have to exit with ^C, ^K
or their equivalents (not ^Z!) after it begins listening.
"
				   .OUTCHAN T>
			 <SET R <TECO-LOAD ,TECO-PROGRAM>>
			 <AND <TYPE? .R INF> <SET TEC .R>>>
		   <SET R <INF-START .TEC>>
		   <PROG ()
			 <COND (<AND <TYPE? .R LIST> <MEMQ <1 .R> .OKAY>>)
			       (<CLEAR-SCREEN .S>
				<DOSPRINT 
"Control-Z before ready? " .OUTCHAN>
				<DOSPRINT ,TECO-PROGRAM .OUTCHAN>
				<DOSPRINT " edit aborted.
"
				       .OUTCHAN T>
				<TECO-KILL>
				<>)>>>>
	  <OR <==? .CHR .REENTER-TECO-CHAR>
	      <SET R <TECO-ALLOC <BUFLENGTH .BF>>>>>
     <COND (<N==? .CHR .REENTER-TECO-CHAR>
	    <TECO-OPEN .TEC>
	    <BUFPRINT .BF <INF-UCHAN .TEC> <>>
	    <TECO-CLOSE .TEC>)>
     <PROG ()
	   <SET R <INF-CONTIN .TEC>>
	   <COND (<AND <TYPE? .R LIST> <MEMQ <1 .R> .OKAY>>
		  <CLEAR-SCREEN .S>
		  <DO-OUTPUT .S "Back to ">
		  <DO-OUTPUT .S <JNAME>>
		  <DO-OUTPUT .S ":">
		  <FRESH-LINE .S>
		  <COND (<0? <SET S <TECO-BUFFER-SIZE T .TEC>>>
			 <CLEAR-SCREEN .S>
			 <DOSPRINT 
"An empty string was returned from " .OUTCHAN>
			 <DOSPRINT ,TECO-PROGRAM .OUTCHAN>
			 <DOSPRINT ".
The buffer has been left unchanged.
"
				   .OUTCHAN T>)
			(ELSE
			 <COND (<G? .S <BUFLENGTH .BF>>
				<BUFGROW .BF <- .S <BUFLENGTH .BF>>>)>
			 <BUFCLEAR .BF>
			 <SAVE-KILL .BF <>>
			 <TECO-READ-BUFFER <1 .BF> T .TEC>
			 <PUT .BF 2 <REST <1 .BF> .S>>
			 <DO-OUTPUT .S "[DONE]">
			 <FRESH-LINE .S>)>)
		 (<==? .R ^Z-TYPED>
		  <CLEAR-SCREEN .S>
		  <DOSPRINT 
"Please return from " .OUTCHAN>
		  <DOSPRINT ,TECO-PROGRAM .OUTCHAN>
		  <DOSPRINT " with ^C, ^K, or their equivalents.
Please re-enter with ^" .OUTCHAN T>
		  <DO-OUTPUT .S
			     <ASCII <+ <ASCII .REENTER-TECO-CHAR> 64>>>
		  <DOSPRINT ".
You could get yourself into a bad state.
" .OUTCHAN T>)
		 (ELSE
		  <CLEAR-SCREEN .S>
		  <DOSPRINT "An error occurred in returning from " .OUTCHAN>
		  <DOSPRINT ,TECO-PROGRAM .OUTCHAN>
		  <DOSPRINT ": " .OUTCHAN T>
		  <INF-RESULT .TEC .R>)>>)
    (ELSE
     <FRESH-LINE .S>
     <DO-OUTPUT .S ,TECO-PROGRAM>
     <DO-OUTPUT .S " was not able to start up successfully: ">
     <PRIN1 .R>)>
   <AND .TEC
	<OR <=? .R '(*BREAK-16 :KILL)>
	    <AND <TYPE? .R LIST>
		 <==? <LENGTH .R> 2>
		 <==? <1 .R> *VALUE>
		 <TYPE? <2 .R> STRING>
		 <MEMBER ":KILL" <2 .R>>>>
	<TECO-KILL .TEC>>
   <TTY-RESET .S>
   .BF>

\ 

"SUBTITLE ERROR AND CHAR. INT HANDLERS"

<DEFINE ERRFCN (FRM "TUPLE" ANY "AUX" ERRVAL) 
	#DECL ((FRM) FRAME)
	<COND (<AND <BOUND? GETSTRACT> <LEGAL? .GETSTRACT>>
							 ;"HE MAY HAVE ERRETED"
	       <OFF ,GLOBL-GETSTR-HAND>			       ;"OFFS THIS FCN"
	       <TTY-RESET ,STREAM>
	       <INT-LEVEL 0>
	       <SET ERRVAL <ERROR !.ANY>>		     ;"RE-ENTERS ERROR"
	       <HANDLER <GET ERROR!-INTERRUPTS INTERRUPT> ,GLOBL-GETSTR-HAND>
							      ;"IF ERRET W/ARG"
	       <TTY-SCR ,STREAM>			    ;"RESET TTY STATUS"
	       <ERRET .ERRVAL .FRM>		     ;"IF HE ERRET'S ANYTHING")
	      (ELSE			   ;"GROVEL AND DELETE THIS HANDLER")>>

<DEFINE CHARFCN (CHR CHN
		 "AUX" OTTY (GETSTR-HAND ,GLOBL-GETSTR-HAND)
		       (GETSTR-CHAND ,GLOBL-GETSTR-CHAND))
	#DECL ((CHR) CHARACTER (CHN) CHANNEL (OTTY) <UVECTOR [REST WORD]>
	       (VALUE) <OR DISMISS FALSE> (GETSTR-CHAND GETSTR-HAND) HANDLER)
	<COND (<AND <BOUND? GETSTRACT>
		    <LEGAL? .GETSTRACT>
		    <OR <=? .CHR <ASCII 7>> <=? .CHR !\>>>
	       <OFF .GETSTR-HAND>			       ;"ERROR HANDLER"
	       <OFF .GETSTR-CHAND>			        ;"CHAR HANDLER"
	       <TTY-RESET ,STREAM>
	       <QUITTER .CHR .CHN>  ;"IF RETURNS, WANT TO REINSTATE INTERRUPTS"
	       <HANDLER <GET ERROR!-INTERRUPTS INTERRUPT> .GETSTR-HAND>
	       <HANDLER <GET ,INCHAN INTERRUPT> .GETSTR-CHAND>
	       <TTY-SCR ,STREAM>			       ;"REINSTATE TTY"
	       #DISMISS T)>>

<OFF <SETG GLOBL-GETSTR-HAND <ON "ERROR" ,ERRFCN 3 0>>>

<OFF <SETG GLOBL-GETSTR-CHAND <ON "CHAR" ,CHARFCN 7 0 ,INCHAN>>>

\ 

"SUBTITLE BASIC CHARACTER INPUT"

<DEFINE GETSTR (BUF
		"OPTIONAL" (CHRTABLE .CHRTABLE) (PROMPT1 <BPRMPT1 .BUF>)
			   (PROMPT2 <BPRMPT2 .BUF>)
		"AUX" (S ,STREAM) (OUTCHAN .OUTCHAN) GETSTR-HAND GETSTR-CHAND)
	#DECL ((VALUE BUF) BUFFER (CHRTABLE) <OR <LIST [REST VECTOR]> VECTOR>
	       (S) TTY (PROMPT2) STRING (OUTCHAN) CHANNEL
	       (GETSTR-HAND GETSTR-CHAND) HANDLER (PROMPT1) <OR STRING FALSE>)
						  ;"Initialize if not done yet"
	<COND (<NOT <GASSIGNED? STREAM>> <INIT>)>
	<TTY-SETUP .S>			     ;"SET SYSTEM TTY-HANDLING"
	<SET-ECHO-MODE .S <>>
	<SET-IMAGE-MODE .S T>
	<SET GETSTR-HAND
	     <HANDLER <GET ERROR!-INTERRUPTS INTERRUPT> ,GLOBL-GETSTR-HAND>>
	<SET GETSTR-CHAND
	     <HANDLER <GET ,INCHAN INTERRUPT> ,GLOBL-GETSTR-CHAND>>
	<BDELETING .BUF <>>
	<COND (<AND .PROMPT1 <==? <1 .BUF> <2 .BUF>>>
	       <DO-OUTPUT .S .PROMPT1>
	       <DO-OUTPUT .S .PROMPT2>
	       <GET-CPOS>
	       <PUT .BUF ,INITIAL-HPOS <14 .OUTCHAN>>)>
	<REPEAT GETSTRACT (CHR CP BEF)
		#DECL ((CHR) CHARACTER (CP) <OR FALSE VECTOR>
		       (BEF) <OR FALSE ATOM APPLICABLE>
		       (GETSTRACT) <SPECIAL ACTIVATION>)
		<SET CHR <DO-INPUT .S>>			 ;"Read a char"
		<SET CP <SPECIAL-CHAR? .CHR .CHRTABLE>>
		<COND (<SET BEF ,BUF-ECHO-FLAG>		    ;"Special echoing?"
		       <COND (<TYPE? .BEF FIX>		 ;"Rubout n characters"
			      <SETG BUF-ECHO-FLAG <>>
			      <ERASE-CHARS .BEF>
			      <COND (<NOT .CP>
				     <DO-OUTPUT .S .CHR T>)>)
			     (T
			      <COND (<TYPE? .BEF ATOM> <SET BEF ,.BEF>)>
			      <COND (<APPLICABLE? .BEF>
				     <APPLY .BEF .CHR .BUF .OUTCHAN>)
				    (<ERROR>)>)>)
		      (<NOT .CP>
		       <END-DELETION .BUF>
		       <DO-OUTPUT .S .CHR T>)>
		<COND (.CP <APPLY <2 .CP> .BUF .CHR>)
		      (T
		       <ADDCHR .BUF .CHR>)>>
	<SAVE-KILL .BUF <>>
	<OFF .GETSTR-CHAND>				 ;"GET RID OF CHAR FCN"
	<OFF .GETSTR-HAND>			        ;"GET RID OF ERROR FCN"
	<TTY-RESET .S>					 ;"RESTORE TTY"
	<OR <0? <TCURSX .S>> <FRESH-LINE .S>>
	.BUF>

"Returns either false or a vector rested down to the char in question."

<DEFINE SPECIAL-CHAR? (CHR CHRTABLE) 
	#DECL ((CHR) CHARACTER (CHRTABLE) <OR VECTOR <LIST [REST VECTOR]>>)
	<COND (<TYPE? .CHRTABLE VECTOR> <MEMQ .CHR .CHRTABLE>)
	      (T
	       <MAPF <>
		     <FUNCTION (CT "AUX" TEMP) 
			     #DECL ((CT) VECTOR)
			     <COND (<SET TEMP <MEMQ .CHR .CT>>
				    <MAPLEAVE .TEMP>)>>
		     .CHRTABLE>)>>

\ 

"SUBTITLE WORD AND LINE DELETION"

<DEFINE START-DELETION (BUF) 
	#DECL ((BUF) BUFFER)
	<COND (<NOT <BDELETING .BUF>>
	       <BDELETING .BUF T>
	       <COND (<NOT ,DISPLAY?> <DO-OUTPUT ,STREAM !\/ T>)>)>>

<DEFINE END-DELETION (BUF) 
	#DECL ((BUF) BUFFER)
	<COND (<BDELETING .BUF>
	       <BDELETING .BUF <>>
	       <COND (<NOT ,DISPLAY?> <DO-OUTPUT ,STREAM !\/ T>)>)>>

<DEFINE DWORD (BUF CHR) 
	#DECL ((BUF) BUFFER (CHR) CHARACTER (VALUE) FIX)
	<DELTOCH .BUF ,WORDBRKS>>

<DEFINE DLINE (BUF CHR) 
	#DECL ((BUF) BUFFER (CHR) CHARACTER (VALUE) FIX)
	<END-DELETION .BUF>
	<DELTOCH .BUF ,LINEBRKS " XXX?">>

<DEFINE QUOTECHR (BUF CHR "AUX" TC (S ,STREAM)) 
	#DECL ((BUF VALUE) BUFFER (CHR) CHARACTER (TC) FIX (STREAM) TTY)
	<END-DELETION .BUF>
	<DO-OUTPUT .S .CHR T>		    ;"Print the ctrl-Q"
	<SET CHR <DO-INPUT .S>>			     ;"get a character"
	<ERASE-CHARS 2>					    ;"Flush the ctrl-Q"
	<DO-OUTPUT .S .CHR T>	  ;"Print the quoted character"
	<ADDCHR .BUF .CHR>>

<DEFINE ADDCRLF (BUF CHR "AUX" (S ,STREAM)) 
	#DECL ((BUF VALUE) BUFFER (CHR) CHARACTER (S) TTY)
	<END-DELETION .BUF>
	<DO-OUTPUT .S "
" T>
	<COND (<BUF-BITS .BUF ,BUF-BIT-PROMPT>
	       <DO-OUTPUT .S <BPRMPT1 .BUF>>
	       <DO-OUTPUT .S <BPRMPT2 .BUF>>)>
	<ADDCHR .BUF !\>
	<ADDCHR .BUF !\
>						 ;"LF">

\ 

"SUBTITLE DELETION"

<DEFINE DELCHR (BUF "AUX" (LSTR <LENGTH <1 .BUF>>) (PTR <2 .BUF>)) 
	#DECL ((VALUE) <OR FALSE CHARACTER> (BUF) BUFFER (LSTR) FIX
	       (PTR) STRING)
	<COND (<NOT <0? <- <LENGTH .PTR> .LSTR>>>
	       <PUT .BUF 2 <SET PTR <BACK .PTR>>>
	       <START-DELETION .BUF>
	       <DO-ERASE .BUF <1 .PTR>>
	       <COND (<AND <==? <1 .PTR> <ASCII 10> ;"Char L.F.">
			   <L? <LENGTH .PTR> .LSTR>
			   <==? <1 <BACK .PTR>> <ASCII 13> ;"Char C.R.">>
		      <PUT .BUF 2 <SET PTR <BACK .PTR>>>
		      <DO-ERASE .BUF <1 .PTR>>)>
	       <1 .PTR>)>>

<DEFINE IDELCHR (BUF CHR) 
	#DECL ((BUF) BUFFER (CHR) CHARACTER (VALUE) <OR FALSE CHARACTER>)
	<DELCHR .BUF>>

<DEFINE DO-ERASE (BUF CHR "AUX" (S ,STREAM)) 
	#DECL ((BUF) BUFFER (CHR VALUE) CHARACTER (S) TTY)
	<COND (,DISPLAY?
	       <COND (<OR <==? .CHR <ASCII 8>>			  ;"bs"
			  <==? .CHR <ASCII 9>>>			 ;"tab"
		      <HPOS-BUF .S .BUF>
		      <CLEAR-EOL .S>)
		     (<==? .CHR <ASCII 10>>			  ;"lf"
		      <COND (<BUF-BITS .BUF ,BUF-BIT-PROMPT>
			     <SAVE-CURSOR .S>
			     <HOR-POS-CURSOR .S 0>
			     <CLEAR-EOL .S>
			     <RESTORE-CURSOR .S>)>
		      <UP-CURSOR .S>)
		     (<==? .CHR <ASCII 13>> <HPOS-BUF .S .BUF>)
		     (T
		      <ERASE-CHAR .S>
		      <COND (<AND <L=? <ASCII .CHR> 31>
				  <N==? .CHR <ASCII 27>	  ;"Char Alt">>
			     <ERASE-CHAR .S>)>)>)
	      (ELSE <DO-OUTPUT .S .CHR T>)>
	.CHR>

<DEFINE ERASE-CHARS (N "AUX" (S ,STREAM)) 
	#DECL ((N) FIX (S) TTY)
	<COND (,DISPLAY?
	       <REPEAT ()
		       <COND (<L=? .N 0> <RETURN>)>
		       <ERASE-CHAR .S>
		       <SET N <- .N 1>>>)>
	T>

<DEFINE BACKS (S1 S2 "AUX" (ST <TOP .S1>)) 
	#DECL ((S1 S2 ST) STRING (VALUE) <OR STRING FALSE>)
	<COND (<==? .ST .S1> <>)
	      (<REPEAT (C)
		       #DECL ((C) CHARACTER)
		       <SET C <1 <SET S1 <BACK .S1>>>>
		       <AND <MEMQ .C .S2> <RETURN .S1>>
		       <AND <==? .ST .S1> <RETURN <>>>>)>>

<DEFINE HPOS-BUF (TTY BUF "OPTIONAL" (SOFT-TAB T) "AUX" SCR (N 0)) 
	#DECL ((BUF) BUFFER (SOFT-TAB) <OR ATOM FALSE> (SCR) <OR FALSE STRING>
	       (N VALUE) FIX)
	<SET SCR <BACKS <2 .BUF> "">>				  ;"back to cr"
	<COND (.SCR
	       <SET SCR <REST .SCR>>				     ;"rest cr"
	       <COND (<BUF-BITS .BUF ,BUF-BIT-PROMPT>
		      <SET N <+ <LENGTH <BPRMPT1 .BUF>>
				<LENGTH <BPRMPT2 .BUF>>>>)>)
	      (ELSE <SET SCR <1 .BUF>> <SET N <INITIAL-HPOS .BUF>>)> ;"no cr's"
	<REPEAT (C (LEN <- <LENGTH .SCR> <LENGTH <2 .BUF>>>))
		#DECL ((LEN) FIX (C) FIX)
		<COND (<0? .LEN>
		       <RETURN <HOR-POS-CURSOR .TTY .N>>)>
		<SET C <ASCII <1 .SCR>>>
		<COND (<OR <AND <G=? .C 32> <N==? .C 177>> <==? .C 27>>
		       <SET N <+ .N 1>>)
		      (<==? .C 8>					  ;"bs"
		       <SET N <- .N 1>>)
		      (<==? .C 9>					 ;"tab"
		       <COND (.SOFT-TAB			      ;"simulated tabs"
			      <SET N <+ .N <- 8 <MOD .N 8>>>>)
			     (ELSE <SET N <+ .N 1>>)>)
		      (<==? .C 10>			      ;"lf -- 0 WIDTH")
		      (ELSE <SET N <+ .N 2>>)>
		<SET LEN <- .LEN 1>>
		<SET SCR <REST .SCR>>>>

\ 

<DEFINE BUFCLEAR (BUF)
	#DECL ((BUF VALUE) BUFFER)
	<PUT .BUF 2 <1 .BUF>>>

<DEFINE IBUFCLEAR (BUF CHR) 
	#DECL ((BUF VALUE) BUFFER (CHR) CHARACTER)
	<END-DELETION .BUF>
	<BUFCLEAR .BUF>
	<FRESH-LINE ,STREAM>
	<BUFPRINT .BUF>
	.BUF>

<DEFINE IBUFPRINT (BUF CHR "AUX" (OUTCHAN .OUTCHAN) (S ,STREAM)) 
	#DECL ((OUTCHAN) CHANNEL (BUF) BUFFER (CHR) CHARACTER (S) TTY
	       (VALUE) FIX)
	<END-DELETION .BUF>
	<COND (<=? .CHR !\> <CLEAR-SCREEN .S>) (ELSE <DO-OUTPUT .S .CHR T>)>
	<FRESH-LINE .S>
	<BUFPRINT .BUF .OUTCHAN T T>>

<DEFINE LAST-LINE (BUF CHR
		   "AUX" (OUTCHAN .OUTCHAN) (S ,STREAM) (STR <BCUR .BUF>)
		   	 (LEN 0) (UP 0) (OSTR <BSTR .BUF>) (FIRST? <>)
			 NS)
	#DECL ((OUTCHAN) CHANNEL (BUF) BUFFER (CHR) CHARACTER (S) TTY
	       (OSTR STR) STRING (UP LEN) FIX (FIRST?) <OR ATOM FALSE>)
	<END-DELETION .BUF>
	<COND (<N==? .STR .OSTR>
	       <COND (<MEMQ <1 <SET STR <BACK .STR>>> "
">
		      <SET LEN 1>
		      <SET UP 1>
		      <COND (<AND <N==? .STR .OSTR>
				  <MEMQ <1 <BACK .STR>> "
">>
			     <SET LEN 2>
			     <SET STR <BACK .STR>>)>)
		     (<SET STR <REST .STR>>)>
	       <COND (<SET NS <BACKS .STR "
">>
		      <SET STR <REST .NS>>
		      <SET LEN <- <LENGTH .STR> <LENGTH <BSTR .BUF>>>>)
		     (T
		      <SET FIRST? T>
		      <SET STR .OSTR>
		      <SET LEN <BUFLENGTH .BUF>>)>)
	      (<SET FIRST? T>)>
	<COND (,DISPLAY?
	       <COND (<NOT <0? .UP>> <UP-CURSOR .S>)>
	       <HOR-POS-CURSOR .S 0>
	       <CLEAR-EOL .S>
	       <COND (.FIRST?
		      <COND (<SET NS <BACKS <REST <BPRMPT2 .BUF>
						  <LENGTH <BPRMPT2 .BUF>>> "
">>
			     <DO-OUTPUT .S <REST .NS>>)
			    (<SET NS <BACKS <REST <BPRMPT1 .BUF>
						  <LENGTH <BPRMPT1 .BUF>>> "
">>
			     <DO-OUTPUT .S <REST .NS>>
			     <DO-OUTPUT .S <BPRMPT2 .BUF>>)
			    (T
			     <DO-OUTPUT .S <BPRMPT1 .BUF>>
			     <DO-OUTPUT .S <BPRMPT2 .BUF>>)>)>)
	      (T
	       <FRESH-LINE .S>
	       <COND (.FIRST?
		      <DO-OUTPUT .S <BPRMPT1 .BUF>>
		      <DO-OUTPUT .S <BPRMPT2 .BUF>>)>)>
	<COND (<NOT <0? .LEN>> <DO-OUTPUT .S .STR <> .LEN>)>>

\ 

"SUBTITLE INPUT FILE TO BUFFER"

<DEFINE FILEINP (BUF "OPTIONAL" CHR
		 "AUX" (S ,STREAM) FIL FL LST CH PTR (OUTCHAN .OUTCHAN))
	#DECL ((VALUE BUF BB) BUFFER (CHR) CHARACTER
	       (CH) <OR <FALSE STRING> CHANNEL>
	       (ANYTOK) <OR FALSE ATOM> (PTR) STRING (LST) FIX
	       (FIL) <OR FALSE STRING> (S) TTY (FL) <OR FIX FALSE>
	       (OUTCHAN) CHANNEL)
    <PROG ()
	  <TTY-RESET .S>
	  <END-DELETION .BUF>
	  <FRESH-LINE .S>
	  <COND (<SET FIL <GET-FILE "File-name: ">>
		 <COND (<AND <SET CH <OPEN "READ" .FIL>>
			     <SET FL <FILE-LENGTH .CH>>>
			<COND (<G? .FL <LENGTH <2 .BUF>>>
			       <BUFGROW .BUF <- .FL <LENGTH <2 .BUF>> -100>>)>
			<SET PTR <2 .BUF>>
			<COND (<SET LST <READSTRING .PTR .CH .FL>>
			       <PUT .BUF 2 <REST .PTR .LST>>)>
			<CLOSE .CH>
			<DO-OUTPUT .S "[DONE]">)
		       (ELSE
			<PRINT .FIL>
			<DO-OUTPUT .S <1 .CH>>
			<FRESH-LINE .S>
			<AGAIN>)>)
		(<==? <LENGTH .FIL> 2>
		 <COND (<==? <2 .FIL> 197211>
			<DO-OUTPUT .S "[File-Input Aborted]">)
		       (ELSE
			<DO-OUTPUT .S <1 .FIL>>)>)>
	  <TTY-SETUP .S>>
    .BUF>

<DEFINE ADDFILE (BF CH
		 "OPTIONAL" (N -1)
		 "AUX" (S <2 .BF>) (L <LENGTH .S>) (FL <FILE-LENGTH .CH>)
		       (ACC <17 .CH>))
	#DECL ((VALUE BF) BUFFER (CH) CHANNEL (S) STRING (FL) <OR FIX FALSE>
	       (ACC L N) FIX)
	<COND (<NOT .FL>			     ;"directory 'files', etc."
	       <REPEAT ((M 0) (I 0) (S <ISTRING 100>))
		       #DECL ((M I) FIX (S) STRING)
		       <SET M <READSTRING .S .CH 100 0>>	   ;"read some"
		       <COND (<L? .M 100>		        ;"read it all?"
			      <RESET .CH>			   ;"re-access"
			      <REPEAT ()
				      <COND (<L=? .ACC 100>
					     <READSTRING .S .CH .ACC>
					     <RETURN>)>
				      <SET ACC <- .ACC 100>>
				      <READSTRING .S .CH>>
					    ;"reads and throws away characters"
			      <RETURN <SET FL <+ .M .I>>>)>
		       <SET I <+ .M .I>>	    ;"count over iterations">)>
	<COND (<OR <L? .N 0> <G? .N .FL>> <SET N .FL>)>	     ;"# chars to read"
	<COND (<L? .L .N>				     ;"not enough room"
	       <SET S <2 <BUFGROW .BF .N>>>)>
	<SET N <READSTRING .S .CH .N 0>>		        ;"do real read"
	<PUT .BF 2 <REST .S .N>>			 ;"set buffer 'access'"
	.BF>

\ 

<DEFINE PADDSTRING (BUF STR) 
	#DECL ((BUF) BUFFER (STR) STRING)
	<ADDSTRING .BUF .STR>
	<DO-OUTPUT ,STREAM .STR>
	<GET-CPOS>
	.BUF>

<DEFINE ADDSTRING (BF "TUPLE" STRS "AUX" L) 
	#DECL ((VALUE BF) BUFFER
	       (STRS) <TUPLE [REST <OR STRING CHARACTER FIX>]> (L) FIX)
	<REPEAT (ST N RST?)
		#DECL ((ST N) <OR CHARACTER FIX STRING> (RST?) <OR ATOM
								   FALSE>)
		<COND (<EMPTY? .STRS> <RETURN>)>
		<SET RST? <>>
		<SET L <LENGTH <2 .BF>>>
		<COND (<TYPE? <SET ST <1 .STRS>> STRING>
		       <COND (<AND <G? <LENGTH .STRS> 1>
				   <TYPE? <SET N <2 .STRS>> FIX>
				   <G=? .N 0>
				   <L=? .N <LENGTH .ST>>>
			      <SET RST? T>)
			     (<SET N <LENGTH .ST>>)>
		       <COND (<G? .N .L> <BUFGROW .BF <MAX .N ,BUFSIZE>>)>
		       <PUT .BF 2 <REST <SUBSTRUC .ST 0 .N <2 .BF>> .N>>)
		      (<TYPE? .ST CHARACTER> <ADDCHR .BF .ST>)
		      (<ERROR ARG-WRONG-TYPE!-ERRORS .STRS ADDSTRING>)>
		<SET STRS <REST .STRS <COND (.RST? 2) (T 1)>>>>
	.BF>

<DEFINE ADD-OFFSET-STRING (BF STR OFFS
			   "AUX" (CLEN <LENGTH <2 .BF>>) (SLEN <LENGTH .STR>)
				 (OLEN <LENGTH .OFFS>))
	#DECL ((BF) BUFFER (STR OFFS) STRING (CLEN SLEN OLEN) FIX)
	<SET SLEN <+ .SLEN <* .OLEN </ .SLEN 50>>>>	 ;"Approximate # lines"
	<COND (<G? <SET CLEN <+ ,BUFSIZE <- .SLEN .CLEN>>> 0>
	       <BUFGROW .BF .CLEN>)>				  ;"Make space"
	<REPEAT ((NS .STR))
		#DECL ((NS) <OR STRING FALSE>)
		<COND (<EMPTY? .STR> <RETURN>)
		      (<SET NS <MEMBER "
" .STR>>
		       <COND (<N==? .NS .STR> <ADDSTRING .BF .OFFS>)>
		       <ADDSTRING .BF
				  .STR
				  <+ 2 <- <LENGTH .STR> <LENGTH .NS>>>>
		       <SET STR <REST .NS 2>>)
		      (T <ADDSTRING .BF .STR> <RETURN>)>>
	.BF>

\ 

"SUBTITLE CHARACTER TABLE"

<SET CHRTABLE
     [!\
      ,BUFTECO
      !\
      ,BUFTECO
      !\
      ,FILEINP
      !\
      ,IDELCHR
      <ASCII 13>
      ,ADDCRLF
      <ASCII 12>
      ,IBUFPRINT
      !\
      ,IBUFPRINT
      !\
      ,UNKILL
      !\
      ,QUOTECHR
      !\
      ,LAST-LINE
      !\
      <FUNCTION (BUF CHR) <RETURN .BUF .GETSTRACT>>
      !\
      ,DLINE
      !\
      ,DWORD
      !\
      ,DLINE
      <ASCII 0>
      ,IBUFCLEAR]>

<ENDPACKAGE>
