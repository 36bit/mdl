"(c) Copyright 1978 Massachusetts Institute of Technology.  All Rights Reserved."

<PACKAGE "ASYLUM">  

<ENTRY ASYLUM
       MANIAC
       EXTEND-FILE
       DATA-ERRORS
       DATA-NON-FATAL-ERRORS
       OPEN-DATA-FILE
       FLUSH-DATA-FILE
       CLOSE-DATA-FILE
       RESET-DATA-FILE
       DATA-UNLOCK
       ALLOC-UNLOCK
       ALLOC-MAP
       DATA-READ-WORD
       DATA-WRITE-WORD
       DATA-AUTHOR-WORD
       DATA-CDATE
       DATA-RDATE
       DATA-AUTHOR
       DATA-USE
       DATA-PUT
       DATA-FIND
       DATA-OPEN
       DATA-PRINTW
       DATA-READW
       DATA-RESERVE
       DATA-AREAD
       DATA-IREAD
       DATA-APRINT
       DATA-IPRINT
       DATA-ACCESS
       DATA-RESET
       DATA-READB
       DATA-PRINTB
       DATA-BLOCK
       DATA-CHAIN-SALVAGE
       DATA-CLOSE
       DATA-DELETE
       DATA-RENAME
       DATA-BLOCK-FREE
       NAMDATA
       NAME-BLOCK-FREE
       DATA-EXTEND-PAGES
       DHLOCK
       DSLOCK
       DUNLOCK
       ITSUNLOCK
       DATA-LOCK-TRIES
       DATA-LOCK-SLEEP
       DIR-INIT
       MFD-INIT
       ALLOC-INIT
       GET-LOC
       PUT-LOC
       GET-LOC-X
       DATREAD
       DATWRITE
       DIRMAP
       MAP-PAGE
       UNMAP-PAGE
       NAME-FIND
       NAME-FIND-DELETE
       NAME-FIND-ADD
       PRINTMODE
       PRINTWMODE
       READMODE
       READNRMODE>  

<USE-DEFER "MADMAN" "TENXIO"> 
 
<SETG P/L 6>   
 
<SETG DIRID 4> 
 
<FLOAD "MADMAN;AALLOC NBIN">  
 
<FLOAD "MADMAN;NMHACK NBIN">  
 
<SETG DPGLOCK 0>    
 
<SETG DINITRQ 1>    
 
<SETG DINITDN 2>    
 
<SETG ALLOCPTR 3>   
 
<SETG ALLOCLOCK 4>  
 
<SETG HIGHADR 5>    
 
<SETG MAXADR 6>
 
<SETG IDCHAIN 2>    
 
<SETG HIGHID 1>
 
<SETG FREEBLOCKS 9> 
 
<SETG DIRPTRS 10>   
 
<SETG PGLOCKS 64>   
 
<SETG DIRMAX <* <- ,PGLOCKS ,DIRPTRS 1> 1024>>
;"DIRECTORY DEFINITIONS"   
 
<SETG OBJSTART 7>   
 
<SETG OBJLENGTH 4>  
 
<SETG DIRSIZE </ <- 1023 ,OBJSTART> ,OBJLENGTH>>
;"ALLOCATION TABLE DEFINITIONS"    
 
<SETG MAXALLDIF 20> 
 
<SETG FIRSTALLOC 1021>
;"NAME BLOCK DEFINITIONS" 
 
<SETG NAMBLKLEN 4>  
 
<SETG NAMHDR <IUVECTOR ,NAMBLKLEN #WORD *000000000000*>>    
 
<PUT ,NAMHDR 1 #WORD *777777777777*>    
 
<SETG NAMLOCK 0>    
 
<SETG NAMDATA 1>    

<SETG NAMCHNCDR 2>  
 
<SETG NAMMISC 3>
;"DATA BLOCK DEFINITIONS"  
 
<SETG DATHDRLEN 5>  
 
<SETG DATHDR <IUVECTOR ,DATHDRLEN #WORD *000000000000*>>    
 
<SETG DATUSE 0>
 
<SETG DATREF 1>
 
<SETG DATCHNCDR 2>  
 
<SETG DATCRT 3>
 
<SETG DATLEN 4>
;"ASYLUM DEFINITIONS"  
 
<SETG DSKCHAN 1>    
 
<SETG MFDPAGE 2>    
 
<SETG ALLOCPAGE 3>  
 
<SETG HASHPAGE 4>   
 
<SETG DIRPAGEMAP 5> 
 
<SETG ALLOCFLG 6>   
 
<SETG PAGEMAP 7>    
 
<SETG DIRPAGE 8>
;"DISK FILE PAGE CONVENTIONS"   
 
<SETG DSKMFDPAGE 0> 
 
<SETG DSKALLOCPAGE 1>    
 
<SETG LRUCOUNT 0>   
 
"MODE DEFINITIONS"  
 
<SETG PRINTMODE 1>  
 
<SETG PRINTWMODE 2> 
 
<SETG READMODE 3>   
 
<SETG READNRMODE 4> 

<MANIFEST DATUSE
	  DATCRT
	  DATCHNCDR
	  DATREF
	  DATLEN
	  NAMLOCK
	  NAMDATA
	  NAMCHNCDR
	  NAMUNUSED
	  MAXALLDIF
	  FIRSTALLOC
	  DSKCHAN
	  MFDPAGE
	  ALLOCPAGE
	  DIRPAGEMAP
	  DIRPAGE
	  DSKMFDPAGE
	  DSKALLOCPAGE
	  DIRSIZE
	  DIRMAX
	  OBJSTART
	  OBJLENGTH
	  PGLOCKS
	  LASTDIR
	  HIGHADR
	  MAXADR
	  IDCHAIN
	  HIGHID
	  ALLOCFLG
	  P/L
	  PLH
	  DIRID
	  DIRPTRS
	  DINITRQ
	  DINITDN
	  DPGLOCK
	  ALLOCLOCK
	  ALLOCPTR
	  PRINTMODE
	  PRINTWMODE
	  READMODE
	  READNRMODE>  
 
<NEWTYPE ASYLUM
	 VECTOR
	 '<<PRIMTYPE VECTOR> CHANNEL
			     FIX
			     FIX
			     <OR UVECTOR FIX>
			     UVECTOR
			     FIX
			     UVECTOR
			     VECTOR>>  

<NEWTYPE MANIAC
	 VECTOR
	 '<<PRIMTYPE VECTOR> FIX
			     FIX
			     FIX
			     FIX
			     FIX
			     FIX
			     <OR FIX STRING>
			     FIX>>   
 
<PRINTTYPE MANIAC
	   <FUNCTION (X) 
		   <PRINC "#MANIAC ">
		   <PRINC <COND (<==? <7 .X> 0> <1 .X>) (<7 .X>)>>
		   <PRINC " ">>>    
 
<GDECL (MODEVCT)
       <VECTOR [REST STRING FIX]>
       (DATA-READ-WORD DATA-WRITE-WORD DATA-AUTHOR-WORD)
       WORD
       (SPARE-IDS)
       <VECTOR [REST <OR MANIAC FALSE>]>
       (DUV1)
       <UVECTOR [1 WORD]>
       (DUV2)
       <UVECTOR [2 WORD]>
       (NAMUV NAMZUV DATUV)
       <UVECTOR [REST WORD]>
       (DATA-NON-FATAL-ERRORS)
       <UVECTOR [REST FIX]>
       (DATA-ERRORS)
       <VECTOR [REST STRING]>>
 
<SETG MODEVCT
      <VECTOR "PRINT"
	      ,PRINTMODE
	      "READ"
	      ,READMODE
	      "PRINTW"
	      ,PRINTWMODE
	      "READNR"
	      ,READNRMODE>> 
 
<SETG DATA-READ-WORD
  <SETG DATA-AUTHOR-WORD
	<SETG DATA-WRITE-WORD #WORD *000000000000*>>>   
 
<SETG SPARE-IDS <IVECTOR 2 <>>>    
 
<SETG DUV1 <IUVECTOR 1 #WORD *000000000000*>>
 
<SETG DUV2 <IUVECTOR 2 #WORD *000000000000*>>
 
<SETG NAMUV <IUVECTOR ,NAMBLKLEN #WORD *000000000000*>>
 
<SETG NAMZUV <IUVECTOR ,NAMBLKLEN #WORD *000000000000*>>    
 
<PUT ,NAMZUV 1 #WORD *777777777777*>    

<SETG DATUV <IUVECTOR ,DATHDRLEN #WORD *000000000000*>>
 
<SETG DATA-ERRORS
      ["CANT OPEN DATA FILE"
       "ILLEGAL FILE NAME"
       "ILLEGAL ASYLUM"
       "MODE NOT AVAILABLE"
       "FILE LOCKED"
       "ALLOCATOR LOCKED"
       "CANT GET ALLOCATION PAGE"
       "FILE NOT FOUND"
       "DATA AREA FULL OR LOCKED"
       "ATTEMPT TO ACCESS PAST END OF FILE"
       "ATTEMPT TO READ PAST END OF FILE"
       "ATTEMPT TO FLUSH LOCKED DIRECTORY"
       "MEANINGLESS ARGS"
       "ATTEMPT TO ALLOCATE ON READ ONLY MANIAC"
       "DEALLOCATION OUT OF RANGE"
       "INTERNAL INCONSISTENCY"
       "NOT LOCKED"
       "PAGE AREA FULL"]> 
 
<SETG DATA-NON-FATAL-ERRORS ![5 6 9 12 15 17!]>   
 
<DEFINE OPEN-DATA-FILE (FNAME
			"OPTIONAL" (NEW <>) (CACHE 4) (DIRCACHE 2)
			"AUX" (DCHAN <COND (.NEW) (<IVECTOR 8 0>)>) (DPT ,ALLOC-TABLE)
			      CH FJFN HIPAGE)
	#DECL ((FNAME) STRING (NEW) <OR ASYLUM FALSE> (DIRCACHE CACHE) FIX
	       (CH) <OR FALSE CHANNEL> (FJFN) JFN (DCHAN) <<PRIMTYPE VECTOR> [7 ANY]>
	       (DPT) <UVECTOR [8 <PRIMTYPE WORD>]> (HIPAGE) <OR FIX FALSE>)
	<COND (<COND (<G=? ,MUDDLE 100>
		      <AND <SET FJFN <GET-FILE .FNAME 0>>
			   <OPEN-FILE .FJFN #WORD *440000302000*>
			   <SET CH <CHANNEL "PRINTB" .FNAME>>
			   <PUT .CH 1 <CHTYPE .FJFN FIX>>>)
		     (<SET CH <OPEN "READ" .FNAME>>)>
	       <COND (<NOT .NEW>
		      <PUT .DCHAN 7 <PAGE-GRAB .CACHE .DPT>>
		      <PUT .DCHAN 5 <PAGE-GRAB .DIRCACHE .DPT>>
		      <OR <SET HIPAGE <APGFIND -1 3 .DPT>>
			  <AND <ARESERVE 3 .DPT> <SET HIPAGE <APGFIND -1 3 .DPT>>>
			  <ERROR NO-MORE-PAGES!-ERRORS ARESERVE 3 .DPT>>
		      <PUT .DCHAN ,DIRPAGE [<+ .HIPAGE 2> -1]>
		      <PUT .DCHAN ,MFDPAGE .HIPAGE>
		      <PUT .DCHAN ,ALLOCPAGE <+ .HIPAGE 1>>
		      <PUT .DCHAN ,HASHPAGE .DPT>)
		     (T
		      <FLUSH-DATA-FILE .DCHAN <>>
		      <SET HIPAGE <MFDPAGE .DCHAN>>
		      <PUT <DIRPAGE .DCHAN> 2 -1>
		      <PUT .DCHAN ,HASHPAGE .DPT>
		      <PUT .DCHAN ,ALLOCFLG 0>)>
	       <PUT .DCHAN 1 .CH>
	       <COND (<AND <MAP-PAGE .CH ,DSKMFDPAGE .HIPAGE> <MFD-INIT .DCHAN>>
		      <CHTYPE .DCHAN ASYLUM>)>)
	      (T #FALSE (1))>>  

<DEFINE CACHE-CLEAR (UVEC "OPTIONAL" (GIVE <>) "AUX" (10XFLG <G? ,MUDDLE 100>)) 
	#DECL ((UVEC) <UVECTOR [REST FIX]> (10XFLG GIVE) <OR 'T FALSE>)
	<REPEAT ()
		<AND <EMPTY? .UVEC> <RETURN <TOP .UVEC>>>
		<AND .10XFLG
		     <G? <1 .UVEC> 0>
		     <G? <2 .UVEC> 0>
		     <UNMAP-PAGE <2 .UVEC>>>
		<AND .10XFLG .GIVE <MADMAN-PAGE-GIVE <2 .UVEC>>>
		<PUT .UVEC 1 -1>
		<PUT .UVEC 3 0>
		<PUT .UVEC 4 0>
		<SET UVEC <REST .UVEC 4>>>>  
 
<DEFINE PAGE-GRAB (CACHE DPT "AUX" CPG) 
	#DECL ((CACHE) FIX (DPT) <UVECTOR [REST WORD]> (CPG) <OR FIX FALSE>)
	<COND (<OR <SET CPG <APGFIND -1 .CACHE .DPT>>
		   <AND <ARESERVE .CACHE .DPT>
			<SET CPG <APGFIND -1 .CACHE .DPT>>>>
	       <REPEAT ((UV <IUVECTOR <* .CACHE 4> 0>))
		       #DECL ((UV) <UVECTOR [REST FIX]>)
		       <PUT .UV 2 .CPG>
		       <PUT .UV 1 -1>
		       <SET CPG <+ .CPG 1>>
		       <SET UV <REST .UV 4>>
		       <AND <EMPTY? .UV> <RETURN <TOP .UV>>>>)
	      (<ERROR NO-MORE-PAGES!-ERRORS ARESERVE .CACHE .DPT .CPG>)>>    
 
<DEFINE FLUSH-DATA-FILE (ASY "OPTIONAL" (GIVE T)) 
	#DECL ((ASY) ASYLUM (GIVE) <OR FALSE 'T>)
	<PUT .ASY 5 <CACHE-CLEAR <5 .ASY> .GIVE>>
	<PUT .ASY 7 <CACHE-CLEAR <7 .ASY> .GIVE>>
	<COND (<G? ,MUDDLE 100>
	       <AND <G? <1 <8 .ASY>> 0>
		    <UNMAP-PAGE <1 <8 .ASY>>>
		    .GIVE
		    <MADMAN-PAGE-GIVE <1 <8 .ASY>>>>
	       <AND <G? <MFDPAGE .ASY> 0>
		    <UNMAP-PAGE <MFDPAGE .ASY>>
		    .GIVE
		    <MADMAN-PAGE-GIVE <MFDPAGE .ASY>>>
	       <AND <G? <ALLOCPAGE .ASY> 0>
		    <UNMAP-PAGE <ALLOCPAGE .ASY>>
		    .GIVE
		    <MADMAN-PAGE-GIVE <ALLOCPAGE .ASY>>>
	       <AND <TYPE? <HASHPAGE .ASY> FIX>
		    <G? <HASHPAGE .ASY> 0>
		    <UNMAP-PAGE <HASHPAGE .ASY>>
		    .GIVE
		    <MADMAN-PAGE-GIVE <HASHPAGE .ASY>>>)>
	<AND <G? <1 <1 .ASY>> 0> <CLOSE <1 .ASY>>>
	.ASY>
 
<DEFINE CLOSE-DATA-FILE (DC) #DECL ((DC) ASYLUM) <OR <G=? ,MUDDLE 100> <CLOSE <1 .DC>>>>  
<DEFINE RESET-DATA-FILE (DC) #DECL ((DC) ASYLUM) <AND <RESET <1 .DC>> .DC>>


<DEFINE DIR-FIND (DC ID
		  "OPTIONAL" (NEWDIR <>)
		  "AUX" DIRECT DIRNUM DIRLOC MFDNUM MFDLOC (UV1 ,DUV1)
			(MFD <MFDPAGE .DC>) M (LOSING <>) (TRY ,DATA-LOCK-TRIES)
			(SLP ,DATA-LOCK-SLEEP) DLOC)
   #DECL ((DC) ASYLUM (DIRECT DLOC MFD ID DIRNUM MFDNUM TRY SLP) FIX
	  (LOSING NEWDIR) <OR FALSE 'T> (UV1) <UVECTOR [1 WORD]> (M) <OR FALSE UVECTOR>
	  (MFDLOC) FIX (DIRLOC) <OR FIX FALSE>)
   <PROG (TEMP)
     #DECL ((TEMP) <OR FALSE FIX>)
     <COND
      (<L=? <SET DIRECT </ .ID ,DIRSIZE>> ,DIRMAX>
       <SET MFDNUM </ .DIRECT 1024>>
       <SET DIRNUM <MOD .DIRECT 1024>>
       <COND (<==? .MFDNUM <2 <DIRPAGE .DC>>>)
	     (<SET MFDLOC
		   </ <CHTYPE <1 <GET-LOC <+ <* .MFD 1024> ,DIRPTRS .MFDNUM> .UV1>>
			      FIX>
		      1024>>
	      <COND (<0? .MFDLOC>
		     <COND (.NEWDIR
			    <COND (<SET TEMP 
					<DATA-ALLOC .DC 
					    <CHTYPE <ORB *440000000000* .MFDNUM> FIX>>>
				   <SET MFDLOC </ .TEMP 1024>>)
				  (<SET LOSING T>)>)
			   (<SET LOSING T>)>)>
	      <COND (<NOT .LOSING>
		     <PGWRITE <1 <DIRPAGE .DC>>>
		     <AND <G? ,MUDDLE 100> <UNMAP-PAGE <1 <DIRPAGE .DC>>>>
		     <MAP-PAGE <1 .DC> .MFDLOC <1 <DIRPAGE .DC>>>
		     <PUT <DIRPAGE .DC> 2 .MFDNUM>)>)>
       <SET DIRLOC
	    </ <CHTYPE <1 <GET-LOC <+ <* <1 <DIRPAGE .DC>> 1024> .DIRNUM> .UV1>>
		       FIX>
	       1024>>
       <COND (.LOSING #FALSE (2))
	     (<AND <0? .DIRLOC> <NOT .NEWDIR>> #FALSE (2))
	     (<AND <0? .DIRLOC>
		   <SET DLOC
			<DATA-ALLOC .DC <CHTYPE <ORB *420000000000* .DIRECT> FIX>>>
		   <SET DIRLOC </ .DLOC 1024>>
		   <>>)
	     (<AND <SET DIRLOC <DIRMAP .DC .DIRLOC>>
		   <DIR-INIT .DIRLOC>
		   <SET M <DMEMQ .DIRLOC <DIRPAGEMAP .DC>>>>
	      <AND .NEWDIR <PUT .M 3 <+ <3 .M> 1>>>
	      .DIRLOC)
	     (<L=? <SET TRY <- .TRY 1>> 0>
		#FALSE (12))
	     (<SLEEP </ .SLP 1000.0>>
	      <AGAIN>)>)>>>    

<DEFINE DATA-PUT (DC ID DUV "AUX" DL WD) 
	#DECL ((DC) ASYLUM (DL) <OR FIX FALSE> (ID DIRLOC MFD) FIX
	       (DUV) <UVECTOR [4 WORD]> (WD) WORD)
	<COND (<NOT <0? <MFDPAGE .DC>>>
	       <COND (<SET DL <DIR-FIND .DC .ID>>
		      <COND (<AND <SET WD <1 <GET-LOC <+ ,DIRID <* 1024 .DL>> ,DUV1>>>
				  <==? <GETBITS .WD <BITS 18 18>> #WORD *000000777777*>
				  <==? <CHTYPE <GETBITS .WD <BITS 18 0>> FIX>
				       </ .ID ,DIRSIZE>>>
			     <PUT-LOC <DATA-LOC1 .DL .ID> .DUV>)
			    (<ERROR BAD-DIRECTORY-POINTER!-ERRORS .DC .ID .DUV .DL>)>)
		     (T #FALSE (2))>)
	      (T #FALSE (3))>>
 
<DEFINE DATA-FIND (DC ID "OPTIONAL" (PRT <>) "AUX" DL (DUV ,NAMUV)) 
	#DECL ((DC) ASYLUM (ID DIRLOC MFD) FIX (DUV) <UVECTOR [4 WORD]>
	       (DL) <OR FIX FALSE> (PRT) <OR 'T FALSE>)
	<COND (<NOT <0? <MFDPAGE .DC>>>
	       <COND (<SET DL <DIR-FIND .DC .ID .PRT>>
		      <GET-LOC <DATA-LOC1 .DL .ID> .DUV>)>)
	      (T #FALSE (3))>>
 
<DEFMAC DATA-LOC1 ('DL 'ID) 
	<FORM +
	      ,OBJSTART
	      <FORM * .DL 1024>
	      <FORM * <FORM MOD .ID ,DIRSIZE> ,OBJLENGTH>>>    
 
<DEFMAC DATA-LOC ('DC 'ID) 
	<FORM +
	      ,OBJSTART
	      <FORM * <FORM DIR-FIND .DC .ID> 1024>
	      <FORM * <FORM MOD .ID ,DIRSIZE> ,OBJLENGTH>>>

<DEFINE DATA-OPEN (MODE DC IDX
		   "AUX" ID (NUV ,NAMUV) (DUV ,DATUV) (UV2 ,DUV2) LOC VCT (MODEFIX 0)
			 PMODE? RESULT)
   #DECL ((ID) <OR MANIAC FALSE> (MODE) <OR STRING FIX> (MODEFIX) FIX
	  (IDX) <OR FIX STRING> (DC) ASYLUM (LOC) WORD
	  (NUV) <OR FALSE <UVECTOR [4 WORD]>> (UV2) <UVECTOR [2 WORD]>
	  (DUV) <UVECTOR [5 WORD]> (VCT) <OR <VECTOR [REST STRING FIX]> FALSE>
	  (RESULT PMODE?) ANY)
   <COND (<TYPE? .MODE FIX> <SET MODEFIX .MODE>)
	 (<SET VCT <MEMBER .MODE ,MODEVCT>> <SET MODEFIX <2 .VCT>>)>
   <COND
    (<AND <==? <PRIMTYPE .IDX> WORD>
	  <L? <CHTYPE .IDX FIX> 0>
	  <N=? .MODEFIX ,PRINTMODE>>
     #FALSE (4))
    (<NOT <MEMQ .MODEFIX ,MODEVCT>> #FALSE (4))
    (<SET ID
	  <GEN-ID .DC
		  .IDX
		  <COND (<SET PMODE?
			      <OR <==? .MODEFIX ,PRINTMODE> <==? .MODEFIX ,PRINTWMODE>>>
			 1)
			(0)>>>
     <SET RESULT
	  <COND (<SET NUV <DATA-FIND .DC <1 .ID> .PMODE?>>
		 <COND (<AND <0? <SET IDX <CHTYPE <NTH .NUV <+ 1 ,NAMDATA>> FIX>>>
			     <OR <==? .MODEFIX ,READMODE> <==? .MODEFIX ,READNRMODE>>>
			#FALSE (8))
		       (<AND .PMODE? <NOT <DHLOCK <DATA-LOC .DC <1 .ID>>>>>
			#FALSE (5))
		       (T
			<PUT .ID 6 0>
			<PUT .ID 4 0>
			<PUT .ID
			     3
			     <COND (<0? .IDX>
				    0)
				   (<+ .IDX ,DATHDRLEN>)>>
			<PUT .ID 5 <3 .ID>>
			<OR <0? <3 .ID>>
			    <PUT .ID
				 2
				 <CHTYPE <NTH <DATREAD .DC
						       ,DATHDRLEN
						       <- <3 .ID> ,DATHDRLEN>
						       .DUV>
					      <+ 1 ,DATLEN>>
					 FIX>>>
			<COND (<=? .MODEFIX ,PRINTMODE> <PUT .ID 6 -1>)
			      (<=? .MODEFIX ,PRINTWMODE> <PUT .ID 4 1>)
			      (<OR <=? .MODEFIX ,READMODE> <=? .MODEFIX ,READNRMODE>>
			       <SET LOC <NTH .NUV <+ ,NAMDATA 1>>>
			       <PUT <DATREAD .DC 2 .LOC .UV2>
				    1
				    <CHTYPE <+ 1 <CHTYPE <1 .UV2> FIX>> WORD>>
			       <OR <=? .MODEFIX ,READNRMODE>
				   <PUT .UV2 2 ,DATA-READ-WORD>>
			       <DATWRITE .DC 2 .LOC .UV2>
			      <AND <0? <3 .ID>> <PUT .ID 2 0>>
			       .ID)>)>)>>
     <COND (.RESULT) (T <REL-ID .ID> .RESULT)>)>>  
 
<DEFINE DATA-CDATE (DC ID "OPTIONAL" (WHR ,DATCRT) "AUX" (UV1 ,DUV1)) 
	#DECL ((DC) ASYLUM (ID) MANIAC (UV1) <UVECTOR [1 WORD]> (WHR) FIX)
	<COND (<0? <3 .ID>> #FALSE (19))
	      (<1 <DATREAD .DC 1 <+ <- <3 .ID> ,DATHDRLEN> .WHR> .UV1>>)>>  
 
<DEFINE DATA-RDATE (DC ID) 
    	#DECL ((DC) ASYLUM (ID) MANIAC)
	<DATA-CDATE .DC .ID ,DATREF>>  
 
<DEFINE DATA-USE (DC ID) 
	#DECL ((DC) ASYLUM (ID) MANIAC)
	<DATA-CDATE .DC .ID ,DATUSE>>    
 
<DEFINE DATA-AUTHOR (DC ID)
	#DECL ((DC) ASYLUM (ID) MANIAC)
	<DATA-CDATE .DC .ID ,DATCHNCDR>>

<DEFINE DATA-PRINTW (DC ID WD "AUX" NUV) 
	#DECL ((ID) <OR STRING MANIAC FALSE FIX> (DC) ASYLUM (WD) <PRIMTYPE WORD>
	       (NUV) <UVECTOR [4 WORD]>)
	<COND (<OR <TYPE? .ID MANIAC>
		   <SET ID <DATA-OPEN "PRINTW" .DC .ID>>>
	       <SET NUV <DATA-FIND .DC <1 .ID>>>
	       <DATA-PUT .DC
			 <1 .ID>
			 <PUT .NUV <+ 1 ,NAMMISC> <CHTYPE .WD WORD>>>
	       <DATA-CLOSE .DC .ID>
	       .ID)>> 
 
<DEFINE DATA-READW (DC IDX "AUX" NUV) 
	#DECL ((IDX) <OR FALSE STRING FIX> (DC) ASYLUM (NUV) <UVECTOR [4 WORD]>)
	<COND (<AND <TYPE? .IDX STRING>
		    <NOT <SET IDX <NAME-FIND .DC .IDX>>>>
	       .IDX)
	      (<SET NUV <DATA-FIND .DC .IDX>> <NTH .NUV <+ 1 ,NAMMISC>>)>>    

<DEFINE DATA-RESERVE (DC NUM
		      "AUX" (MFD <* <MFDPAGE .DC> 1024>) LO (ALLOCK <+ ,ALLOCLOCK .MFD>)
			    (UV1 ,DUV1)
			    (ALL <AND <ALLOC-MAP .DC> <* <ALLOCPAGE .DC> 1024>>) TEMP)
	#DECL ((LO NUM ALLOCK MFD) FIX (DC) ASYLUM (UV1) <UVECTOR [1 WORD]> (ALL) FIX
	       (TEMP) <OR FALSE MANIAC>)
	<COND (<1? .NUM> <AND <SET TEMP <GEN-ID .DC -1 1>> <1 .TEMP>>)
	      (<UNWIND <COND (<DHLOCK .ALLOCK>
			      <SET LO <CHTYPE <1 <GET-LOC <+ ,HIGHID .ALL> .UV1>> FIX>>
			      <PUT-LOC <+ ,HIGHID .ALL>
				       <PUT .UV1 1 <CHTYPE <+ .LO .NUM> WORD>>>
			      <DUNLOCK .ALLOCK>
			      <+ .LO 1>)>
		       <DUNLOCK .ALLOCK>>)>>    
 
<DEFINE NEW-ID (DC
		"AUX" (ALL <AND <ALLOC-MAP .DC> <* <ALLOCPAGE .DC> 1024>>) (UV1 ,DUV1)
		      ID ID1 FU)
	#DECL ((DC) ASYLUM (ID) FIX (UV1) <UVECTOR [1 WORD]> (DUV) <UVECTOR [4 WORD]>
	       (ID1) ANY (ALL) FIX (FU) <OR <UVECTOR [4 WORD]> FALSE>)
	<COND (<G=? <SET ID <CHTYPE <1 <GET-LOC <+ ,IDCHAIN .ALL> .UV1>> FIX>>
		    0>
	       <SET ID1 <GET-LOC <+ ,HIGHID .ALL> .UV1>>
	       <SET ID <+ <CHTYPE <1 .UV1> FIX> 1>>
	       <PUT-LOC <+ ,HIGHID .ALL> <PUT .UV1 1 <CHTYPE .ID WORD>>>)
	      (T
	       <SET FU
		    <DATA-FIND .DC
			       <SET ID <CHTYPE <ANDB #WORD *007777777777* .ID> FIX>>>>
	       <SET ID1 <NTH .FU <+ 1 ,NAMCHNCDR>>>
	       <PUT-LOC <+ ,IDCHAIN .ALL> <PUT .UV1 1 .ID1>>
	       <DATA-PUT .DC .ID <PUT .FU 3 #WORD *000000000000*>>)>
	.ID>   

<DEFINE GEN-ID (DC NAME PRT "AUX" IDT FNM NM
			 (ALLOCK <+ <* 1024 <MFDPAGE .DC>> ,ALLOCLOCK>)) 
	#DECL ((DC) ASYLUM (NAME) <OR FIX STRING> 
	       (FNM NM) <OR FIX FALSE> (IDT) MANIAC (PRT ALLOCK) FIX)
	<COND (<MAPR <>
		     <FUNCTION (V) 
			     #DECL ((V) <VECTOR [REST <OR MANIAC FALSE>]>)
			     <COND (<TYPE? <1 .V> MANIAC>
				    <SET IDT <1 .V>>
				    <PUT .V 1 <>>
				    <MAPLEAVE .IDT>)>>
		     ,SPARE-IDS>)
	      (<SET IDT <CHTYPE <IVECTOR 8 0> MANIAC>>)>
	<SET NM
	     <COND (<AND <TYPE? .NAME FIX> <G? .NAME 0>> .NAME)
		   (<AND <TYPE? .NAME STRING> <0? .PRT>>
		    <NAME-FIND .DC .NAME>)
		   (T
		    <UNWIND <COND (<DHLOCK .ALLOCK>
				   <SET FNM
					<COND (<TYPE? .NAME FIX> <NEW-ID .DC>)
					      (<NAME-FIND-ADD .DC .NAME>)>>
				   <DUNLOCK .ALLOCK>
				   .FNM)
				  (T '#FALSE (6))>
			    <AND <DUNLOCK .ALLOCK> <>>>)>>
	<PUT .IDT 7 <COND (<TYPE? .NAME STRING> .NAME) (0)>>
	<AND .NM <PUT .IDT 1 .NM>>>    
 
<DEFINE REL-ID (ID "AUX" VCT) 
	#DECL ((ID) MANIAC (VCT) <OR <VECTOR FALSE> FALSE>)
	<COND (<SET VCT <MEMQ #FALSE () ,SPARE-IDS>> <PUT .VCT 1 .ID>)>
	.ID>   
 
<DEFINE DATA-ALLOC (DC AMT "AUX" VAL (S ,DATA-LOCK-SLEEP) (T ,DATA-LOCK-TRIES)) 
	#DECL ((DC) ASYLUM (AMT T S) FIX (VAL) <OR FALSE FIX>)
	<PROG ()
	      <COND (<ALLOC-MAP .DC>
		     <COND (<SET VAL <DATALLOC .DC .AMT>>)
			   (<EMPTY? .VAL> .VAL)
			   (<==? <1 .VAL> 9>
			    <COND (<L=? <SET T <- .T 1>> 0>
				   .VAL)
			    	  (<SLEEP </ .S 1000.0>>
				   <AGAIN>)>)>)>>>  
 
<DEFINE ALLOC-MAP (DC) 
	#DECL ((DC) ASYLUM)
	<COND (<NOT <0? <ALLOCFLG .DC>>>)
	      (<COND (<MAP-PAGE <DSKCHAN .DC> ,DSKALLOCPAGE <ALLOCPAGE .DC>>
		      <PUT .DC ,ALLOCFLG -1>)
		     (T #FALSE (7))>)>>   
 
<DEFINE DATA-AREAD (DC IDX SPC "OPTIONAL" (SPD 3) (CHN T) "AUX" ID DAT) 
	#DECL ((DC) ASYLUM (ID) <OR FALSE MANIAC> (SPD) FIX (IDX) <OR STRING FIX>
	       (DAT) ANY (SPC) SPACE (CHN) <OR 'T FALSE>)
	<COND (<SET ID <DATA-OPEN "READ" .DC .IDX>>
	       <COND (<SET DAT <DATA-IREAD .DC .ID .SPC .SPD .CHN>>
		      <DATA-CLOSE .DC .ID>
		      .DAT)>)>> 

<DEFINE DATA-IREAD (DC ID SPC "OPTIONAL" (SPD 3) (CHN T)) 
	#DECL ((ID) MANIAC (DC) ASYLUM (SPC) SPACE (SPD) FIX (CHN) <OR FALSE 'T>)
	<COND (<0? <CHTYPE <3 .ID> FIX>> #FALSE (8))
	      (<AREAD .SPC .DC <CHTYPE <3 .ID> FIX> .SPD .CHN>)>>    
 
<DEFINE DATA-APRINT (DC IDX SPC OBJ "OPTIONAL" (FIXUP <>) "AUX" ID LOSS) 
	#DECL ((DC) ASYLUM (IDX) <OR STRING FIX> (SPC) SPACE
	       (FIXUP) <OR 'T FALSE> (OBJ LOSS) ANY (ID) <OR FALSE MANIAC>)
	<COND (<SET ID <DATA-OPEN "PRINT" .DC .IDX>>
	       <COND (<SET LOSS <DATA-IPRINT .DC .ID .SPC .OBJ .FIXUP>>
		      <DATA-CLOSE .DC .ID>
		      .ID)
		     (<DATA-CLOSE .DC .ID> .LOSS)>)>>
 
<DEFINE DATA-IPRINT (DC ID SPC OBJ "OPTIONAL" (FIXUP <>) "AUX" DACC SIZE) 
	#DECL ((ID) MANIAC (DC) ASYLUM (SPC) SPACE (OBJ) ANY (SIZE) FIX
	       (DACC) <OR FALSE FIX> (FIXUP) <OR FALSE 'T>)
	<SET SIZE
	     <CHTYPE <GETBITS <ALENGTH .SPC> <BITS 18 0>> FIX>>
	<COND (<SET DACC <DATA-BLOCK .DC .ID .SIZE>>
	       <UNWIND <APRINT .SPC .OBJ .DC .DACC .FIXUP> <PUT .ID 4 0>>
	       .ID)>>  
 
<DEFINE DATA-ACCESS (DC ID WHR) 
	#DECL ((ID) MANIAC (DC) ASYLUM (WHR) FIX)
	<COND (<G? .WHR <2 .ID>> #FALSE (10))
	      (<PUT .ID 5 <+ <3 .ID> .WHR>>)>>   
 
<DEFINE DATA-RESET (DC ID) #DECL ((ID) MANIAC (DC) ASYLUM) <DATA-ACCESS .DC .ID 0>>  
 
<DEFINE DATA-READB (DC ID UV "OPTIONAL" (HMNY 0) (PRT <>) (LOSS <>)) 
	#DECL ((UV) <OR UVECTOR <PRIMTYPE WORD>> (ID) MANIAC (DC) ASYLUM (HMNY) FIX
	       (PRT LOSS) <OR 'T FALSE>)
	<COND (<AND <==? <PRIMTYPE .UV> WORD> <0? .HMNY>> #FALSE (4))
	      (T
	       <AND <TYPE? .UV UVECTOR>
		    <0? .HMNY>
		    <SET HMNY <LENGTH .UV>>>
	       <COND (<AND <SET LOSS <G? <+ .HMNY <5 .ID>> <+ <3 .ID> <2 .ID>>>>
			   .PRT>
		      #FALSE (11))
		     (.PRT
		      <DATWRITE .DC .HMNY <5 .ID> .UV>
		      <PUT .ID 5 <+ .HMNY <5 .ID>>>
		      .HMNY)
		     (T
		      <AND .LOSS <SET HMNY <- <+ <3 .ID> <2 .ID>> <5 .ID>>>>
		      <DATREAD .DC .HMNY <5 .ID> .UV>
		      <PUT .ID 5 <+ .HMNY <5 .ID>>>
		      .HMNY)>)>>   
 
<DEFINE DATA-PRINTB (DC ID UV "OPTIONAL" (HMNY 0)) 
	#DECL ((UV) <OR UVECTOR <PRIMTYPE WORD>> (ID) MANIAC (DC) ASYLUM (HMNY) FIX)
	<DATA-READB .DC .ID .UV .HMNY T>>    

<DEFINE DATA-BLOCK (DC ID SIZE "AUX" DACC PTR) 
	#DECL ((DC) ASYLUM (SIZE PTR) FIX (ID) MANIAC (DACC) <OR FALSE FIX>)
	<COND (<L=? .SIZE 0> #FALSE (13))
	      (<0? <6 .ID>> #FALSE (14))
	      (<SET DACC <DATA-ALLOC .DC .SIZE>>
	       <SET PTR <+ .DACC ,DATHDRLEN>>
	       <PUT .ID 2 .SIZE>
	       <PUT .ID 3 .PTR>
	       <PUT .ID 4 -1>
	       <PUT .ID 5 .PTR>
	       .PTR)>>   
 
<DEFINE DATA-CHAIN-SALVAGE (DC
			    "AUX" (MFD <* <MFDPAGE .DC> 1024>) (UV1 ,DUV1) (DUV ,DATUV)
				  (ALLOCK <+ .MFD ,ALLOCLOCK>))
	#DECL ((DC) ASYLUM (MFD ALLOCK) FIX (UV1) <UVECTOR [1 WORD]>
	       (DUV) <UVECTOR [5 WORD]>)
	T>
;<SET CHAIN <1 <GET-LOC <+ ,FREEBLOCKS .MFD> .UV1>>>   
 
<DEFINE DATA-BLOCK-FREE (DC LOC
			 "OPTIONAL" (LOCKED <>)
			 "AUX" (MFD <* <MFDPAGE .DC> 1024>) (DUV ,DATUV) CHAIN
			       (ALLOCK <+ ,ALLOCLOCK .MFD>) (UV1 ,DUV1))
	#DECL ((DC) ASYLUM (LOC MFD ALLOCK) FIX (LOCKED) <OR 'T FALSE>
	       (UV1) <UVECTOR [1 WORD]> (CHAIN) <PRIMTYPE WORD>
	       (DUV) <UVECTOR [5 WORD]>)
	<DATREAD .DC ,DATHDRLEN .LOC .DUV>
	<COND (<AND <0? <CHTYPE <NTH .DUV <+ ,DATUSE 1>> FIX>>
		    <DATA-DEALLOC .DC
				  <CHTYPE <NTH .DUV <+ ,DATLEN 1>> FIX>
				  .LOC
				  .LOCKED>>)
	      (<SET CHAIN <1 <GET-LOC <+ ,FREEBLOCKS .MFD> .UV1>>>
	       <PUT .DUV <+ ,DATUSE 1> #WORD *000000000000*>
	       <DATWRITE .DC
			 ,DATHDRLEN
			 .LOC
			 <PUT .DUV <+ ,DATCHNCDR 1> .CHAIN>>
	       <UNWIND <COND (<OR .LOCKED <DHLOCK .ALLOCK>>
			      <PUT-LOC <+ ,FREEBLOCKS .MFD>
				       <PUT .UV1 1 <CHTYPE .LOC WORD>>>
			      <COND (<NOT .LOCKED>
				     <PGWRITE <MFDPAGE .DC>>
				     <DUNLOCK .ALLOCK>)>)>
		       <PROG ()
			     <COND (<NOT .LOCKED>
				    <PGWRITE <MFDPAGE .DC>>
				    <DUNLOCK .ALLOCK>)>>>)>>    
 
<DEFINE DATA-DEALLOC (DC AMT LOC "OPTIONAL" (LOCK <>)) 
	#DECL ((DC) ASYLUM (AMT LOC) FIX (LOCK) <OR 'T FALSE>)
	<AND <ALLOC-MAP .DC>
	     <COND (.LOCK <SALVDEALLOC .DC .AMT .LOC>)
		   (<DATDEALLOC .DC .AMT .LOC>)>>>   

<DEFINE DATA-CLOSE (DC ID "AUX" (HDR ,NAMHDR) DAT OLDLOC PG (UV1 ,DUV1)
		    		(NAM <1 .ID>)) 
	#DECL ((ID) MANIAC (DC) ASYLUM (HDR) <UVECTOR [4 WORD]> 
	       (OLDLOC) <PRIMTYPE WORD> (DAT) <OR FALSE UVECTOR> (PG NAM) FIX
	       (UV1) <UVECTOR [1 WORD]>)
	<COND
	 (<==? <3 .ID> -1> .ID)
	 (<SET DAT <DATA-FIND .DC .NAM>>
	  <SET OLDLOC <NTH .DAT <+ ,NAMDATA 1>>>
	  <COND (<0? <4 .ID>>
		 <DATWRITE .DC
			   1
			   .OLDLOC
			   <PUT <DATREAD .DC 1 .OLDLOC .UV1>
				1
				<CHTYPE <- 1 <CHTYPE <1 .UV1> FIX>> WORD>>>
		 <COND (<L? <6 .ID> 0>
			<DPGMAP-UNLOCK <DIR-FIND .DC .NAM> .DC>
			<DUNLOCK <DATA-LOC .DC .NAM>>)>)
		(<1? <4 .ID>>
		 <PGWRITE <COND (<==? <7 .ID> 0>
				 <SET PG <DIR-FIND .DC .NAM>>
				 <DPGMAP-UNLOCK .PG .DC>
				 .PG)
				(<HASHPAGE .DC>)>>
		 <DUNLOCK <DATA-LOC .DC .NAM>>)
		(T
		 <PGUNLOCK <MFDPAGE .DC> <+ <2 .ID> ,DATHDRLEN> <3 .ID>>
		 <PGFLUSH .DC <+ <2 .ID> ,DATHDRLEN> <3 .ID>>
		 <DUNLOCK <DATA-LOC .DC .NAM>>
		 <PUT .HDR
		      <+ 1 ,NAMDATA>
		      <CHTYPE <- <3 .ID> ,DATHDRLEN> WORD>>
		 <PUT .HDR
		      <+ 1 ,NAMCHNCDR>
		      <CHTYPE <+ <CHTYPE <2 .ID> FIX> ,DATHDRLEN> WORD>>
		 <PUT .HDR 1 <CHTYPE -1 WORD>>
		 <PUT .HDR 4 <4 .DAT>>
		 <DATA-PUT .DC .NAM .HDR>
		 <PGWRITE <ALLOCPAGE .DC>>
		 <PGWRITE <COND (<==? <7 .ID> 0>
				 <SET PG <DIR-FIND .DC .NAM>>
				 <DPGMAP-UNLOCK .PG .DC>
				 .PG)
				(<HASHPAGE .DC>)>>
		 <COND (<0? <CHTYPE .OLDLOC FIX>>)
		       (<DATA-BLOCK-FREE .DC <CHTYPE .OLDLOC FIX>>)>)>
	  <PUT .ID 3 -1>
	  <REL-ID .ID>
	  .ID)
	 (T #FALSE (8))>>  

<DEFINE DPGMAP-UNLOCK (PG DC "AUX" TEMP)
    #DECL ((PG) FIX (DC) ASYLUM (TEMP) UVECTOR)
    <PUT <SET TEMP <DMEMQ .PG <DIRPAGEMAP .DC>>>
	 3
	 <- <3 .TEMP> 1>>>


<DEFINE PGFLUSH (DC NUM WHR "AUX" LO HI) 
	#DECL ((NUM WHR LO HI) FIX (DC) ASYLUM)
	<SET LO </ .WHR 1024>>
	<SET HI </ <+ .WHR .NUM> 1024>>
	<REPEAT ((TBL <PAGEMAP .DC>))
		<COND (<EMPTY? .TBL> <RETURN>)
		      (T
		       <AND <G=? <1 .TBL> .LO>
			    <L=? <1 .TBL> .HI>
			    <PGWRITE <2 .TBL>>
			    <PUT .TBL 4 0>>
		       <SET TBL <REST .TBL 4>>)>>>
 
<DEFINE DATA-DELETE (DC IDX "AUX" LOC) 
	#DECL ((DC) ASYLUM (IDX) <OR STRING FIX> (LOC) <OR FIX FALSE>)
	<AND <SET LOC <NAME-BLOCK-FREE .DC .IDX>>
	     <DATA-BLOCK-FREE .DC .LOC>>> 
 
<DEFINE NAME-BLOCK-FREE (DC IDX
			 "AUX" (ZERO ,NAMZUV) DUV (MFD <* <MFDPAGE .DC> 1024>) (LOC <>)
			       (ALL <AND <ALLOC-MAP .DC> <* <ALLOCPAGE .DC> 1024>>)
			       (ALLOCK <+ .MFD ,ALLOCLOCK>) (UV1 ,DUV1) CHNCAR)
	#DECL ((DC) ASYLUM (IDX) <OR FALSE STRING FIX> (ZERO) <UVECTOR [4 WORD]>
	       (ALL ALLOCK MFD) FIX (UV1) <UVECTOR [1 WORD]> (LOC) <OR FIX FALSE>
	       (DUV) <OR FALSE <UVECTOR [REST WORD]>> (CHNCAR) <PRIMTYPE WORD>)
	<UNWIND <COND (<DHLOCK .ALLOCK>
		       <COND (<AND <TYPE? .IDX STRING>
				   <NOT <SET IDX <NAME-FIND-DELETE .DC .IDX>>>>)
			     (<AND <SET DUV <DATA-FIND .DC .IDX>>
				   <N==? <SET LOC
					      <CHTYPE <NTH .DUV <+ ,NAMDATA 1>> FIX>>
					 0>>
			      <SET CHNCAR <1 <GET-LOC <+ .ALL ,IDCHAIN> .UV1>>>
			      <DATA-PUT .DC .IDX <PUT .ZERO <+ 1 ,NAMCHNCDR> .CHNCAR>>
			      <PUT-LOC <+ .ALL ,IDCHAIN>
				       <PUT .UV1 1 <ORB #WORD *400000000000* .IDX>>>
			      <SET IDX .LOC>)
			     (<SET IDX '#FALSE (8)>)>
		       <DUNLOCK .ALLOCK>
		       .IDX)
		      (T #FALSE (6))>
		<DUNLOCK .ALLOCK>>>  
 
<DEFINE DATA-RENAME (DC IDX1 IDX2 "AUX" ID NUV LEN LOC) 
	#DECL ((IDX1 IDX2) <OR FIX FALSE STRING> (LEN LOC) FIX (DC) ASYLUM
	       (ID) <OR FALSE MANIAC> (NUV) <UVECTOR [4 WORD]>)
	<COND (<AND <TYPE? .IDX1 STRING>
		    <NOT <SET IDX1 <NAME-FIND .DC .IDX1>>>>
	       .IDX1)
	      (<AND <SET NUV <DATA-FIND .DC .IDX1>>
		    <SET LEN <CHTYPE <NTH .NUV <+ 1 ,NAMCHNCDR>> FIX>>
		    <SET LOC <CHTYPE <NTH .NUV <+ 1 ,NAMDATA>> FIX>>
		    <SET ID <DATA-OPEN "PRINT" .DC .IDX2>>>
	       <PUT .ID 2 <- .LEN ,DATHDRLEN>>
	       <PUT .ID 3 <+ .LOC ,DATHDRLEN>>
	       <DATA-CLOSE .DC .ID>
	       <NAME-BLOCK-FREE .DC .IDX1>
	       .ID)>>  

<DEFINE DMEMQ (DIR MAP) 
	#DECL ((DIR) FIX (MAP) <UVECTOR [REST FIX]>)
	<REPEAT ()
		<COND (<EMPTY? .MAP> <RETURN <>>)
		      (<==? <2 .MAP> .DIR> <RETURN <REST .MAP>>)
		      (<SET MAP <REST .MAP 4>>)>>>    
 
<DEFINE DATA-UNLOCK (DC IDX "AUX" DAT) 
	#DECL ((DC) ASYLUM (IDX) <OR FALSE STRING FIX> (DAT) <OR UVECTOR FALSE>)
	<COND (<TYPE? .IDX STRING> <SET IDX <NAME-FIND .DC .IDX>>)>
	<COND (.IDX
	       <SET DAT <DATA-FIND .DC .IDX>>
	       <COND (<==? <1 .DAT> #WORD *000000000000*>
		      <PUT .DAT 1 #WORD *777777777777*>
		      <DATA-PUT .DC .IDX .DAT>)
		     (T #FALSE (17))>)>>  
 
<DEFINE ALLOC-UNLOCK (DC) 
	#DECL ((DC) ASYLUM)
	<COND (<==? <1 <GET-LOC <+ <* <MFDPAGE .DC> 1024> ,ALLOCLOCK> ,DUV1>>
		    #WORD *000000000000*>
	       <PUT-LOC <+ <* <MFDPAGE .DC> 1024> ,ALLOCLOCK>
			<PUT ,DUV1 1 #WORD *777777777777*>>)
	      (T #FALSE (17))>>   
 
"New version:  copies file (we assume only one person is doing any writes,
which is currently valid in the case of comsys), adding specified # of
pages at end, then updates allocator and such."
<DEFINE EXTEND-FILE (DC BLKS "OPTIONAL" (UV <IUVECTOR 1024 0>) "AUX" CHN NCHN (N .BLKS)) 
	#DECL ((DC) ASYLUM (NCHN) <OR FALSE CHANNEL> (CHN) CHANNEL
	       (N BLKS) FIX (UV) <UVECTOR [REST FIX]>)
	<SET CHN <DSKCHAN .DC>>
	<CLOSE-DATA-FILE .DC>
	<COND (<SET NCHN <OPEN "PRINTB" <7 .CHN> <8 .CHN> <9 .CHN> <10 .CHN>>>
	       <PUT .CHN 2 "READB">
	       <RESET .CHN>
	       <REPEAT ((CT </ <FILE-LENGTH .CHN> <LENGTH .UV>>))
	         #DECL ((CT) FIX)
		 <READB .UV .CHN>
		 <PRINTB .UV .NCHN>
		 <COND (<0? <SET CT <- .CT 1>>>
			<COND (<NOT <0? <1 .CHN>>>
			       <CLOSE .CHN>)>
			<RETURN>)>>	; "Copy"
	       <MAPR <>
	         <FUNCTION (X) <PUT .X 1 0>>
		 .UV>
	       <REPEAT ()
	         <PRINTB .UV .NCHN>
		 <COND (<0? <SET N <- .N 1>>> <RETURN>)>>	; "New blocks"
	       <FORCE .NCHN>					; "Prevent crash?"
	       <MAP-PAGE .NCHN 1 <ALLOCPAGE .DC>>		; "Allocator page map in"
	       <MAP-PAGE .NCHN 0 <MFDPAGE .DC>>			; "Asylum page"
	       <ALLOC-UPDATE .DC .BLKS>			; "Hack the asylum"
	       <PGWRITE <ALLOCPAGE .DC>>
	       <PGWRITE <MFDPAGE .DC>>
	       <CLOSE .NCHN>
	       <DUNLOCK <+ ,ALLOCLOCK <* 1024 <MFDPAGE .DC>>>>	; "Unlock the allocator.  Will re-lock when fall back into allocation code."
	       <OPEN-DATA-FILE <STRING <9 .NCHN> !\: <10 .NCHN> !\;
				       <7 .NCHN> !\  <8 .NCHN>>
			       .DC>)>>

<ENDPACKAGE>   
 
