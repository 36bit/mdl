<USE "LSTHLP" "LIST2" "TABLES">

"*FIX:
  1.MAKE GOOD PRINTTYPE FOR BBLOCKS."

<NEWTYPE MFUNCTION VECTOR
	 '<<PRIMTYPE VECTOR>
	   VARIABLE <LIST [REST <LIST <OR ATOM FALSE>
				      <OR ATOM SEGMENT FORM>>]>
	   MCODE <LIST [REST FORM BBLOCK]>
	   BBLOCK <LIST [REST <UVECTOR [4 LIST]>]> BBLOCK FORWRD
	   <UVECTOR [10 <LIST [REST FORWRD EC]>]> EC
	   <LIST [REST
		  <LIST [REST <LIST EC [REST FORWRD EC]>]>]>
	   <UVECTOR
	    [10 <LIST [REST EC
		       <OR MCODE
			   <LIST [REST
				  <LIST FORWRD>]>>]>]>
	   LIST LIST
	   VARIABLE
	   LIST
	   <OR FORWRD BBLOCK <LIST [REST <OR FORWRD BBLOCK>]>>>>

"OFFSETS FOR MFUNCTION VECTOR"

<PROG ()
      <SETG LAST-SYM 1>
      <SETG VARIABLE-LIST 2>
      <SETG LAST-MCODE 3>
      <SETG MCODE-LIST 4>
      <SETG LAST-BBLOCK 5>
      <SETG BBLOCK-LIST 6>      
      <SETG CURRENT-BBLOCK 7>
      <SETG LAST-REF 8>
      <SETG FORWRD-TABLE 9>
      <SETG LAST-EC 10>
      <SETG EC-LIST 11>
      <SETG EC-VALUES 12>
      <SETG RETURNS 13>
      <SETG AGAINS 14>
      <SETG RETVAR 15>
      <SETG ARGLIST 16>
      <SETG START 17>
      <MANIFEST LAST-SYM VARIABLE-LIST LAST-MCODE MCODE-LIST LAST-BBLOCK
		BBLOCK-LIST CURRENT-BBLOCK LAST-REF FORWRD-TABLE LAST-EC
		EC-LIST EC-VALUES RETURNS AGAINS RETVAR ARGLIST START>>  

<NEWTYPE MCODE WORD>

<DEFINE PRINT-MCODE (MC)
	#DECL ((MC) MCODE)
	<COND (<0? <CHTYPE .MC FIX>>
	       <PRINC "#MCODE 0">
	       <PRINC " ()">)
	      (<G? <CHTYPE .MC FIX> <* 2 <LENGTH <MCODE-LIST ,MFUNCTION>>>>
	       <PRINC "#MCODE">
	       <PRINC !\ >
	       <PRIN1 <CHTYPE .MC FIX>>
	       <PRINC " ()">)
	      (ELSE
	       <PRINC "#MCODE ">
	       <PRIN1 <CHTYPE .MC FIX>>
	       <PRINC !\ >
	       <PRINC !\(>
	       <UNWIND
		<BIND ()
		      <PRINTTYPE BBLOCK ,PRINT-DECIMAL-BBLOCK>
		      <PRIN1 <NTH <MCODE-LIST ,MFUNCTION>
				  <- <* 2 <CHTYPE .MC FIX>> 1>>>
		      <PRINTTYPE BBLOCK ,PRINT-BBLOCK>>
		<PRINTTYPE BBLOCK ,PRINT-BBLOCK>>
	       <PRINC !\)>)>>

<PRINTTYPE MCODE ,PRINT-MCODE> 

<NEWTYPE VARIABLE WORD>

<DEFINE VARIABLE-PRINT (V)
	#DECL ((V) VARIABLE (AT) <OR ATOM FALSE> (VL) LIST)
	<PRINC !\$>
	<PRIN1 <CHTYPE .V FIX>>
	<COND (<AND <NOT <0? <CHTYPE .V FIX>>>
		    <NOT <G? <CHTYPE .V FIX>
			     <LENGTH <SET VL <NTH ,MFUNCTION ,VARIABLE-LIST>>>>>
		    <SET AT <1 <NTH .VL <CHTYPE .V FIX>>>>>
	       <PRINC !\(><PRIN1 .AT><PRINC !\)>)>>

<PRINTTYPE VARIABLE ,VARIABLE-PRINT>

<NEWTYPE FORWRD WORD>

<DEFINE PRINT-FORWRD (FOR)
	#DECL ((FOR) FORWRD)
	<PRINC "#FORWRD ">
	<PRIN1 <CHTYPE .FOR FIX>>>

<PRINTTYPE FORWRD ,PRINT-FORWRD>

<NEWTYPE EC WORD>

<NEWTYPE BBLOCK WORD>

<DEFINE PRINT-BBLOCK (BB) #DECL ((BB) BBLOCK)
	<CRLF>
	<PRINC "#BBLOCK "><PRIN1 <CHTYPE .BB FIX>><PRINC !\:>
	<CRLF>	
	<MAPF <>
	      <FUNCTION (MC) #DECL ((MC) MCODE)
			<PRINC !\	><PRIN1 .MC><CRLF>>
	      <GET-BBLOCK-CODE .BB>>
	<PRINC "SUCCESSORS:	">
	<PRINTTYPE BBLOCK ,PRINT-DECIMAL-BBLOCK>
	<UNWIND <BIND ()
		      <PRIN1 <GET-BBLOCK-SUCCESSORS .BB>>
		      <PRINTTYPE BBLOCK ,PRINT-BBLOCK>>
		<PRINTTYPE BBLOCK ,PRINT-BBLOCK>>>

<DEFINE PRINT-DECIMAL-BBLOCK (BB)
	#DECL ((BB) BBLOCK)
	<PRINC "#BBLOCK ">
	<PRIN1 <CHTYPE .BB FIX>>>
	 
;"***************************MCODE generation and bookkeeping****************" 

<DEFINE MCODIFY (MFORM REF NXT "AUX" SUCCESSOR)
	#DECL ((MFORM) ANY (REF NXT) FORWRD (SUCCESSOR) LIST)
	<COND (<==? <1 .MFORM> GO>
	       <BIND-FORWRD .REF <EMIT .MFORM>>
	       ;"put successor info in current BBLOCK."
	       <APPEND-BBLOCK-SUCCESSORS <CURRENT-BBLOCK ,MFUNCTION>
					 <2 .MFORM>>
	       ;"'end' this BBLOCK, start a new one."
	       <PUT ,MFUNCTION ,CURRENT-BBLOCK <MAKE-BBLOCK>>)
	      (<==? <1 .MFORM> IF>
	       <BIND-FORWRD .REF <EMIT .MFORM>>
	       ;"put T alternative in SUCCESSORS"
	       <APPEND-BBLOCK-SUCCESSORS
		<CURRENT-BBLOCK ,MFUNCTION> 
		<3 .MFORM>>
	       ;"put FALSE alternive in SUCCESSORS"
	       <APPEND-BBLOCK-SUCCESSORS
		<CURRENT-BBLOCK ,MFUNCTION>
		<4 .MFORM>>
	       <PUT ,MFUNCTION ,CURRENT-BBLOCK <MAKE-BBLOCK>>)
	      (<OR <==? <1 .MFORM> MAKE-ACTIVATION>
		   <AND <NOT <LENGTH? .MFORM 2>>
			<TYPE? <3 .MFORM> FORM>
			<==? <1 <3 .MFORM>> MAKE-ACTIVATION>>>
	       <BIND-FORWRD .REF <EMIT .MFORM>>
	       <APPEND-BBLOCK-SUCCESSORS <CURRENT-BBLOCK ,MFUNCTION>
					 .NXT>
	       <PUT ,MFUNCTION ,CURRENT-BBLOCK <MAKE-BBLOCK>>)
	      (ELSE
	       ;"note that .REF refers to the MCODE generated by EMIT."
	       <COND (<AND <==? <1 .MFORM> MSET>
			   <==? <2 .MFORM> #VARIABLE 0>>		      
		      ;"punt the MSET"
		      <SET MFORM <3 .MFORM>>)>
	       <COND (<TYPE? .MFORM FORM>
		      ;"if not, emit nothing."
		      <BIND-FORWRD .REF <EMIT .MFORM>>)>)>
	<COND (<NOT <TYPE? .MFORM FORM>> .MFORM)
	      (<AND <==? <1 .MFORM> MSET>
		    <TYPE? <2 .MFORM> VARIABLE>>
	       <2 .MFORM>)	      
	      (ELSE #VARIABLE 0)>>

<DEFINE EMIT (MFORM "AUX" MC)
	#DECL ((MFORM) FORM (MC) MCODE)
	;"generates and returns an MCODE, also adds it onto current BBLOCK."
	<SET MC <MCODE-APPEND .MFORM>>
	<ADD-TO-BBLOCK-CODE <CURRENT-BBLOCK ,MFUNCTION> .MC>
	.MC> 

<DEFINE MCODE-APPEND (MC)
	#DECL ((VALUE) MCODE (MC) FORM)
	;"record on a global MCODE-LIST for PRINTing and reference purposes."
	;"length of MCODE-LIST should be twice <LAST-MCODE ,MFUNCTION>." 
	<COND (<EMPTY? <MCODE-LIST ,MFUNCTION>>
	       <PUT ,MFUNCTION
		    ,MCODE-LIST
		    (.MC <CURRENT-BBLOCK ,MFUNCTION>)>)
	      (ELSE <PUTREST <REST <MCODE-LIST ,MFUNCTION>
				   <- <LENGTH <MCODE-LIST ,MFUNCTION>> 1>>
			     (.MC <CURRENT-BBLOCK ,MFUNCTION>)>)>
	<BIND (RET)
	      #DECL ((RET) MCODE)
	      <PUT ,MFUNCTION
		   ,LAST-MCODE
		   <SET RET <CHTYPE <+ <CHTYPE <LAST-MCODE ,MFUNCTION> FIX> 1> MCODE>>>
	      .RET>>

<DEFINE SEQUENTIALIZE (MOBJLST RETVAR REF NXT ACT-LIST DEF-ACT MAP-LIST
		       SYMBOLS NLEVEL)
	#DECL ((MOBJLST) LIST (RETVAR) <OR VARIABLE FALSE>
	       (REF NXT) FORWRD (ACT-LIST DEF-ACT MAP-LIST) LIST
	       (SYMBOLS) <LIST [REST SYMBOL-TABLE]> (NLEVEL) FIX)
	;"NXT should not be used."
	<MAPR ,LIST
	      <FUNCTION (RMOB "AUX" (MOBJ <1 .RMOB>)) 
			#DECL ((RMOB) LIST (MOBJ) ANY)
			<MCODE-DISPATCH .MOBJ <>
					.REF
					<COND (<LENGTH? .RMOB 1>
					       .NXT)
					      (ELSE <SET REF <GENREF>>)>
					.ACT-LIST .DEF-ACT .MAP-LIST
					.SYMBOLS .NLEVEL>>
	      .MOBJLST>>

<DEFMAC SCG (OBJ NARGS "AUX" MC)
	#DECL ((NARGS) <OR 'ANY FORM LIST FIX> (OBJ) ATOM (MC) FORM)
	;"NARGS lists legal numbers of arguments. If its a FIX"
	;"that is the only legal number. If a LIST of fixes, those"
	;"are the legal numbers. If 'ANY, any number of arguments is ok."
	;"If it's a FORM, that FORM is used as the predicate."
	;"OBJ is the SUBR to be compiled."
	<SET MC
	     '<COND (<AND <TYPE? .RETVAR VARIABLE><0? <CHTYPE .RETVAR FIX>>>
		     <MCODIFY
		      <FORM <1 .MOBJ>
			    !<SEQUENTIALIZE <REST .MOBJ> <GENSYM>
					    .REF <SET REF <GENREF>>
					    .ACT-LIST .DEF-ACT .MAP-LIST
					    .SYMBOLS .NLEVEL>>
		      .REF .NXT>)
		    (ELSE
		     <COND (<NOT .RETVAR> <SET RETVAR <GENSYM>>)>
		     <MCODIFY
		      <FORM MSET
			    .RETVAR
			    <FORM <1 .MOBJ>
				  !<SEQUENTIALIZE <REST .MOBJ> <GENSYM>
						  .REF <SET REF <GENREF>>
						  .ACT-LIST .DEF-ACT .MAP-LIST
						  .SYMBOLS .NLEVEL>>>
		      .REF .NXT>)>>
	<COND (<N==? .NARGS ANY>
	       <FORM COND (<COND (<TYPE? .NARGS FIX>
				  <FORM ==? '<LENGTH .MOBJ> .NARGS>)
				 (<TYPE? .NARGS LIST>
				  <FORM OR !<MAPF ,LIST
						  <FUNCTION (N)
							    <FORM ==? 
								  '<LENGTH .MOBJ>
								  .N>>
						  .NARGS>>)
				 (<TYPE? .NARGS FORM>
				  .NARGS)>
			   .MC)
			  (ELSE
			   <FORM REPORT-ERROR
				 <PARSE <STRING "WRONG-NUMBER-OF-ARGS-TO-"
						<SPNAME .OBJ>>>
				 MCODE-DISPATCH>)>)
	      (ELSE .MC)>>

<DEFINE MCODE-PUSH (X REF NXT)
	#DECL ((X) ANY (REF NXT) FORWRD)
	<MCODIFY <FORM PUSH .X> .REF .NXT>>

;"hacks for manipulating FORWRDs"	

<DEFINE BIND-FORWRD (FORWRD MCODE "AUX" EC FOR-BUCKET FOR-ENTRY
		     EC-BUCKET EC-ENTRY ECV)
	#DECL ((FORWRD) FORWRD (MCODE) MCODE (EC) EC
	       (FOR-BUCKET) <LIST [REST FORWRD EC]>
	       (FOR-ENTRY) <OR FALSE <LIST [REST FORWRD EC]>>
	       (EC-BUCKET) <LIST [REST EC
				       <OR MCODE
					   <LIST [REST
						  <LIST FORWRD>]>>]>
	       (EC-ENTRY) <OR FALSE
			      <LIST [REST EC
				     <OR MCODE
					 <LIST [REST
						<LIST FORWRD>]>>]>>
	       (ECV) <OR MCODE <LIST [REST <LIST FORWRD>]>>)
	;"this function is called whenever an MCODE is generated. It"
	;"is responsible for associating the MCODE with any FORWRDs"
	;"that may have referred to it. If there have already been some"
	;"references to it, these are replaced by the appropriate BBLOCK."
	;"BIND-FORWRD can create a new BBLOCK if there is a reference to"
	;"the MCODE, under the assumption that this is an entry point." 

	<COND (<SET FOR-ENTRY
		    ;"a list W/ .FORWRD as 1st and its EC second, or false" 
		    <MEM2 .FORWRD
			  <SET FOR-BUCKET
			       <NTH <FORWRD-TABLE ,MFUNCTION>
				    <+ <MOD <CHTYPE .FORWRD FIX> 10> 1>>>>>
	       ;"EC associated with FORWRD"
	       <SET EC <2 .FOR-ENTRY>>
	       ;"bucket from the hash table containing value of EC."	       
	       <SET EC-BUCKET <NTH <EC-VALUES ,MFUNCTION>
				   <+ <MOD <CHTYPE .EC FIX> 10> 1>>>
	       ;"associate EC with MCODE, backpatch if there are references."
	       <COND (<EMPTY? .EC-BUCKET>
		      ;"there aren't any references if bucket is empty!"
		      ;"don't need to backpatch" 
		      <PUT <EC-VALUES ,MFUNCTION>
			   <+ <MOD <CHTYPE .EC FIX> 10> 1>
			   ;"bind EC to MCODE"
			   (.EC .MCODE)>
		      ;"***next is to cause DECL-CHECKING while debugging."
		      <CHTYPE ,MFUNCTION MFUNCTION>)
		     (<SET EC-ENTRY <MEM2 .EC .EC-BUCKET>>
		      ;"then there is an entry for the EC already."
		      <COND (<TYPE? <SET ECV <2 .EC-ENTRY>> MCODE>
			     ;"chomp, chomp!"
			     <ERROR ALREAD-BACKPATCHED .EC .ECV BIND-FORWRD>)
			    ;"backpatching necessary."
			    (<NOT <EMPTY? .ECV>>
			     ;"we have to backpatch pointers to this mcode."
			     ;"if MCODE is not at the beginning of a BBLOCK ,"
			     ;"SPLIT it, because something branches to here."
			     <COND (<N==? .MCODE
				     <1 <GET-BBLOCK-CODE 
					 <CURRENT-BBLOCK ,MFUNCTION>>>>
				    <PUT ,MFUNCTION
					 ,CURRENT-BBLOCK
					 <SPLIT-BBLOCK
					  <CURRENT-BBLOCK ,MFUNCTION>
					  .MCODE>>)>
			     <MAPF <>
				   <FUNCTION (FLIST)
				    #DECL ((FLIST) <LIST FORWRD>)
				    ;"make CURRENT-BBLOCK be successor to"
				    ;"<1 .FLIST>"
				    <PUT .FLIST 1
					 <CURRENT-BBLOCK ,MFUNCTION>>>
				   .ECV>
			     ;"make EC-VALUE of EC be MCODE."
			     <PUT .EC-ENTRY 2 .MCODE>
			     ;"**FOR DECL CHECKING**"
			     <SET EC-ENTRY .EC-ENTRY>)
			    (ELSE <ERROR EMPTY-EC-VALUE? BIND-FORWRD>)>)
		     (ELSE
		      ;"no entry for this EC (MEM2 yielded a FALSE)"
		      <PUTREST <REST .EC-BUCKET <- <LENGTH .EC-BUCKET> 1>>
			       (.EC .MCODE)>
		      ;"**FOR DECL-CHECKING"
		      <SET EC-BUCKET .EC-BUCKET>)>)
	      (ELSE
	       ;"then this FORWRD has not been FORWRD-REFed or SYNONYMIZEd"
	       ;"generate a new EC for it."
	       <SET EC <GENEC>>
	       ;"bind FORWRD to EC"
	       <COND (<EMPTY? .FOR-BUCKET>
		      <PUT <FORWRD-TABLE ,MFUNCTION>
			   <+ <MOD <CHTYPE .FORWRD FIX> 10> 1>
			   <SET FOR-ENTRY (.FORWRD .EC)>>)
		     (ELSE <PUTREST <REST .FOR-BUCKET
					  <- <LENGTH .FOR-BUCKET> 1>>
				    <SET FOR-ENTRY (.FORWRD .EC)>>
		      ;"**FOR DECL-CHECKING**"
		      <SET FOR-ENTRY .FOR-ENTRY>)>
	       ;"it's probably unnecessary, but update backpointers in EC-LIST"
	       ;"note-- assuming no other entries in this EC"
	       <COND (<AND <EMPTY? <EC-LIST ,MFUNCTION>>
			   <1? <CHTYPE .EC FIX>>>
		      <PUT ,MFUNCTION ,EC-LIST ((<REST .FOR-ENTRY>))>)
		     (<==? <LENGTH <EC-LIST ,MFUNCTION>>
			   <- <CHTYPE .EC FIX> 1>>
		      ;"bug check"
		      <PUTREST <REST <EC-LIST ,MFUNCTION>
				     <- <CHTYPE .EC FIX> 2>>
			       ((<REST .FOR-ENTRY>))>
		      ;"**DECL-CHECK**"
		      <CHTYPE ,MFUNCTION MFUNCTION>)
		     (ELSE
		      <ERROR EC-LIST-SCREWED .EC BIND-FORWRD>)>
	       ;"get bucket corresponding to this EC from EC-VALUES table."
	       <SET EC-BUCKET <NTH <EC-VALUES ,MFUNCTION>
				   <+ <MOD <CHTYPE .EC FIX> 10> 1>>>
	       ;"bind EC to MCODE"
	       <COND (<EMPTY? .EC-BUCKET>
		      <PUT <EC-VALUES ,MFUNCTION>
			   <+ <MOD <CHTYPE .EC FIX> 10> 1>
			   (.EC .MCODE)>
		      ;"**DECL-CHECK**"
		      <CHTYPE ,MFUNCTION MFUNCTION>)
		     (ELSE <PUTREST <REST .EC-BUCKET <- <LENGTH .EC-BUCKET> 1>>
				    (.EC .MCODE)>
		           ;"**DECL-CHECK**"
			   <SET EC-BUCKET .EC-BUCKET>)>)>>

<DEFINE FORWRD-REF (FLIST "AUX" EC EC-BUCKET EC-ENTRY ECV FOR-BUCKET
		    FOR-ENTRY DBBLOCK (FORWRD <1 .FLIST>))
	#DECL ((DBBLOCK) BBLOCK (FLIST) <LIST FORWRD>
	       (EC) <OR FALSE EC>
	       (EC-BUCKET) <LIST [REST EC
				       <OR MCODE
					   <LIST [REST
						  <LIST FORWRD>]>>]>
	       (EC-ENTRY) <OR FALSE
			      <LIST [REST EC
				     <OR MCODE
					 <LIST [REST
						<LIST FORWRD>]>>]>>
	       (ECV) <OR MCODE <LIST [REST <LIST FORWRD>]>>
	       (FOR-BUCKET) <LIST [REST FORWRD EC]>
	       (FOR-ENTRY) <OR FALSE <LIST [REST FORWRD EC]>>
	       (FORWRD) FORWRD)
	;"this function is called whenever a reference is made to a"
	;"FORWRD. If the FORWRD corresponds to an MCODE already, the"
	;"appropriate BBLOCK is substituted for the FORWRD (by putting"
	;"into .FLIST). Otherwise, .FLIST is saved, so that when the"
	;"FORWRD becomes associated with an MCODE (in BIND-FORWRD), the"
	;"FORWRD can be replaced by a BBLOCK."
	<COND (;"if there is an EC associated with FORWRD" 
	       <SET EC <FORWRD-EC <1 .FLIST>>>
	       ;"get bucket from EC table which contains associated value."
	       <SET EC-BUCKET <NTH <EC-VALUES ,MFUNCTION>
				   <+ <MOD <CHTYPE .EC FIX> 10> 1>>>
	       ;"either find reference in FLIST, or save for later binding."
	       <COND (<EMPTY? .EC-BUCKET>
		      ;"EC has no binding. Bind to FLIST for backpatching"
		      <PUT <EC-VALUES ,MFUNCTION>
			   <+ <MOD <CHTYPE .EC FIX> 10> 1>
			   (.EC (.FLIST))>
		      ;"**DECL-CHECK**"
		      <CHTYPE ,MFUNCTION MFUNCTION>)

		     (<SET EC-ENTRY <MEM2 .EC .EC-BUCKET>>
		      ;"EC has an entry, has it  been backpatched yet?"
		      <COND (<TYPE? <SET ECV <2 .EC-ENTRY>> MCODE>
			     <SET DBBLOCK <MCODE-BBLOCK .ECV>>
			     ;"check to see whether mcode begins a BBLOCK,"
			     ;" or whether it will have to be split up."
			     <COND (<==? .ECV <1 <GET-BBLOCK-CODE .DBBLOCK>>>
				    ;"if so, it begins a BBLOCK (easy case)"
				    ;"patch .FLIST to contain proper BBLOCK.")
				   (ELSE
				    ;"goes to the middle of a BBLOCK."
				    <COND (<==? ,CURRENT-BBLOCK .DBBLOCK>
					   <SET DBBLOCK
						<SPLIT-BBLOCK .DBBLOCK .ECV>>
					   <SETG CURRENT-BBLOCK .DBBLOCK>)
					  (ELSE 
					   <SET DBBLOCK
					    <SPLIT-BBLOCK .DBBLOCK .ECV>>)>)>
			     ;"DBBLOCK succeeds BBLOCK"
			     <PUT .FLIST 1 .DBBLOCK>)

			    (ELSE
			     ;"append it to EC's value for future binding."
			     <PUTREST <REST .ECV <- <LENGTH .ECV> 1>>
				      (.FLIST)>
			     ;"**DECL-CHECK**"
			     <SET ECV .ECV>)>)
		     (ELSE
		      ;"EC-BUCKET has other entries, but EC isn't one of them"
		      ;"put EC in them, with FLIST for later binding."
		      <PUTREST <REST .EC-ENTRY <- <LENGTH .EC-ENTRY> 1>>
			       (.EC (.FLIST))>
		      ;"**DECL-CHECK"
		      <SET EC-ENTRY .EC-ENTRY>)>)
	      (ELSE 
	       ;"FORWRD has no EC yet. Give it one."
	       <SET EC <GENEC>>
	       ;"FORWRD would have had an EC had it been bound, so it isn't."
	       ;"bind FORWRD to the new EC"
	       <COND (<EMPTY? <SET FOR-BUCKET
				   <NTH <FORWRD-TABLE ,MFUNCTION>
					<+ <MOD <CHTYPE .FORWRD FIX> 10> 1>>>>
		      ;"no other entries in that bucket. Put in ,FORWRD-TABLE" 
		      <PUT <FORWRD-TABLE ,MFUNCTION>
			   <+ <MOD <CHTYPE .FORWRD FIX> 10> 1>
			   <SET FOR-ENTRY (.FORWRD .EC)>>
		      ;"**DECL-CHECK"
		      <CHTYPE ,MFUNCTION MFUNCTION>)
		     (ELSE
		      ;"FOR-BUCKET is non-empty. Append new entry to it."
		      <PUTREST <REST .FOR-BUCKET <- <LENGTH .FOR-BUCKET> 1>>
			       <SET FOR-ENTRY (.FORWRD .EC)>>
		      ;"**DECL-CHECK**"
		      <SET FOR-BUCKET .FOR-BUCKET>)>
	       ;"put back-pointers in EC-LIST to other members of EC."
	       ;"I hope .EC is always newly cons'ed up at this point."
	       <COND (<AND <EMPTY? <EC-LIST ,MFUNCTION>> <1? <CHTYPE .EC FIX>>>
		      <PUT ,MFUNCTION ,EC-LIST ((<REST .FOR-ENTRY>))>)
		     (<==? <LENGTH <EC-LIST ,MFUNCTION>>
			   <- <CHTYPE .EC FIX> 1>>
		      <PUTREST <REST <EC-LIST ,MFUNCTION>
				     <- <CHTYPE .EC FIX> 2>>
			       ((<REST .FOR-ENTRY>))>
		      ;"**DECL-CHECK**"
		      <CHTYPE ,MFUNCTION MFUNCTION>)>
	       ;"and save FLIST for future backpatching."
	       <COND (<EMPTY? <SET EC-BUCKET
				   <NTH <EC-VALUES ,MFUNCTION>
					<+ <MOD <CHTYPE .EC FIX> 10> 1>>>>
		      <PUT <EC-VALUES ,MFUNCTION>
			   <+ <MOD <CHTYPE .EC FIX> 10> 1>
			   (.EC (.FLIST))>
		      ;"**DECL-CHECK**"
		      <CHTYPE ,MFUNCTION MFUNCTION>)
		     (ELSE
		      ;"assumes brand-new EC again."
		      <PUTREST <REST .EC-BUCKET <- <LENGTH .EC-BUCKET> 1>>
			       (.EC (.FLIST))>
		      ;"**DECL-CHECK**"
		      <SET EC-BUCKET .EC-BUCKET>)>)>
	.FLIST> 

<DEFINE SYNONYMIZE (FOR1 FOR2 "AUX" EC1 EC2 EC EC1-ENTRY EC2-ENTRY
		    ECP1 ECP2 EC1-BUCKET EC2-BUCKET FOR1-ENTRY FOR2-ENTRY
		    FOR1-BUCKET FOR2-BUCKET)
	#DECL ((FOR1 FOR2) FORWRD (EC1 EC2) <OR FALSE EC> (EC) EC
	       (EC1-ENTRY EC2-ENTRY)
	       <OR <LIST [REST EC
			  <OR MCODE <LIST [REST <LIST FORWRD>]>>]>
		   FALSE>
	       (ECP1 ECP2) <LIST <LIST EC [REST FORWRD EC]>>
	       (EC1-BUCKET EC2-BUCKET)
	       <LIST [REST EC
		      <OR MCODE <LIST [REST <LIST FORWRD>]>>]>
	       (FOR1-ENTRY FOR2-ENTRY) <LIST [REST FORWRD EC]>
	       (FOR1-BUCKET FOR2-BUCKET) <LIST [REST FORWRD EC]>)
	;"When it is discovered that two FORWRDs refer to the same"
	;"point in the program, this function is called to record that"
	;"fact. The FORWRDs are divided into equivalence classes (type EC),"
	;"and each EC refers to exactly one MCODE. SYNONYMIZE merges"
	;"the ECs of its arguments."

	;"check to see if FORWRDs exist for FOR1, FOR2"
	<SET EC1 <FORWRD-EC .FOR1>>
	<SET EC2 <FORWRD-EC .FOR2>>
	;"combine them"
	<COND (<AND .EC1 <==? .EC1 .EC2>>	;"EC1 and EC2 can be falses."
	       ;"already synonymous-- do nothing.")
	      (<AND .EC1 .EC2>
	       ;"both have ECs"
	       ;"change pointers for EC1 so they include all of EC2's"
	       <PUTREST <REST <SET ECP1 <NTH <EC-LIST ,MFUNCTION>
					     <CHTYPE .EC1 FIX>>>
			      <- <LENGTH .ECP1> 1>>
			<SET ECP2 <NTH <EC-LIST ,MFUNCTION>
				       <CHTYPE .EC2 FIX>>>>
	       ;"**DECL-CHECK**"
	       <SET ECP1 .ECP1>

	       ;"substitute .EC1 for all occurences of .EC2 in backpointers."
	       <MAPF <>
		     <FUNCTION (ECBP)
			       #DECL ((ECBP) <LIST [REST EC FORWRD]>)
			       <COND (<==? <1 .ECBP> .EC2>
				      ;"error check is the reason for above."
				      <PUT .ECBP 1 .EC1>
				      ;"**DECL-CHECK**"
				      <SET ECBP .ECBP>)
				     (ELSE <ERROR FORWRD-TABLE-SCREWED
						  SYNONYMIZE>)>>
		     .ECP2>

	       ;"make EC2's empty."
	       <PUT <EC-LIST ,MFUNCTION> <CHTYPE .EC2 FIX> ()>
	       ;"**DECL-CHECK**"
	       <CHTYPE ,MFUNCTION MFUNCTION>

	       ;"make values of EC1= UNION (EC1, EC2). Both can be empty."
	       ;"***what about when one has an MCODE, and one doesn't?***"
	       <SET EC1-BUCKET <NTH <EC-VALUES ,MFUNCTION>
				    <+ <MOD <CHTYPE .EC1 FIX> 10> 1>>>
	       <SET EC1-ENTRY <MEM2 .EC1 .EC1-BUCKET>>
	       <SET EC2-BUCKET <NTH <EC-VALUES ,MFUNCTION>
				    <+ <MOD <CHTYPE .EC2 FIX> 10> 1>>>
	       <SET EC2-ENTRY <MEM2 .EC2 .EC1-BUCKET>>
	       <COND (<AND .EC1-ENTRY .EC2-ENTRY>
		      ;"union entries for both of them."
		      <PUTREST <REST .EC1-ENTRY <- <LENGTH .EC1-ENTRY> 1>>
			       .EC2-ENTRY>
		      ;"**DECL-CHECK**"
		      <SET EC1-ENTRY .EC1-ENTRY>)
		     (.EC2-ENTRY
		      ;"EC2 has value, EC1 does not."
		      <COND (<EMPTY? .EC1-BUCKET>
			     <PUT ,EC-VALUE
				  <+ <MOD <CHTYPE .EC1 FIX> 10> 1>
				  (.EC1 <2 .EC2-ENTRY>)>
			     ;"**DECL-CHECK**"
			     <SETG EC-VALUE ,EC-VALUE>)
			    (ELSE
			     <PUTREST <REST .EC1-BUCKET
					    <- <LENGTH .EC1-BUCKET> 1>>
				      (.EC1 <2 .EC2-ENTRY>)>
			     ;"**DECL-CHECK**"
			     <SET EC1-BUCKET .EC1-BUCKET>)>)
		     ;"else, no entry for either, don't bother.">
	       ;"kill entry for EC2"
	       <COND (.EC2-ENTRY
		      ;"if it has anything in it, anyway."
		      <PUT <EC-VALUES ,MFUNCTION>
			   <+ <MOD <CHTYPE .EC2 FIX> 10> 1>
			   <DEL2 .EC2-BUCKET .EC2>>
		      ;"**DECL-CHECK"
		      <CHTYPE ,MFUNCTION MFUNCTION>)>)
	      (<NOT <OR .EC1 .EC2>>
	       ;"both FOR1 and FOR2 have no EC."
	       ;"generate a unique EC for them."
	       <SET EC <GENEC>>
	       ;"associate FOR1 and FOR2 with them in the FORWRD-TABLE"
	       <SET FOR1-BUCKET 
		    <NTH <FORWRD-TABLE ,MFUNCTION>
			 <+ <MOD <CHTYPE .FOR1 FIX> 10> 1>>>
	       <COND (<EMPTY? .FOR1-BUCKET>
		      <PUT <FORWRD-TABLE ,MFUNCTION>
			   <+ <MOD <CHTYPE .FOR1 FIX> 10> 1>
			   <SET FOR1-ENTRY (.FOR1 .EC)>>
		      ;"**DECL-CHECK"
		      <CHTYPE ,MFUNCTION MFUNCTION>)
		     (ELSE
		      <PUTREST <REST .FOR1-BUCKET <- <LENGTH .FOR1-BUCKET> 1>>
			       <SET FOR1-ENTRY (.FOR1 .EC)>>
		      ;"**DECL-CHECK"
		      <SET FOR1-BUCKET .FOR1-BUCKET>)>
	       <SET FOR2-BUCKET
		    <NTH <FORWRD-TABLE ,MFUNCTION>
			 <+ <MOD <CHTYPE .FOR2 FIX> 10> 1>>>
	       <COND (<EMPTY? .FOR2-BUCKET>
		      <PUT <FORWRD-TABLE ,MFUNCTION>
			   <+ <MOD <CHTYPE .FOR2 FIX> 10> 1>
			   <SET FOR2-ENTRY (.FOR2 .EC)>>
		      ;"**DECL-CHECK"
		      <CHTYPE ,MFUNCTION MFUNCTION> )
		     (ELSE
		      <PUTREST <REST .FOR2-BUCKET <- <LENGTH .FOR2-BUCKET> 1>>
			       <SET FOR2-ENTRY (.FOR2 .EC)>>
		      ;"**DECL-CHECK"
		      <SET FOR2-BUCKET .FOR2-BUCKET>)>
	       ;"put backpointers on EC-LIST."
	       <COND (<AND <EMPTY? <EC-LIST ,MFUNCTION>> <1? <CHTYPE .EC FIX>>>
		      <PUT ,MFUNCTION
			   ,EC-LIST
			   ((<REST .FOR1-ENTRY><REST .FOR2-ENTRY>))>)
		     (<==? <LENGTH <EC-LIST ,MFUNCTION>>
			   <- <CHTYPE .EC FIX> 1>>
		      <PUTREST <REST <EC-LIST ,MFUNCTION>
				     <- <CHTYPE .EC FIX> 2>>
			       ((<REST .FOR1-ENTRY> <REST .FOR2-ENTRY>))>
		      ;"**DECL-CHECK"
		      <CHTYPE ,MFUNCTION MFUNCTION> )>)
	      ;"at this point, one of ECs is non-false"
	      (ELSE
	       <COND (.EC1
		      <SET FOR2-BUCKET
			   <NTH <FORWRD-TABLE ,MFUNCTION>
				<+ <MOD <CHTYPE .FOR2 FIX> 10> 1>>>
		      <COND (<EMPTY? .FOR2-BUCKET>
			     <PUT <FORWRD-TABLE ,MFUNCTION>
				  <+ <MOD <CHTYPE .FOR2 FIX> 10> 1>
				  <SET FOR2-ENTRY (.FOR2 .EC1)>>
			     ;"**DECL-CHECK"
			     <CHTYPE ,MFUNCTION MFUNCTION>)
			    (ELSE
			     <PUTREST <REST .FOR2-BUCKET
					    <- <LENGTH .FOR2-BUCKET> 1>>
				      <SET FOR2-ENTRY (.FOR2 .EC1)>>
			     ;"**DECL-CHECK"
			     <SET FOR2-BUCKET .FOR2-BUCKET>)>
		      ;"update pointers in EC-LIST for EC1"
		      <PUTREST <REST <SET ECP1 <NTH <EC-LIST ,MFUNCTION>
						    <CHTYPE .EC1 FIX>>>
				     <- <LENGTH .ECP1> 1>>
			       (<REST .FOR2-ENTRY>)>
		      ;"**DECL-CHECK"
		      <SET ECP1 .ECP1>)
		     (ELSE
		      ;"EC1 is false, EC2 isn't"
		      <SET FOR1-BUCKET
			   <NTH <FORWRD-TABLE ,MFUNCTION>
				<+ <MOD <CHTYPE .FOR1 FIX> 10> 1>>>
		      <COND (<EMPTY? .FOR1-BUCKET>
			     <PUT <FORWRD-TABLE ,MFUNCTION>
				  <+ <MOD <CHTYPE .FOR1 FIX> 10> 1>
				  <SET FOR1-ENTRY (.FOR1 .EC2)>>
			     ;"**DECL-CHECK"
			     <CHTYPE ,MFUNCTION MFUNCTION>)
			    (ELSE 
			     <PUTREST <REST .FOR1-BUCKET
					    <- <LENGTH .FOR1-BUCKET> 1>>
				      <SET FOR1-ENTRY (.FOR1 .EC2)>>
			     ;"**DECL-CHECK"
			     <SET FOR1-BUCKET .FOR1-BUCKET>)>
		      ;"update pointers in EC-LIST for EC2"
		      <PUTREST <REST <SET ECP2 <NTH <EC-LIST ,MFUNCTION>
						    <CHTYPE .EC2 FIX>>>
				     <- <LENGTH .ECP2> 1>>
			       (<REST .FOR1-ENTRY>)>
		      ;"**DECL-CHECK"
		      <SET ECP2 .ECP2>)>)>>

<DEFINE FORWRD-EC (FORWRD "AUX" ENT)
	#DECL ((FORWRD) FORWRD (ENT) <OR FALSE <LIST [REST FORWRD EC]>>)
	;"this gets the equivalence class for a FORWRD."
	<COND (<SET ENT
		    <MEM2 .FORWRD
			  <NTH <FORWRD-TABLE ,MFUNCTION>
			       <+ <MOD <CHTYPE .FORWRD FIX> 10> 1>>>>
	       <2 .ENT>)>>

;"********************************BBLOCK stuff*******************************"

<DEFINE GET-BBLOCK-CODE (BBLOCK)
	#DECL ((BBLOCK) BBLOCK)
	<COND (<G? <CHTYPE .BBLOCK FIX> <CHTYPE <LAST-BBLOCK ,MFUNCTION> FIX>>
	       <ERROR NO-BBLOCK BBLOCK-CODE>)
	      (ELSE
	       <NTH <NTH <BBLOCK-LIST ,MFUNCTION> <CHTYPE .BBLOCK FIX>> 1>)>>

<DEFINE GET-BBLOCK-PREDECESSORS (BBLOCK)
	#DECL ((BBLOCK) BBLOCK)
	<COND (<G? <CHTYPE .BBLOCK FIX> <CHTYPE <LAST-BBLOCK ,MFUNCTION> FIX>>
	       <ERROR NO-BBLOCK BBLOCK-PREDECESSORS>)
	      (ELSE
	       <NTH <NTH <BBLOCK-LIST ,MFUNCTION> <CHTYPE .BBLOCK FIX>> 2>)>>

<DEFINE GET-BBLOCK-SUCCESSORS (BBLOCK)
	#DECL ((BBLOCK) BBLOCK)
	<COND (<G? <CHTYPE .BBLOCK FIX> <CHTYPE <LAST-BBLOCK ,MFUNCTION> FIX>>
	       <ERROR NO-BBLOCK BBLOCK-PREDECESSORS>)
	      (ELSE 
	       <NTH <NTH <BBLOCK-LIST ,MFUNCTION> <CHTYPE .BBLOCK FIX>> 3>)>>

<DEFINE GET-CODE-END (BBLOCK)
	#DECL ((BBLOCK) BBLOCK)
	<COND (<G? <CHTYPE .BBLOCK FIX> <CHTYPE <LAST-BBLOCK ,MFUNCTION> FIX>>
	       <ERROR NO-BBLOCK GET-CODE-END>)
	      (ELSE <NTH <NTH <BBLOCK-LIST ,MFUNCTION>
			      <CHTYPE .BBLOCK FIX>> 4>)>>

<DEFINE PUT-BBLOCK-CODE (BBLOCK L)
	#DECL ((VALUE L) <LIST [REST MCODE]> (BBLOCK) BBLOCK)
	;"returns code list"
	<COND (<G? <CHTYPE .BBLOCK FIX><CHTYPE <LAST-BBLOCK ,MFUNCTION> FIX>>
	       <ERROR NO-BBLOCK PUT-BBLOCK-CODE>)
	      (ELSE
	       <PUT <NTH <BBLOCK-LIST ,MFUNCTION>
			 <CHTYPE .BBLOCK FIX>> 1 .L>)>
	.L>

<DEFINE PUT-BBLOCK-PREDECESSORS (BBLOCK L)
	#DECL ((VALUE L) <LIST [REST BBLOCK]> (BBLOCK) BBLOCK)
	;"returns predecessor list."
	<COND (<G? <CHTYPE .BBLOCK FIX><CHTYPE <LAST-BBLOCK ,MFUNCTION> FIX>>
	       <ERROR NO-BBLOCK PUT-BBLOCK-PREDECESSORS>)
	      (ELSE
	       <PUT <NTH <BBLOCK-LIST ,MFUNCTION>
			 <CHTYPE .BBLOCK FIX>> 2 .L>)>
	.L>

<DEFINE PUT-BBLOCK-SUCCESSORS (BBLOCK L)
	#DECL ((VALUE L) LIST (BBLOCK) BBLOCK)
	;"returns successor list"
	<COND (<G? <CHTYPE .BBLOCK FIX><CHTYPE <LAST-BBLOCK ,MFUNCTION> FIX>>
	       <ERROR NO-BBLOCK PUT-BBLOCK-SUCCESSORS>)
	      (ELSE
	       <PUT <NTH <BBLOCK-LIST ,MFUNCTION>
			 <CHTYPE .BBLOCK FIX>> 3 .L>)>
	.L>

<DEFINE PUT-CODE-END (BBLOCK L)
	#DECL ((VALUE L) LIST (BBLOCK) BBLOCK)
	<COND (<G? <CHTYPE .BBLOCK FIX><CHTYPE <LAST-BBLOCK ,MFUNCTION> FIX>>
	       <ERROR NO-BBLOCK PUT-CODE-END>)
	      (ELSE
	       <PUT <NTH <BBLOCK-LIST ,MFUNCTION>
			 <CHTYPE .BBLOCK FIX>> 4 .L>)>
	.L>

<DEFINE APPEND-BBLOCK-PREDECESSORS (BBLOCK PRED "AUX" C)
	#DECL ((PRED) BBLOCK (BBLOCK) BBLOCK (C) LIST)
	<COND (<G? <CHTYPE .BBLOCK FIX><CHTYPE <LAST-BBLOCK ,MFUNCTION> FIX>>
	       <ERROR NO-BBLOCK APPEND-BBLOCK-CODE>)
	      (<NOT <EMPTY? <SET C <GET-BBLOCK-PREDECESSORS .BBLOCK>>>>
	       <PUTREST <REST .C <- <LENGTH .C> 1>> (.PRED)>)
	      (ELSE <PUT-BBLOCK-PREDECESSORS .BBLOCK (.PRED)>)>>

<DEFINE APPEND-BBLOCK-SUCCESSORS (BBLOCK "TUPLE" SUCCESSORS "AUX" C S)
	#DECL ((SUCCESSORS) <TUPLE [REST FORWRD]>
	       (BBLOCK) BBLOCK (C) LIST (S) <LIST [REST FORWRD]>)
	<COND (<G? <CHTYPE .BBLOCK FIX>
		   <CHTYPE <LAST-BBLOCK ,MFUNCTION> FIX>>
	       <ERROR NO-BBLOCK APPEND-BBLOCK-SUCCESSORS>)
	      (<NOT <EMPTY? <SET C <GET-BBLOCK-SUCCESSORS .BBLOCK>>>>
	       <PUTREST <REST .C <- <LENGTH .C> 1>>
			<SET S (!.SUCCESSORS)>>)
	      (ELSE <PUT-BBLOCK-SUCCESSORS .BBLOCK
		     <SET S (!.SUCCESSORS)>>)>
	<MAPR <> ,FORWRD-REF .S>>

<DEFINE MAKE-BBLOCK ()
	;"returns virgin bblock"
	<PUT ,MFUNCTION
	     ,LAST-BBLOCK
	     <CHTYPE <+ <CHTYPE <LAST-BBLOCK ,MFUNCTION> FIX> 1> BBLOCK>>
	<COND (<EMPTY? <BBLOCK-LIST ,MFUNCTION>>
	       <PUT ,MFUNCTION
		    ,BBLOCK-LIST
		    (<UVECTOR ()()()()>)>)
	      (ELSE
	       <PUTREST <REST <BBLOCK-LIST ,MFUNCTION>
			      <- <LENGTH <BBLOCK-LIST ,MFUNCTION>> 1>>
			(<UVECTOR ()()()()>)>)>
	<LAST-BBLOCK ,MFUNCTION>>

<DEFINE ADD-TO-BBLOCK-CODE (BBLOCK MCODE "AUX" RET)
	#DECL ((BBLOCK) BBLOCK (MCODE) MCODE (VALUE RET) <LIST [REST MCODE]>)
	;"appends the MCODE to the code of BBLOCK."
	;"returns code list."
	<COND (<EMPTY? <SET RET <GET-BBLOCK-CODE .BBLOCK>>>	       
	       <PUT-CODE-END .BBLOCK
			     <SET RET <PUT-BBLOCK-CODE .BBLOCK (.MCODE)>>>)
	      (ELSE
	       <PUT-CODE-END .BBLOCK
			     <REST <PUTREST <GET-CODE-END .BBLOCK>
					    (.MCODE)>>>)>
	.RET>

 <DEFINE SPLIT-BBLOCK (BBLOCK MCODE "AUX" BBC NBB MFORM)
	#DECL ((BBLOCK NBB) BBLOCK (MCODE) MCODE (BBC) <LIST [REST MCODE]>
	       (MFORM) FORM)
	<SET BBC <GET-BBLOCK-CODE .BBLOCK>>
	<MAPR <>
	      <FUNCTION (RCODE "AUX" CSAVE)
			#DECL ((RCODE CSAVE) <LIST [REST MCODE]>)
			<COND (<LENGTH? .RCODE 1>
			       <MAPLEAVE>)
			      (<==? <2 .RCODE> .MCODE>
			       <SET CSAVE <REST .RCODE>>
			       <PUT-BBLOCK-CODE .BBLOCK <PUTREST .RCODE ()>>	       
			       <SET NBB <MAKE-BBLOCK>>
			       <PUT-CODE-END .BBLOCK .RCODE>
			       <ADD-TO-BBLOCK-CODE .BBLOCK
				<MCODE-APPEND <SET MFORM <FORM GO .NBB>>>>
			       <PUT-BBLOCK-CODE .NBB .CSAVE>
			       ;"update MCODE-LIST"
			       <MAPF <>
				     <FUNCTION (MC) #DECL ((MC) MCODE)
					       <PUT <MCODE-LIST ,MFUNCTION>
						    <* <CHTYPE .MC FIX> 2>
						    .NBB>>
				     .CSAVE>
			       <PUT-CODE-END .NBB
					     <REST .CSAVE
						   <- <LENGTH .CSAVE> 1>>>
			       <PUT-BBLOCK-SUCCESSORS .NBB
			        <GET-BBLOCK-SUCCESSORS .BBLOCK>> 
			       <PUT-BBLOCK-SUCCESSORS .BBLOCK (.NBB)>
			       <MAPLEAVE>)>>
	      .BBC>
	.NBB>

<DEFINE MCODE-BBLOCK (MCODE)
        #DECL ((MCODE) MCODE)
	<COND (<G? <* 2 <CHTYPE .MCODE FIX>> <LENGTH <MCODE-LIST ,MFUNCTION>>>
	       <ERROR MCODE-DOESNT-EXIST MCODE-BBLOCK>)
	      (ELSE <NTH <MCODE-LIST ,MFUNCTION>
			 <* <CHTYPE .MCODE FIX> 2>>)>>

;"*********************************initialization*****************************"

<DEFINE NEW-MFUNCTION ()
	<SETG MFUNCTION
	      <CHTYPE [#VARIABLE 0 ()
		       #MCODE 0 ()
		       #BBLOCK 0 ()
		       #BBLOCK 0
		       #FORWRD 0 <IUVECTOR 10 ()>
		       #EC 0 () <IUVECTOR 10 ()>
		       () ()
		       #VARIABLE 0
		       () ()] MFUNCTION>>
	<PUT ,MFUNCTION ,CURRENT-BBLOCK <MAKE-BBLOCK>>
	<PUT ,MFUNCTION ,RETVAR <GENSYM>>>

<DEFINE GENSYM ("OPTIONAL" (ATNAME <>) (DCL ANY) "AUX" RET)
	#DECL ((ATNAME) <OR ATOM FALSE> (DCL) <OR ATOM SEGMENT FORM>
	       (VALUE RET) VARIABLE)
	<PUT ,MFUNCTION
	     ,LAST-SYM
	     <SET RET <CHTYPE <+ <CHTYPE <LAST-SYM ,MFUNCTION> FIX> 1>
			      VARIABLE>>>
	<PUT ,MFUNCTION
	     ,VARIABLE-LIST
	     <TAILCONS <VARIABLE-LIST ,MFUNCTION> ((.ATNAME .DCL))>>
	.RET>

<DEFMAC GENEC ()
	'<BIND (RET)
	       <PUT ,MFUNCTION
		    ,LAST-EC
		    <SET RET <CHTYPE <+ <CHTYPE <LAST-EC ,MFUNCTION> FIX> 1>
				     EC>>>
	       .RET>>

<DEFMAC GENREF ()
	'<BIND (RET)
	       <PUT ,MFUNCTION
		    ,LAST-REF
		    <SET RET <CHTYPE <+ <CHTYPE <LAST-REF ,MFUNCTION> FIX> 1>
				     FORWRD>>>
	       .RET>>