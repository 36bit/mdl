TITLE AGC MUDDLE GARBAGE COLLECTOR

;SYSTEM WIDE DEFINITIONS GO HERE

RELOCATABLE
.GLOBAL WNA,INTFLG,MSGTYP,GCPDL
.INSRT DSK:MUDDLE >


;FUNCTION TO CONSTRUCT A LIST
MFUNCTION CONS,SUBR
	ENTRY 2
	HLLZ	A,2(AB)		;GET TYPE OF 2ND ARGUMENT
	CAME	A,$TLIST		;MUST BE OF TYPE LIST
	JRST	BDTYP	;IT ISNT , GO COMPLAIN
	HRRZ	C,3(AB)		;GET THE LIST POINTER
	MOVE	D,1(AB)	;GET THE DATUM FOR THE CDR
	HLL	C,(AB)		;AND ITS TYPE
CONS1:	MOVE	B,VECBOT"	;NOW SEE IF THERE IS ANY ROOM
	SUBI	B,2		;FOR 2 WORDS
	CAMG	B,PARTOP	;BY COMPARING TO PARTOP
	JRST	FULL		;NO, GO COLLECT GARBAGE
	MOVE	B,PARTOP	;NOW GET THE POINTER TO THE NEW LIST
	MOVEM	C,(B)		;STORE THE TYPE AND CDR
	MOVEM	D,1(B)	;AND STORE THE DATUM
	AOS	PARTOP		;ADVANCE PARTOP
	AOS	PARTOP		;BY TWO
CONSPOP:	JRST FINIS

BDTYP:	PUSH	AP,$TATOM	;ARGUMENT OF TYPE ATOM
	PUSH	AP,MQUOTE 2ND ARGUMENT NOT A LIST
	MOVEI	A,1	;NUMBER OF ARGUMENTS
	JRST	CALER"		;OFF TO ERROR HANDLER

FULL:	SETZM	PARNEW"
	MOVEI	A,2		;SET A TO NUMBER OF WORDS TO GET
	MOVEM	A,GETNUM
	PUSHJ	P,AGC
	JRST	CONS


;FUNCTION OF ONE ARGUMENT WHICH LISTIFIES IT

MFUNCTION NCONS,SUBR
	ENTRY 1
	PUSH AP,$TLIST
	PUSH AP,[0]
	HRLI AB,-4
	JRST CONS

;FUNCTION WHICH RETURNS A LIST OF ITS ARGUMENTS

MFUNCTION LIST,SUBR
	ENTRY
	MOVSI A,TLIST
	MOVEI B,0
	HLRE C,AB
	PUSH P,C
LSTLP:
	AOSL (P)
	JRST CONSPOP
	PUSH AP,A
	PUSH AP,B
	MCALL 2,CONS
	AOS (P)
	JRST LSTLP
;FUNCTION TO GENERATE A VECTOR IN VECTOR SPACE
;CALLED WITH ONE FIXNUM ARGUMENT, WHICH IS THE NUMBER OF WORDS OF DATA THAT THE VECTOR SHOULD
;TAKE.  THE STORAGE WILL BE INCREMENTED BY WHATEVER DOPE WORDS THE SYSTEM NEEDS.

MFUNCTION VECTOR,SUBR
ENTRY 1
	HLLZ	A,(AB)		;GET TYPE OF ARGUMENT
	CAME	A,$TFIX	;IS IT A FIXED NUMBER?
	JRST	BDTYPV		;NO,  GO COMPLAIN
	MOVE	A,1(AB)	;OK, GET THE NUMBER OF ELEMENTS
	LSH A,1	;DOUBLE IT
	ADDI	A,1		;ADD THE NUMBER OF DOPE WDS PER VECTOR
VECTO2:	SOS	B,VECBOT	;GET CURRENT BOTTOM OF VECTORS
	SUB	B,A		;AND SUBRACT THE WORDS IN THIS VECTOR
	CAMG	B,PARTOP	;HAVE WE BUMPED INTO PAIR SPACE?
	JRST	VECTO1	;YES, GO GARBAGE COLLECT
	EXCH	B,VECBOT	;UPDATE VECBOT, GET OLD POINTER
	HRLZS	A		;PUT LENGTH IN DOPE WORD FIELD.
	MOVEM	A,0(B)	;STORE IN DOPE WORD
	MOVN	B,A		;MAKE COUNT NEGATIVE
	HRR	B,VECBOT	;AND GET TOP OF VECTOR-1
	AOBJN	B,.+1	;CORRECT TO ACTUAL TOP OF VECTOR
	MOVE	A,$TVEC	;AND GET TYPE VECTOR TO MARK B AS AN AOBJN POINTER TO A VECTOR
	AOS	VECBOT
	JRST FINIS

BDTYPV:	PUSH	AP,$TATOM
	PUSH	AP,MQUOTE NON INTEGER ARGUMENT
	MOVEI	A,1
	JRST	CALER

VECTO1:	AOS VECBOT
	SETZM	PARNEW
	MOVEM	A,GETNUM
	PUSHJ	P,AGC
	JRST	VECTOR

MFUNCTION EVECTOR,SUBR
	ENTRY
	HLRE A,AB
	MOVNS A,A
	LSH A,-1
	PUSH AP,$TFIX
	PUSH AP,A
	MCALL 1,VECTOR
	MOVE C,AB
	MOVE D,B
	;REPEAT UNTIL VECTOR RUNS OUT
	    EVECT2:
		SKIPGE C
		JRST EVECT1
			JRST FINIS
	    EVECT1:
		MOVE E,(C)
		MOVEM E,(D)
		MOVE E,1(C)
		MOVEM E,1(D)
		ADD C,[2,,2]
		ADD D,[2,,2]
		JRST EVECT2


AGC":
;SAVE AC'S
	IRP AC,,[0,A,B,C,D,E,P,SP,TP,TB,AP,AB,TVP,PP,PVP]
	MOVEM	AC,AC!STO"+1(PVP)
	TERMIN

	MOVE	P,GCPDL	;SWAP IN GCPDL

;SET UP E TO POINT TO TYPE VECTOR
	HLLZ	E,TYPVEC(TVP)
	CAME	E,$TVEC
	JRST	AGCE1
	HRR	E,TYPVEC+1(TVP)
	HRLI	E,B

;MARK END OF PDL'S FOR FENCEPOSTING

	CAMG	SP,[-1,,0]	;IF THIS PDL IS NOT FULL
	SETOM	1(SP)		;SPECIAL PDL
	CAMG	AP,[-1,,0]	;IF THIS PDL IS NOT FULL
	SETOM	1(AP)		;ARGUMENT PDL
	CAMG	TP,[-1,,0]	;IF THIS PDL IS NOT FULL
	SETOM	1(TP)		;TEMPORARY PDL

;MARK PHASE: MARK ALL LISTS AND VECTORS
;POINTED TO WITH ONE BIT IN SIGN BIT
;START AT TRANSFER VECTOR

	SETZM	VECNUM		;CLEAR NUMBER OF VECTOR WORDS
	SETZM	PARNUM		;CLEAR NUMBER OF PAIRS
	MOVSI	D,400000	;SIGN BIT FOR MARKING
	MOVE	A,PVP		;START AT PROCESS VECTOR
	PUSHJ	P,VECTMK	;AND MARK THIS VECTOR

;CORE ADJUSTMENT PHASE
	SETZM	CORSET		;CLEAR LATER CORE SETTING
	PUSHJ	P,CORADJ	;AND MAKE CORE ADJUSTMENTS

;RELOCATION ESTABLISHMENT PHASE
;1 -- IN PAIR SPACE, SWAP LOW GARBAGE WITH HIGHER NON GARBAGE
	MOVE	A,PARBOT"	;ONE POINTER TO BOTTOM OF PAIR SPACE
	MOVE	B,PARTOP"	;AND ANOTHER TO TOP.
	PUSHJ	P,PARREL	;AND ESTABLISH THE PAIR RELOCATION
	MOVEM	B,PARTOP	;ESTABLISH NEW TOP OF PAIRS HERE

;2 -- IN VECTOR SPACE, ESTABLISH POINTERS TO TOP OF CORE
	MOVE	A,VECTOP"	;START AT TOP OF VECTOR SPACE
	PUSHJ	P,VECREL	;AND ESTABLISH RELOCATION FOR VECTORS

;POINTER UPDATE PHASE
;1 -- UPDATE ALL PAIR POINTERS
	MOVE	A,PARBOT	;START AT BOTTOM OF PAIR SPACE
	PUSHJ	P,PARUPD	;AND UPDATE ALL PAIR POINTERS

;2 -- UPDATE ALL VECTORS
	MOVE	A,VECTOP	;START AT TOP OF VECTOR SPACE
	PUSHJ	P,VECUPD	;AND UPDATE THE POINTERS

;3 -- UPDATE THE PVP AC
	MOVEI	A,PVP-1		;SET LOC TO POINT TO PVP
	MOVE	C,PVP		;GET THE DATUM
	PUSHJ	P,2NWDUP	;AND UPDATE THIS VALUE

;VECTOR AND LIST MOVEMENT PHASE
	MOVE	A,VECTOP	;START AT TOP OF VECTOR SPACE
	PUSHJ	P,VECMOVE	;AND MOVE THE VECTORS

;GARBAGE ZEROING PHASE
	MOVE	A,PARTOP	;FIRST WORD OF GARBAGE IS AFTER PAIR SPACE
	HRLS	A		;GET FIRST ADDRESS IN LEFT HALF
	MOVE	B,VECBOT	;LAST ADDRESS OF GARBAGE + 1
	CLEARM	(A)	;ZERO	THE FIRST WORD
	ADDI	A,1	;MAKE A A BLT POINTER
	BLT	A,-1(B)	;AND COPY ZEROES INTO REST OF AREA

;FINAL CORE ADJUSTMENT
	SKIPE	A,CORSET	;IFLESS CORE NEEDED
	PUSHJ	P,CORADL	;GIVE SOME AWAY.

;RESTORE AC'S
	IRP AC,,[0,A,B,C,D,E,P,SP,TP,TB,AP,AB,PP,PVP,TVP]
	MOVE	AC,AC!STO+1(PVP)
	TERMIN

CPOPJ:	POPJ	P,


AGCE1:	MOVEI	A,[ASCIZ /TYPVEC IS NOT OF TYPE VECTOR
/]
TYPSTP:	PUSHJ	P,MSGTYP"		;TYPE OUT A HOPELESSMESSAGE
	.VALUE			;AND GIVE UP


;PAIR MARKER
;MARKS TYPED VALUE POINTED TO BY A.
;SIGN BIT OF A IS POSITIVE FOR THREADED LISTS (I.E. PAIRS)
;AND NEGATIVE FOR CONSECUTIVE LISTS (I.E. VECTORS)
;ESCAPES ON MARKED WORD OR POINTER TO NIL
PAIRM0:	TDZA	D,D	;FOR UNMARKING
PAIRM1:	MOVSI	D,400000	;TURN ON MARKING
PAIRMK:	TRNE	A,-1	;NIL?
	SKIPGE	B,(A)	;OR PREVIOUSLY MARKED WORD?
	POPJ	P,	;YES -- ESCAPE
	SKIPL	A	;IN A VECTOR?
	IORM	D,(A)	;NO -- MARK THIS CELL
	MOVE	C,1(A)	;GET THE DATUM
	PUSH	P,B	;SAVE THREAD POINTER
	ADDI	A,2	;CALCULATE CONSECUTIVE POINTER
	SKIPGE	A	;VECTOR?
	MOVEM	A,0(P)	;YES -- SAVE CONTINUOUS POINTER
	SKIPL	A		;IF MARKING A PAIR
	AOS	PARNUM		;ADD ONE TO NUMBER OF PAIRS
	HLRZS	B	;GET TYPE OF DATUM
	ANDI	B,377777	;MASK OUT IRRELEVANT BITS
	MOVE	A,C		;DATUM IN A
	CAILE	B,NUMPRI	;IF THIS IS NOT A PRIMITIVE
	PUSHJ	P,MARK2		;GO LOOK AT TYPE VECTOR
	PUSHJ	P,@MKTB(B)	;DISPATCH TO APROPRIATE ROUTINE
	POP	P,A	;POINT TO NEXT DATUM
	JRST	PAIRMK	;AND LOOP

;VECTOR MARKER
;MARKS DOPE WORD, FINDS TOP AND GOES TO PAIRMK ABOVE.
VECTMK:	HLRE	B,A	;EXTEND COUNT IN B
	SUB	A,B	;LOCATE DOPE WORD
	SKIPGE	B,(A)	;DOPE WORD MARKED?
	POPJ	P,	;YES -- DONE
	IORM	D,(A)	;MARK DOPE WORD
	HLRS	B	;GET SIZE FROM DOPE WORD
	ADDM	B,VECNUM	;ADD TO WORDS IN VECTOR SPACE
	SUB	A,B	;AND SUBTRACT TO FIND TOP. NOTE A IS NEG
	AOJA	A,PAIRMK	;ADJUST TOP AND GO


DISTBL MKTB,MARK1,[[TLIST,PAIRMK],[TVEC,VECTMK],[TATOM,VECTMK]]

;HERE TO CALCULATE STORAGE ALLOCATION TYPE AND DISPATCH THROUGH HERE

MARK2:	AOS	0(P)		;ENTRY HERE MUST SKIP RETURN
MARK1:	LSH	B,1		;TYPE TIMES 2
	MOVE	B,@E		;GET STORAGE ALLOCATION TYPE
	JRST	@MKTBS(B)	;AND DISPATCH THROUGH SHORT TABLE

DISTBS MKTBS,CPOPJ,[[2WORD,PAIRMK],[2NWORD,VECTMK],[STACK,VECTMK],[BASE,CPOPJ]]
;CORE ADJUSTMENT PHASE -- SETS TOP OF CORE
;AND TOP OF VECTOR SPACE TO SIZE NEEDED FOR SUFFICIENT FREE SPACE TO BE ADDED TO
;ALLOW FOR "EFFICIENT" PROCESSING

CORADJ:	.SUSET	[.RMEMT,,CORTOP]	;SET CORTOP FORM SYSTEM
	HRRZS	VECNUM		;CLEAR LH OF VECNUM
	MOVE	A,PARBOT	;GET ADDRESS OF BOTTOM OF MOVABLE CORE
	ADD	A,PARNEW	;AND ADDJUST TO WHERE IT WILL BE
	ADD	A,PARNUM	;ADD NUMBER OF PAIRS
	ADD	A,PARNUM	;TWICE TO GET TOP OF PAIR SPACE.
	ADD	A,VECNUM	;ADD NUMBRER OF VECTOR WORDS
	ADD	A,GETNUM	;AND NUMBER OF WORDS TO BE GOTTEN THIS TIME
	ADD	A,FREMIN	;AND NUMBER OF FREE WORDS MINIMUM
	SUB	A,CORTOP		;LESS CURRENT TOP OF CORE
	JUMPG	A,CORAD2	;IF GREATER THAN ZERO, MORE CORE NEEDED
	ADD	A,FREDIF	;ADD IN DIFFERENCE BETWEEEN FREE AND GOT
	ADDI	A,1777	;ROUND UP TO NEXT BLOCK
	ANDCMI	A,1777	;AND DOWN TO A BLOCK BOUNDARY
	JUMPGE	A,CORAD1	;IF POSITIVE, NO CORE ADJUSTMENT NEEDED
	ADDB	A,CORTOP	;CALCULATE NEW TOP OF CORE
	ASH	A,-10.		;CONVERT TO BLOCKS
	MOVEM	A,CORSET	;AND SET NUMBER OF BLOCKS
CORAD1:	MOVE	A,CORTOP	;CALCU;ATE NEW TOP OF CORE
	SUB	A,VECTOP	;FIND OFFSET FROM CURRENT VECTOR TOP
	MOVEM	A,VECNEW	;AND SAVE AS NEW HOME OF VECTORS
	POPJ	P,

;HERE IF MORE CORE NEEDED, NO OF WDS IN A

CORAD2:	ADD	A,CORTOP	;FIND TOP OF CORE
	ADDI	A,1777		;AND ROUND UPWARDS
	ASH	A,-10.		;AND CONVERT TO NUMBER OF BLOCKS
	CAMLE	A,SYSMAX	;COMPARE TO MAXIMUM ALLOWED
	JRST	CORAD3
CORTRY:	.CORE	(A)	;ASK OFR THE NEW SIZE
	JRST	CORAD4		;FAILURE, GO COMPLAIN
	JRST	CORADJ		;OK TRY AGAIN


CORAD3:	SKIPA	B,[[ASCIZ /ATTEMPT TO EXPAND PAST MUDDLE LIMIT/]]
CORAD4:	MOVEI	B,[ASCIZ /NO CORE AVAILABLE/]
	PUSH	P,A	;SAVE AMOUNT REQUESTED
	PUSHJ	P,MSGTYP
	MOVEI	B,[ASCIZ /
PROCEED?/]
	PUSHJ	P,MSGTYP
	PUSHJ	P,TYI"
	CAIE	A,"Y
	.VALUE
	POP	P,A	;GET BACK THE NUMBER OF BLOCKS
	JRST 	CORTRY	;AND TRY TO GET THEM


CORADL:	.CORE	(A)		;SET TO NEW CORE VALUE
	.VALUE
	POPJ	P,
;PARREL -- PAIR RELOCATION ESTABLISMENT
;ESTABLISH PAIR RELOCATION. CALLED WITH
;BOTTOM IN AC A, AND TOP IN AC B.

PARRE0:	SUBI	B,2	;MOVE POINTER BACK
	IORM	D,(B)		;MARK THIS PAIR AS JUNK
PARREL:	CAIG	B,(A)	;HAVE THE POINTERS MET?
	POPJ	P,		;YES -- RETURN WITH NEW PARTOP IN B
	SKIPL	C,-2(B)		;MARKED PAIR ON BOTTOM?
	JRST	PARRE0	;NO -- MOVE TOWARD BOTTOM
PARRE1:	SKIPGE (A)		;JUNK ON BOTTOM?
	JRST PARRE2	;NO -- MOVE FORWARD
	MOVEM	C,(A)	;STORE PAIR IN NEW LOCATION
	MOVE	C,-1(B)	;GET DATUM
	MOVEM	C,1(A)	;AND STORE IN NEW HOME
	HRROM	A,-2(B)	;SET "BROKEN HEART" TO NEW HOME
	JRST	PARRE0		;AND CONTINUE
PARRE2:	ANDCAM	D,(A)	;UNMARK PAIR
	ADDI	A,2	;GO ON TO NEXT PAIR
	CAIG	B,(A)	;TEST TO SEE IF POINTERS MET
	POPJ	P,	;YES -- DONE
	JRST	PARRE1	;KEEP LOOKING FORWARD

;VECTOR RELOCATE -- PUTS RELOCATION OF
;VECTOR IN DOPE WORD

VECREL:	CAMG	A,VECBOT	;DONE?
	POPJ	P,	;YES, RETURN
	SKIPGE	C,-1(A)	;NO GET LENGTH AND MARKING
	JRST	VECRE1	;IF MARKED, GO FIGURE RELOCATION
	HLRZS	C	;NO GET LENGTH
	ADDM	C,VECNEW"	;AND INCREASE OFFSET
	SUBI	A,(C)	;MOVE ON TO NEXT VECTOR
	JRST	VECREL	;AND KEEP SCANNING

VECRE1:	HRR	C,VECNEW	;GET OFFSET
	MOVEM	C,-1(A)	;AND STORE
	ANDCAM D,C	;CLEAR MARKING
	HLRZS	C	;GET LENGTH
	SUBI	A,(C)	;GET NEXT VECTOR DOPE WORD POINTER
	JRST	VECREL	;AND KEEP GOING
;PAIR SPACE UPDATE

;GETS PARBOT IN AC A
;UPDATES VALUES AND CDRS UP TO PARTOP

PARUPD:	CAML	A,PARTOP	;ARE THERE MORE PAIRS TO PROCESS
	POPJ	P,		;NO -- RETURN
	HRRZ	C,(A)		;GET CURRENT CDR
	JUMPE	C,PARUP1	;IF NIL, DON'T UPDATE
	SKIPGE	B,(C)	;GET POINTER UPDATE AND SKIP IF THIS IS NOT A BROKEN HEART
	HRRM	B,(A)	;IT WAS, STORE NEW POINTER
	SKIPE	B,PARNEW	;IF LIST SPACE IS MOVING,
	ADDM	B,(A)		;THEN ADD OFFSET TO CDR

;UPDATE VALUE CELL
PARUP1:	HLRZ	B,(A)		;SET RH OF B TO TYPE
	MOVE	C,1(A)		;SET C TO VALUE
	PUSHJ	P,VALUPD	;UPDATE THIS VALUE
	ADDI	A,2	;MOVE ON TO NEXT PAIR
	JRST	PARUPD	;AND CONTINUE

;VECTOR SPACE UPDATE
;GETS VECTOP IN A
;UPDATES ALL VALUE CELLS IN MARKED VECTORS
;ESCAPES WHEN IT GETS TO VECBOT

VECUPD:	SUBI	A,1		;MAKE A POINT TO LAST DOPE WD
VECUP1:	CAMG	A,VECBOT	;ANY MORE VECTORS TO PROCESS?
	POPJ	P,		;NO -- RETURN
VECUP5:	SKIPGE	B,(A)	;IS DOPE WORD MARKED?
	JRST	VECUP2		;YES -- GO PROCESS VALUES IN THIS VECTOR
	HLRZS	B		;NO -- SET RH OF B TO SIZE OF VECTOR
	SUB	A,B		;SET A TO POINT TO DOPE WD OF NEXT VECTOR
	JRST	VECUP1		;AND CONTINUE

VECUP2:	PUSH	P,A		;SAVE DOPE WORD POINTER
	HLRZ	B,(A)		;GET LENGTH OF THIS VECTOR
	ANDI	B,377777	;TURN OFF MARK BIT
	SUB	A,B			;SET AC A TO NEXT DOPE WORD
	ADDI	A,1		;AND ADVANCE TO FIRST ELEMENT OF THIS VECTOR
VECUP3:	HLRZ	B,(A)	;GET TYPE
	TRNE	B,400000	;IF MARK BIT SET
	JRST	VECUP4		;DONE WITH THIS VECTOR
	MOVE	C,1(A)		;GET VALUE
	PUSHJ	P,VALUPD	;UPDATE THIS VALUE
	ADDI	A,2		;GO ON TO NEXT VECTOR
	JRST	VECUP3	;AND CONTINUE

VECUP4:	POP	P,A		;SET TO OLD DOPE WORD
	ANDCAM	D,(A)	;TURN OFF MARK BIT
	JRST	VECUP5		;GO ON TO NEXT VECTOR

;VALUPD UPDATES A SINLE VALUE FROM EITHER PAIR SPACE OR VECTOR SPACE
;GETS POINTER TO TYPE CELL IN RH OF A
;TYPE IN RH OF B (LH MUST BE 0)
;VALUE IN C

VALUPD:	CAIG B,NUMPRI		;IS THIS A PRIMITIVE TYPE?
	JRST	@UPDTBL(B)	;YES -- DIPATCH THROUGH PRIMITIVE TABLRE
VALUP1:	LSH	B,1		;NO -- SET TYPE TIMES 2
	HRRZ	B,@E			;GET STORAGE ALLOCATION TYPE
	JRST	@UPDTBS(B)	;AND DISPATCH THROUGH STORAGE ALLOCATION DISPATCH TABLE

;PRIMITIVE TYPE DISPATCH TABLE

DISTBL UPDTBL,VALUP1,[[TLIST,2WDUP],[TVEC,2NWDUP],[TATOM,2NWDUP],[TAB,ABUP]]

;NON PRIMITIVE AND UNKNOWN PRIMITIVE DISPATCH TABLE

DISTBS UPDTBS,CPOPJ,[[1WORD,CPOPJ],[2WORD,2WDUP],[2NWORD,2NWDUP],[STACK,2NWDUP],[BASE,2NWDUP]]


;PAIR POINTER UPDATE
2WDUP:	TRNN	C,-1		;POINT TO NIL?
	POPJ	P,		;YES -- NO UPDATE NEEDED
	SKIPGE	B,(C)	;NO -- IS THIS A BROKEN HEART
	HRRM	B,1(A)	;YESS -- STORE NEW VALUE
	SKIPE	B,PARNEW	;IF LIST SPACE IS MOVING
	ADDM	B,1(A)		;THEN ADD OFFSET TO VALUE
	POPJ	P,		;FINISHED

;ARGUMENT BASE POINTER UPDATE.  SUBSTITUTES AP FOR AB AND GOES INTO VECTOR ROUTINE
ABUP:	MOVE	C,AP		;VALE GETS AP TO FIND DOPE WD

;VECTOR, ATOM, STACK, AND BASE POINTER UPDATE

2NWDUP:	JUMPE	C,CPOPJ		;DONT UPDAATE ZERO VECTOR
	HLRE	B,C		;EXTEND COUNT IN B
	SUB	C,B		;SET C TO POINT TO DOPE WORD
	HRRE	B,(C)	;EXTEND RELOCATION IN B
	ADDM	B,1(A)		;AND ADD RELOCATION TO STORED DATUM
	POPJ P,

;VECMOVE SUBROUTINE TOh MOVE THE VECTORS TO
;THEIR NEW LOCATIONS.

;GETS VECTOP IN A

VECMOV:	SUBI	A,1		;SET AC A TO POINT TO LAST DOPE WORD
VECMO1:	CAMGE	A,VECBOT	;HAVE ALL VECTORS BEEN PROCESSED?
	JRST	VECMO2		;YES, GO TO FORWARD MOVE ETC.
	HRRE	B,(A)		;EXTEND COUNT IN B
	JUMPG	B,VECMO2	;IF RELOCATION POSITIVE, GO TO NEXT SECTION
	EXCH	D,(A)		;SWAP PREV. DOPE WD. OR 400000 WITH THIS ONE
	HLRZ	B,D		;GET COUNT IN B
	SUB	A,B		;MOVE ON TO NEXT DOPE WD.
	JRST	VECMO1		;AND REPEAT.

VECMO2:	PUSH	P,A		;SAVE CURRENT DOPE WD POINTER
	PUSH	P,D		;AND CURRENT DOPE WD.
	PUSHJ	P,VECMO6	;PROCESS FORWARD MOVING VECTORS
	POP	P,D		;RESTORE CURRENT DOPE WD.
	POP	P,A		;AND CURRENT DOPE WD POINTER
VECMO4:	JUMPL	D,CPOPJ		;IF CURRENT DOPE WD 400000, THEN DONE
	TRNN	D,-1		;IS RELOCATION ZERO?
	JRST VECMO5		;YES GO ON TO NEXT VECTOR
	HLRZ	C,D		;GET COUNT IN C
	ADD	C,A		;PLUS FIRST ADDR-1
	ADD	C,D		;PLUS RELOCATION
	MOVE	B,A	;GET FIRST ADDRESS-1
	ADDI	B,1(D)	;PLUS RELOC FOR FIRST DEST ADDR
	HRLI	B,1(A)	;FIRST SOURCE ADDR IN LH
	BLT	B,-1(C)		;TRANSFER ALL BUT DOPE WD
	HLLZS	D		;ZERO THE RELOCATION
	MOVEM	D,(C)		;AND STORE IT IN NEW DOPE WD HOME
VECMO5:	HLRZ	B,D		;GET COUNT IN B
	ADD	A,B		;GO ON TO NEXT DOPE WD
	EXCH	D,(A)	;AND PUT THE RIGHT DOPE WD IN
	JRST	VECMO4		;AND REPEAT

VECMO6:	CAMGE	A,VECBOT		;HAVE GOT TO BOTTOM OF VECTORS?
	JRST	VECMO9		;YES -- GO ON TO TOP BOT UPDATE
	MOVE	B,(A)		;GET THE DOPE WD
	TRNN	B,-1		;RELOCATION ZERO?
	JRST	VECMO8		;YES -- SKIP OVER VECTOR
	HLL	A,B		;PUT COUNT IN A
	HRLI	B,A		;MAKE B INDEX ON A
	HLLZS(A)		;CLEAR RELOCATION IN DOPE WD.

VECMO7:	TLNN	A,-1		;COUNT REACHED ZERO?
	JRST	VECMO6		;YES -- GO ON TO NEXT VECTOR
	POP	A,@B		;MOVE NEXT WD
	JRST	VECMO7	;AND REPEAT

VECMO8:	HLRZS	B		;PUT COUNT IN RH
	SUB	A,B		;GO ON TO NEXT VECTOR
	JRST	VECMO6		;AND REPEAT

;UPDATE VECBOT AND VECTOP, AND SEE IF PAIR MOVEMENT IS INDICATED

VECMO9:	MOVE	A,CORTOP	;GET CURRENT TOP OF CORE
	MOVEM	A,VECTOP		;AND SET TO TOP OF VECTORS
	MOVE	A,VECNEW	;GET LATEST OFFSET FOR VECTORS
	ADDM	A,VECBOT	;AND OFFSET VECBOT TO IS	TS NEW PLACE
	JRST	PARMOV		;AND GO MOVE PAIRS

;PAIR MOVEMENT PHASE -- USES PARNEW,PARBOT, AND PARTOP TO MOVE PAIRS
;TO NEW HOMES

PARMOV:	SKIPN	A,PARNEW	;IS THERE ANY PAIR MOVEMENT?
	POPJ	P,		;NO, RETURN
	JUMPL	A,PARMO2	;YES -- IF MOVING DOWNWARDS, GO DO A BLT
	HRLI	A,B		;MOVING UPWARDS SETAC A TO INDEX OFF AC B
	MOVE	B,PARTOP	;GET HIGH PAIR ADDREESS
	SUB	B,PARBOT	;AND SUBTRACT BOTTOM TO GET NUMBER OF PAIRS
	HRLZS	B		;PUT COUNT IN LEFT HALF
	HRR	B,PARTOP	;GET HIGH ADDRESS PLUS ONE IN RH
	SUBI	B,1		;AND SUBTRACT ONE TO POINT TO LAST WORD TO BE MOVED

PARMO1:	TLNN	B,-1		;HAS COUNT REACHED ZERO?
	JRST	PARMO3		;YES -- FINISH UP
	POP	B,@A		;NO -- TRANSFER THE NEXT WORD
	JRST	PARMO1		;AND REPEAT

PARMO2:	MOVE	B,PARBOT	;GET ADDRESS OF FIRST SOURCE WD
	HRLS	B		;IN BOTH HALVES OF AC B
	ADD	B,A		;MAKE RH OF B POINT TO FIRST DESTINATION WORD
	ADD	A,PARTOP	;MAKE RH OF A POINT TO LAST DESTINATION WORD PLUS ONE
	BLT	B,-1(A)		;AND TRANSFER THE BLOCK OF PAIRS

PARMO3:	MOVE	A,PARNEW	;GET OFFSET FOR PAIR SPACE
	ADDM	A,PARBOT	;AND CORRECT BOTTOM
	ADDM	A,PARTOP	;AND CORRECT TOP.
	POPJ	P,
;LOCAL VARIABLES

GETNUM:	0		;NO OF WORDS TO GET
PARNUM:	0		;NO OF PAIRS MARKED
VECNUM:	0		;NO OF WORDS IN MARKED VECTORS
CORSET:	0		;NO OF BLOCKS OF CORE, IF GIVING CORE AWAY
CORTOP:	0		;CURRENT TOP OF CORE, EXCLUDING ANY TO BE GIVEN AWAY

;VARIABLES WHICH DETERMIN WHEN MUDDLE WILL ASK FOR MORE CORE,
;AND WHEN IT WILL GET UNHAPPY

SYSMAX:	30.		;MAXIMUM SIZE OF MUDDLE
FREMIN:	1000		;MINIMUM FREE WORDS
FREDIF:	10000		;DIFFERENCE BETWEEN FREMIN AND MAXIMUM NUMBER OF FREE WORDS

END
CTOR

;VALUPD UPDATES A SINLE VALUE FROM EITHER PAIR SPACE OR VECTOR SPACE
;GETS POINTER TO TYPE CELL IN RH OF A
;TYPE IN RH OF B (LH MUST BE 0)
;VALUE IN C

VALUPD:	CAIG B,NUMPRI		;IS THIS A PRIMITIVE TYPE?
	JRST	@UPDTBL(B)	;YES -- DIPATCH THROUGH PRIMITIVE TABLRE
VALUP1:	LSH	B,1		;NO -- SET TYPE TIMES 2
	HRRZ	B,@E			;GET STORAGE ALLOCATION TYPE
	JRST	@UPDTBS(B)	;AND DISPATCH THROUGH STORAGE ALLOCATION DISPATCH TABLE

;PRIMITIVE TYPE DISPATCH TABLE

DISTBL UPDTBL,VALUP1,[[TLIST,2WDUP],[TVEC,2NWDUP],[TATOM,2NWDUP],[TAB,ABUP]]

;NON PRIMITIVE AND UNKNOWN PRIMITIVE DISPATCH TABLE

DISTBS UPDTBS,CPOPJ,[[1WORD,CPOPJ],[2WORD,2WDUP],[2NWORD,2NWDUP],[STACK,2NWDUP],[BASE,2NWDUP]]


;PAIR POINTER UPDATE
2WDUP:	TRNN	C,-1		;POINT TO NIL?
	POPJ	P,		;YES -- NO UPDATE NEEDED
	SKIPGE	B,(C)	;NO -- IS THIS A BROKEN HEART
	HRRM	B,1(A)	;YESS -- STORE NEW VALUE
	SKIPE	B,PARNEW	;IF LIST SPACE IS MOVING
	ADDM	B,1(A)		;THEN ADD OFFSET TO VALUE
	POPJ	P,		;FINISHED

;ARGUMENT BASE POINTER UPDATE.  SUBSTITUTES AP FOR AB AND GOES INTO VECTOR ROUTINE
ABUP:	MOVE	C,AP		;VALE GETS AP TO FIND DOPE WD

;VECTOR, ATOM, STACK, AND BASE POINTER UPDATE

2NWDUP:	JUMPE	C,CPOPJ		;DONT UPDAATE ZERO VECTOR
	HLRE	B,C		;EXTEND COUNT IN B
	SUB	C,B		;SET C TO POINT TO DOPE WORD
	HRRE	B,(C)	;EXTEND RELOCATION IN B
	ADDM	B,1(A)		;AND ADD RELOCATION TO STORED DATUM
	POPJ P,

;VECMOVE SUBROUTINE TOh MOVE THE VECTORS TO
;THEIR NEW LOCATIONS.

;GETS VECTOP IN A

VECMOV:	SUBI	A,1		;SET AC A TO POINT TO LAST DOPE WORD
VECMO1:	CAMGE	A,VECBOT	;HAVE ALL VECTORS BEEN PROCESSED?
	JRST	VECMO2		;YES, GO TO FORWARD MOVE ETC.
	HRRE	B,(A)		;EXTEND COUNT IN B
	JUMPG	B,VECMO2	;IF RELOCATION POSITIVE, GO TO NEXT SECTION
	EXCH	D,(A)		;SWAP PREV. DOPE WD. OR 400000 WITH THIS ONE
	HLRZ	B,D		;GET COUNT IN B
	SUB	A,B		;MOVE ON TO NEXT DOPE WD.
	JRST	VECMO1		;AND REPEAT.

VECMO2:	PUSH	P,A		;SAVE CURRENT DOPE WD POINTER
	PUSH	P,D		;AND CURRENT DOPE WD.
	PUSHJ	P,VECMO6	;PROCESS FORWARD MOVING VECTORS
	POP	P,D		;RESTORE CURRENT DOPE WD.
	POP	P,A		;AND CURRENT DOPE WD POINTER
VECMO4:	JUMPL	D,CPOPJ		;IF CURRENT DOPE WD 400000, THEN DONE
	TRNN	D,-1		;IS RELOCATION ZERO?
	JRST VECMO5		;YES GO ON TO NEXT VECTOR
	HLRZ	C,D		;GET COUNT IN C
	ADD	C,A		;PLUS FIRST ADDR-1
	ADD	C,D		;PLUS RELOCATION
	MOVE	B,A	;GET FIRST ADDRESS-1
	ADDI	B,1(D)	;PLUS RELOC FOR FIRST DEST ADDR
	HRLI	B,1(A)	;FIRST SOURCE ADDR IN LH
	BLT	B,-1(C)		;TRANSFER ALL BUT DOPE WD
	HLLZS	D		;ZERO THE RELOCATION
	MOVEM	D,(C)		;AND STORE IT IN NEW DOPE WD HOME
VECMO5:	HLRZ	B,D		;GET COUNT IN B
	ADD	A,B		;GO ON TO NEXT DOPE WD
	EXCH	D,(A)	;AND PUT THE RIGHT DOPE WD IN
	JRST	VECMO4		;AND REPEAT

VECMO6:	CAMGE	A,VECBOT		;HAVE GOT TO BOTTOM OF VECTORS?
	JRST	VECMO9		;YES -- GO ON TO TOP BOT UPDATE
	MOVE	B,(A)		;GET THE DOPE WD
	TRNN	B,-1		;RELOCATION ZERO?
	JRST	VECMO8		;YES -- SKIP OVER VECTOR
	HLL	A,B		;PUT COUNT IN A
	HRLI	B,A		;MAKE B INDEX ON A
	HLLZS(A)		;CLEAR RELOCATION IN DOPE WD.

VECMO7:	TLNN	A,-1		;COUNT REACHED ZERO?
	JRST	VECMO6		;YES -- GO ON TO NEXT VECTOR
	POP	A,@B		;MOVE NEXT WD
	JRST	VECMO7	;AND REPEAT

VECMO8:	HLRZS	B		;PUT COUNT IN RH
	SUB	