'<PCODE "SYMANA">

"	This is the main file associated with the type analysis phase of
the compilation.  It is called by calling FUNC-ANA with the main data structure
pointer.   ANA is the FUNCTION that dispatches to the various special handlers
and the SUBR call analyzer further dispatches for specific functions." 

"	Many analyzers for specific SUBRs appear in their own files
(CARITH, STRUCT etc.).  Currently no special hacks are done for TYPE?, EMPTY? etc.
in COND, ANDS and ORS." 

"	All analysis functions are called with 2 args, a NODE and a desired
type specification.  These args are usually called NOD and RTYP or
N and R." 

" ANA is the main analysis dispatcher (see ANALYZERS at the end of
  this file for its dispatch table." 

<GDECL (TEMPLATES SUBRS) UVECTOR> 

<SETG ANA  %<RSUBR!- '[ %<PCODE!- "SYMANA" 0> ANA #DECL ("VALUE" ANY NODE ANY) 
GET-ELE-TYPE SPEC-ANA REST-DECL TYPE-AND GEN-DECL TOP-TYPE STRUCTYP SPECIALIZE 
PUT-ANA NTH-REST-ANA TYPESAME ADDVMESS NODE1 ISTYPE? TASTEFUL-DECL TYPE-MERGE 
ACTIV? TYPE-OK? MESSAGE %<TYPE-W NODE VECTOR> %<RGLOC ANALYZERS T> %<TYPE-C NODE
VECTOR> LIST ALL ERROR "TOO FEW ARGS TO " "TOO MANY ARGS TO " T 
"BAD ARGUMENT TO " ANALY-OK (ANY) VERBOSE ANA-ACT (ACTIVATION) FCN (NODE) VARTBL
 %<TYPE-W SYMTAB VECTOR> (SYMTAB) TMPS (FIX) HTMPS TRUTH (LIST) UNTRUTH WHO WHON
 PRED LIFE USE-COUNT "FUNCTION RETURNS WRONG TYPE " NO-RETURN 
" RETURNED VALUE VIOLATES VALUE DECL  OF " ANY %<RGLOC BANALS T> TUPLE 
"BAD AUX/OPT INIT " "DECL MISMATCH" INCONSISTANCY "EMPTY KIDS LIST " ATOM 
" because it never returns" "This object ends a sequence of forms" 
"NO ARGS ASSIGNED? " ASSIGNED? <OR <PRIMTYPE FRAME> PROCESS> 
"External reference to LVAL:  " "TOO MANY ARGS TO ASSIGNED?" <OR ATOM FALSE> 
"NO ARGS TO LVAL " %<TYPE-C SYMTAB VECTOR> LVAL FALSE <NOT FALSE> 
"External variable being referenced:  " CAREFUL "BAD CALL TO LVAL " 
"TOO FEW ARGS TO SET " SET "DECL VIOLATION " "External variable being SET:  " 
"External variable being SET: " "BAD CALL TO SET " APPLICABLE FIX ANALYSIS 
TANALYSIS  %<RSUBR!- '[ %<PCODE!- "SYMANA" 9947> ANONF2!-TMP #DECL ("VALUE" ANY 
NODE ANY) SPEC-FLUSH PUT-FLUSH TYPE-OK? ALL]> %<RGLOC MANIFLIST T> %<RGLOC 
GVARTBL T> STRUCTURED <NOT STRUCTURED> "Not open compiled due to SEGMENT." 
WARNING "STACKFORM IS HAZARDOUS TO YOUR CODE!" STACKFORM 
" STACKFORM CAN'T STOP " %<RGLOC SUBRS T> %<RGLOC TEMPLATES T> (ANY ANY) GVAL 
SETG "ATTEMPT TO SETG MANIFEST VARIABLE " " GLOBAL DECL VIOLATION " [] NTH OR 
" OR/AND MAY RETURN WRONG TYPE " " its type is:  " 
"This object prematurely ends AND/OR:  " "UNREACHABLE AND/OR CLAUSE " CASE (<OR 
NODE FALSE>) "EMPTY COND CLAUSE " " and non-reachable code in clause." 
"Cond predicate always FALSE:  " " type of value:  " 
"Cond ended prematurely because predicate always true:  " PNOD %<RGLOC BIND T> 
"PROG RETURNS WRONG TYPE " %<RGLOC REPEAT T> 
" ERROR PROG VALUE VIOLATES VALUE DECL OF " DEBUGSW %<RGLOC DEBUGSW T> OUTCHAN 
" NOT OK current type:  " " assumed type:  " NOT "TOO MANY ARGS TO RETURN " 
RETURN %<RGLOC LVAL T> ACTIVATION AGAIN-RETURN AGAIN "WRONG TYPE FOR AGAIN " 
"TOO MANY ARGS TO AGAIN " WARGINING "GO/TAG NOT REALLY SUPPORTED." <OR TAG ATOM>
 GO TAG "BAD ARG TO GO " "WRONG NO. OF ARGS TO GO " "BAD ARG TO TAG " 
"NOT IN PROG/REPEAT " %<RGLOC SUBR-C-AN T> NOD ARGS TYP TMPL NRGS1 ARGACS STACK 
 %<RSUBR!- '[ %<PCODE!- "SYMANA" 9983> ANONF2!-TMP #DECL ("VALUE" <OR FALSE FIX 
NODE> "TUPLE" TUPLE) SPEC-FLUSH PUT-FLUSH ARGCHK MESSAGE NODE1 TMPL NRGS1 NOD 
ARGS TYP ALL ANY ARGACS %<TYPE-W NODE VECTOR> ERROR " TOO MANY ARGS TO " 
" TOO FEW ARGS TO " STACK]> SEGMENT "ILLEGAL SEGMENT " REST PRIMTYPE ![LIST 
VECTOR UVECTOR TUPLE!] COPY-LIST-CODE "BAD CALL TO QUOTE " IND GROUP-NAME (STACK
) CHTYPE " 2D ARG CHTYPE NOT A TYPE " " PRIMTYPES DIFFER CHTYPE" 
"Can't open compile CHTYPE." ASCII <OR FIX CHARACTER> CHARACTER UNWIND %<RGLOC 
IBYTES T> ISTRING IBYTES <OR FORM LIST VECTOR UVECTOR> "UNCERTAIN USE OF " FORM 
BYTES %<RGLOC ISTRING T> " UNCERTAIN USE OF " <OR LIST VECTOR UVECTOR FORM> %<
RGLOC REGS T>]>> 
<AND <ASSIGNED? GLUE> .GLUE <PUT ,ANA PGLUE ![715827882 -22817013761 -1 -1 -1 -1
-1 -1 -1 -1 -4194304 0!]>> 


<SETG ARGCHK %<RSUBR-ENTRY '[ANA ARGCHK #DECL ("VALUE" ATOM FIX <OR <LIST FIX 
FIX> FIX> ANY)] 149>> 

<SETG EANA %<RSUBR-ENTRY '[ANA EANA #DECL ("VALUE" ANY NODE ANY ANY)] 201>> 

" FUNC-ANA main entry to analysis phase.  Analyzes bindings then body." 

<SETG FUNC-ANA %<RSUBR-ENTRY '[ANA FUNC-ANA #DECL ("VALUE" ANY ANY ANY)] 233>> 

<SETG FUNC-AN1 %<RSUBR-ENTRY '[ANA FUNC-AN1 #DECL ("VALUE" ANY NODE ANY)] 286>> 

" BIND-AN analyze binding structure for PROGs, FUNCTIONs etc." 

<SETG BIND-AN %<RSUBR-ENTRY '[ANA BIND-AN #DECL ("VALUE" ATOM <LIST [REST SYMTAB
]>)] 574>> 

" ENTROPY ignore call and return." 

<SETG ENTROPY %<RSUBR-ENTRY '[ANA ENTROPY #DECL ("VALUE" ATOM ANY)] 623>> 

<SETG TUP-BAN %<RSUBR-ENTRY '[ANA TUP-BAN #DECL ("VALUE" SYMTAB SYMTAB)] 635>> 

" Analyze AUX and OPTIONAL intializations." 

<SETG NORM-BAN %<RSUBR-ENTRY '[ANA NORM-BAN #DECL ("VALUE" SYMTAB SYMTAB)] 714>> 

" ARGS-BAN analyze ARGS decl (change to OPTIONAL in some cases)." 

<SETG ARGS-BAN %<RSUBR-ENTRY '[ANA ARGS-BAN #DECL ("VALUE" <OR FALSE SYMTAB> 
SYMTAB)] 837>> 

<SETG NAUX-BAN %<RSUBR-ENTRY '[ANA NAUX-BAN #DECL ("VALUE" SYMTAB SYMTAB)] 928>> 

" VECTOR of binding analyzers." 

<SETG BANALS ![,ENTROPY ,NORM-BAN ,NAUX-BAN ,TUP-BAN ,ARGS-BAN ,NORM-BAN ,
NORM-BAN ,ENTROPY ,ENTROPY ,ENTROPY ,ENTROPY ,ENTROPY ,ENTROPY!]> 

" SEQ-AN analyze a sequence of NODES discarding values until the last." 

<SETG SEQ-AN %<RSUBR-ENTRY '[ANA SEQ-AN #DECL ("VALUE" ANY <LIST [REST NODE]> 
ANY "OPTIONAL" ANY)] 972>> 

" ANALYZE ASSIGNED? usage." 

<SETG ASSIGNED?-ANA %<RSUBR-ENTRY '[ANA ASSIGNED?-ANA #DECL ("VALUE" ANY NODE 
ANY)] 1089>> 

<PUT ,ASSIGNED? ANALYSIS ,ASSIGNED?-ANA> 

" ANALYZE LVAL usage.  Become either direct reference or PUSHJ" 

<SETG LVAL-ANA %<RSUBR-ENTRY '[ANA LVAL-ANA #DECL ("VALUE" ANY NODE ANY)] 1234>> 

<PUT ,LVAL ANALYSIS ,LVAL-ANA> 

" SET-ANA analyze uses of SET." 

<SETG SET-ANA %<RSUBR-ENTRY '[ANA SET-ANA #DECL ("VALUE" ANY NODE ANY)] 1568>> 

<PUT ,SET ANALYSIS ,SET-ANA> 

<SETG MUNG-L-D-STATE %<RSUBR-ENTRY '[ANA MUNG-L-D-STATE #DECL ("VALUE" ATOM <OR 
VECTOR SYMTAB>)] 2021>> 

<SETG MRESTORE-L-D-STATE %<RSUBR-ENTRY '[ANA MRESTORE-L-D-STATE #DECL ("VALUE" 
ATOM ANY ANY ANY)] 2047>> 

<SETG FREST-L-D-STATE %<RSUBR-ENTRY '[ANA FREST-L-D-STATE #DECL ("VALUE" <OR 
FALSE SYMTAB> LIST)] 2074>> 

<SETG RESTORE-L-D-STATE %<RSUBR-ENTRY '[ANA RESTORE-L-D-STATE #DECL ("VALUE" 
ATOM <LIST [REST <LIST SYMTAB LIST>]> <OR SYMTAB VECTOR> "OPTIONAL" ANY)] 2123>> 

<SETG SAVE-L-D-STATE %<RSUBR-ENTRY '[ANA SAVE-L-D-STATE #DECL ("VALUE" LIST <OR 
VECTOR SYMTAB>)] 2295>> 

<SETG MSAVE-L-D-STATE %<RSUBR-ENTRY '[ANA MSAVE-L-D-STATE #DECL ("VALUE" LIST 
LIST <OR VECTOR SYMTAB>)] 2369>> 

<SETG LMERGE %<RSUBR-ENTRY '[ANA LMERGE #DECL ("VALUE" <LIST [REST NODE]> <LIST 
[REST NODE]> <LIST [REST NODE]>)] 2540>> 

<SETG MAKE-DEAD %<RSUBR-ENTRY '[ANA MAKE-DEAD #DECL ("VALUE" SYMTAB NODE SYMTAB)
] 2699>> 

<SETG KILL-REM %<RSUBR-ENTRY '[ANA KILL-REM #DECL ("VALUE" LIST <LIST [REST 
SYMTAB]> <OR SYMTAB VECTOR>)] 2719>> 

<SETG SAVE-SURVIVORS %<RSUBR-ENTRY '[ANA SAVE-SURVIVORS #DECL ("VALUE" <OR FALSE
<LIST ANY ATOM> SYMTAB> <LIST [REST <LIST SYMTAB LIST>]> <LIST [REST SYMTAB]> 
"OPTIONAL" ANY)] 2774>> 

<SETG REVIVE %<RSUBR-ENTRY '[ANA REVIVE #DECL ("VALUE" <OR FALSE NODE> NODE 
SYMTAB)] 2859>> 

" Ananlyze a FORM that could really be an NTH." 

<SETG FORM-F-ANA %<RSUBR-ENTRY '[ANA FORM-F-ANA #DECL ("VALUE" ANY NODE ANY)] 
2944>> 

" Further analyze a FORM." 

<SETG FORM-AN %<RSUBR-ENTRY '[ANA FORM-AN #DECL ("VALUE" ANY NODE ANY)] 3072>> 

"Determine if an ATOM is mainfest." 

<SETG MANIFESTQ %<RSUBR-ENTRY '[ANA MANIFESTQ #DECL ("VALUE" <OR ATOM FALSE> 
ATOM)] 3117>> 

" Find a decl associated with a GLOBAL atom." 

<SETG GSRCH-SYM %<RSUBR-ENTRY '[ANA GSRCH-SYM #DECL ("VALUE" <OR FALSE <VECTOR [
2 ANY]>> ATOM)] 3154>> 

" Search for a decl associated with a local value." 

<SETG SRCH-SYM %<RSUBR-ENTRY '[ANA SRCH-SYM #DECL ("VALUE" <OR FALSE <<PRIMTYPE 
VECTOR> [2 ANY]>> ATOM)] 3192>> 

" Here to flush decls of specials for an external function call." 

<SETG SPEC-FLUSH %<RSUBR-ENTRY '[ANA SPEC-FLUSH #DECL ("VALUE" ATOM)] 3233>> 

" Here to flush decls when a PUT, PUTREST or external call happens." 

<SETG PUT-FLUSH %<RSUBR-ENTRY '[ANA PUT-FLUSH #DECL ("VALUE" ATOM ANY)] 3244>> 

<SETG FLUSHER %<RSUBR-ENTRY '[ANA FLUSHER #DECL ("VALUE" ATOM ANY)] 3258>> 

<SETG FLUSH-FIX-TYPE %<RSUBR-ENTRY '[ANA FLUSH-FIX-TYPE #DECL ("VALUE" ANY 
SYMTAB ANY ANY)] 3395>> 

" Punt forms with segments in them." 

<SETG SEGFLUSH %<RSUBR-ENTRY '[ANA SEGFLUSH #DECL ("VALUE" ANY NODE ANY)] 3471>> 

" STACKFORM analyzer." 

<SETG STACKFORM-ANA %<RSUBR-ENTRY '[ANA STACKFORM-ANA #DECL ("VALUE" ANY NODE 
ANY)] 3522>> 

<PUT ,STACKFORM ANALYSIS ,STACKFORM-ANA> 

" Determine if the arg to STACKFORM is a SUBR." 

<SETG APPLTYP %<RSUBR-ENTRY '[ANA APPLTYP #DECL ("VALUE" <OR ATOM FORM> NODE)] 
3633>> 

" Return type returned by a SUBR." 

<SETG SUBR-TYPE %<RSUBR-ENTRY '[ANA SUBR-TYPE #DECL ("VALUE" <OR ATOM FORM> SUBR
)] 3677>> 

" Access the SUBR data base for return type." 

<SETG GET-TMP %<RSUBR-ENTRY '[ANA GET-TMP #DECL ("VALUE" <LIST [2 ANY]> ANY)] 
3708>> 

" GVAL analyzer." 

<SETG GVAL-ANA %<RSUBR-ENTRY '[ANA GVAL-ANA #DECL ("VALUE" ANY NODE ANY)] 3760>> 

<PUT ,GVAL ANALYSIS ,GVAL-ANA> 

" Analyze SETG usage." 

<SETG SETG-ANA %<RSUBR-ENTRY '[ANA SETG-ANA #DECL ("VALUE" ANY NODE ANY)] 3871>> 

<PUT ,SETG ANALYSIS ,SETG-ANA> 

<SETG BUILD-TYPE-LIST %<RSUBR-ENTRY '[ANA BUILD-TYPE-LIST #DECL ("VALUE" LIST <
OR VECTOR SYMTAB>)] 4034>> 

<SETG RESET-VARS %<RSUBR-ENTRY '[ANA RESET-VARS #DECL ("VALUE" ATOM <OR SYMTAB 
VECTOR> "OPTIONAL" <OR SYMTAB VECTOR> ANY)] 4121>> 

<SETG GET-CURRENT-TYPE %<RSUBR-ENTRY '[ANA GET-CURRENT-TYPE #DECL ("VALUE" ANY 
SYMTAB)] 4202>> 

<SETG SET-CURRENT-TYPE %<RSUBR-ENTRY '[ANA SET-CURRENT-TYPE #DECL ("VALUE" 
SYMTAB SYMTAB ANY)] 4233>> 

<SETG ANDUPC %<RSUBR-ENTRY '[ANA ANDUPC #DECL ("VALUE" <LIST [REST <LIST SYMTAB 
ANY ANY>]> <OR VECTOR SYMTAB> <LIST [REST <LIST SYMTAB ANY ANY>]>)] 4306>> 

<SETG ANDUP %<RSUBR-ENTRY '[ANA ANDUP #DECL ("VALUE" <LIST [REST <LIST SYMTAB 
ANY ANY>]> <LIST [REST <LIST SYMTAB ANY ANY>]> <LIST [REST <LIST SYMTAB ANY ANY>
]>)] 4349>> 

<SETG ORUPC %<RSUBR-ENTRY '[ANA ORUPC #DECL ("VALUE" <LIST [REST <LIST SYMTAB 
ANY ANY>]> <OR VECTOR SYMTAB> <LIST [REST <LIST SYMTAB ANY ANY>]>)] 4388>> 

<SETG SAME-DECL? %<RSUBR-ENTRY '[ANA SAME-DECL? #DECL ("VALUE" <OR ATOM FALSE> 
ANY ANY)] 4511>> 

<SETG ORUP %<RSUBR-ENTRY '[ANA ORUP #DECL ("VALUE" <LIST [REST <LIST SYMTAB <OR 
ATOM FORM SEGMENT> <OR ATOM FALSE>>]> <LIST [REST <LIST SYMTAB <OR ATOM FORM 
SEGMENT> <OR ATOM FALSE>>]> <LIST [REST <LIST SYMTAB <OR ATOM FORM SEGMENT> <OR 
ATOM FALSE>>]>)] 4547>> 

<SETG ASSERT-TYPES %<RSUBR-ENTRY '[ANA ASSERT-TYPES #DECL ("VALUE" <OR FALSE 
SYMTAB> <LIST [REST <LIST SYMTAB ANY ANY>]>)] 4708>> 

<SETG ADD-TYPE-LIST %<RSUBR-ENTRY '[ANA ADD-TYPE-LIST #DECL ("VALUE" LIST SYMTAB
<OR ATOM FALSE FORM SEGMENT> LIST <OR ATOM FALSE> "OPTIONAL" <LIST [REST ATOM 
FIX]>)] 4743>> 

<SETG TYPE-NTH-REST %<RSUBR-ENTRY '[ANA TYPE-NTH-REST #DECL ("VALUE" ANY ANY <
LIST [REST ATOM FIX]>)] 4878>> 

" AND/OR analyzer.  Called from AND-ANA and OR-ANA." 

<SETG BOOL-AN %<RSUBR-ENTRY '[ANA BOOL-AN #DECL ("VALUE" ANY NODE ANY ANY)] 4988
>> 

<SETG AND-ANA %<RSUBR-ENTRY '[ANA AND-ANA #DECL ("VALUE" ANY NODE ANY)] 5443>> 

<PUT ,AND ANALYSIS ,AND-ANA> 

<SETG OR-ANA %<RSUBR-ENTRY '[ANA OR-ANA #DECL ("VALUE" ANY NODE ANY)] 5466>> 

<PUT ,OR ANALYSIS ,OR-ANA> 

" COND analyzer." 

<SETG CASE-ANA %<RSUBR-ENTRY '[ANA CASE-ANA #DECL ("VALUE" ANY ANY ANY)] 5488>> 

<SETG COND-ANA %<RSUBR-ENTRY '[ANA COND-ANA #DECL ("VALUE" ANY ANY ANY)] 5507>> 

<SETG COND-CASE %<RSUBR-ENTRY '[ANA COND-CASE #DECL ("VALUE" ANY NODE ANY ANY)] 
5527>> 

" PROG/REPEAT analyzer.  Hacks bindings and sets up info for GO/RETURN/AGAIN
  analyzers." 

<SETG PRG-REP-ANA %<RSUBR-ENTRY '[ANA PRG-REP-ANA #DECL ("VALUE" ANY NODE ANY)] 
6063>> 

" Determine if assumptions made for this loop are still valid." 

<SETG ASSUM-OK? %<RSUBR-ENTRY '[ANA ASSUM-OK? #DECL ("VALUE" <OR ATOM FALSE> <
LIST [REST <LIST SYMTAB ANY ANY>]> <LIST [REST <LIST SYMTAB ANY ANY>]>)] 6572>> 

<SETG NOTIFY %<RSUBR-ENTRY '[ANA NOTIFY #DECL ("VALUE" ANY ANY)] 6796>> 

" Analyze RETURN from a PROG/REPEAT.  Check with PROGs final type." 

<SETG RETURN-ANA %<RSUBR-ENTRY '[ANA RETURN-ANA #DECL ("VALUE" ANY NODE ANY)] 
6841>> 

<PUT ,RETURN ANALYSIS ,RETURN-ANA> 

<SETG ACT-CHECK %<RSUBR-ENTRY '[ANA ACT-CHECK #DECL ("VALUE" <OR FALSE NODE> 
NODE)] 7028>> 

" AGAIN analyzer." 

<SETG AGAIN-ANA %<RSUBR-ENTRY '[ANA AGAIN-ANA #DECL ("VALUE" ANY NODE ANY)] 7128
>> 

<PUT ,AGAIN ANALYSIS ,AGAIN-ANA> 

" Analyze losing GOs." 

<SETG GO-ANA %<RSUBR-ENTRY '[ANA GO-ANA #DECL ("VALUE" ANY NODE ANY)] 7250>> 

<PUT ,GO ANALYSIS ,GO-ANA> 

<SETG TAG-ANA %<RSUBR-ENTRY '[ANA TAG-ANA #DECL ("VALUE" ANY NODE ANY)] 7349>> 

<PUT ,TAG ANALYSIS ,TAG-ANA> 

" If not in PROG/REPEAT complain about NAME." 

<SETG PROGCHK %<RSUBR-ENTRY '[ANA PROGCHK #DECL ("VALUE" ANY ANY)] 7440>> 

" Dispatch to special handlers for SUBRs.  Or use standard." 

<SETG SUBR-ANA %<RSUBR-ENTRY '[ANA SUBR-ANA #DECL ("VALUE" ANY NODE ANY)] 7463>> 

" Hairy SUBR call analyzer.  Also looks for internal calls." 

<SETG SUBR-C-AN %<RSUBR-ENTRY '[ANA SUBR-C-AN #DECL ("VALUE" ANY NODE ANY)] 7497
>> 

<SETG SEGMENT-ANA %<RSUBR-ENTRY '[ANA SEGMENT-ANA #DECL ("VALUE" ANY ANY ANY)] 
7704>> 

" Analyze VECTOR, UVECTOR and LIST builders." 

<SETG COPY-AN %<RSUBR-ENTRY '[ANA COPY-AN #DECL ("VALUE" ANY NODE ANY)] 7723>> 

" Analyze quoted objects, for structures hack type specs." 

<SETG QUOTE-ANA %<RSUBR-ENTRY '[ANA QUOTE-ANA #DECL ("VALUE" ANY NODE ANY)] 8141
>> 

<SETG QUOTE-ANA2 %<RSUBR-ENTRY '[ANA QUOTE-ANA2 #DECL ("VALUE" ANY NODE ANY)] 
8162>> 

<PUT ,QUOTE ANALYSIS ,QUOTE-ANA2> 

<SETG IRSUBR-ANA %<RSUBR-ENTRY '[ANA IRSUBR-ANA #DECL ("VALUE" ANY ANY ANY)] 
8198>> 

" Analyze a call to an RSUBR." 

<SETG RSUBR-ANA %<RSUBR-ENTRY '[ANA RSUBR-ANA #DECL ("VALUE" ANY NODE ANY)] 8218
>> 

<SETG RSUBRC-ANA %<RSUBR-ENTRY '[ANA RSUBRC-ANA #DECL ("VALUE" ANY NODE ANY <
PRIMTYPE LIST>)] 8292>> 

" Analyze CHTYPE, in some cases do it at compile time." 

<SETG CHTYPE-ANA %<RSUBR-ENTRY '[ANA CHTYPE-ANA #DECL ("VALUE" ANY NODE ANY)] 
8419>> 

<PUT ,CHTYPE ANALYSIS ,CHTYPE-ANA> 

" Analyze use of ASCII sometimes do at compile time." 

<SETG ASCII-ANA %<RSUBR-ENTRY '[ANA ASCII-ANA #DECL ("VALUE" ANY NODE ANY)] 8586
>> 

<PUT ,ASCII ANALYSIS ,ASCII-ANA> 

<SETG UNWIND-ANA %<RSUBR-ENTRY '[ANA UNWIND-ANA #DECL ("VALUE" ANY NODE ANY)] 
8702>> 

" Analyze ISTRING/ILIST/IVECTOR/IUVECTOR in cases of known and unknown last arg." 

<SETG ISTRUC-ANA %<RSUBR-ENTRY '[ANA ISTRUC-ANA #DECL ("VALUE" ANY NODE ANY)] 
8747>> 

<SETG ISTRUC2-ANA %<RSUBR-ENTRY '[ANA ISTRUC2-ANA #DECL ("VALUE" ANY NODE ANY)] 
8998>> 

" Analyze READ type SUBRS in two cases (print uncertain usage message maybe?)" 

<SETG READ-ANA %<RSUBR-ENTRY '[ANA READ-ANA #DECL ("VALUE" ANY NODE ANY)] 9220>> 

<SETG READ2-ANA %<RSUBR-ENTRY '[ANA READ2-ANA #DECL ("VALUE" ANY NODE ANY)] 9312
>> 

<SETG GET-ANA %<RSUBR-ENTRY '[ANA GET-ANA #DECL ("VALUE" ANY NODE ANY)] 9372>> 

<SETG GET2-ANA %<RSUBR-ENTRY '[ANA GET2-ANA #DECL ("VALUE" ANY NODE ANY)] 9449>> 

<SETG EANAQ %<RSUBR-ENTRY '[ANA EANAQ #DECL ("VALUE" ANY NODE ANY ANY ANY)] 9514
>> 

<SETG USE-REG %<RSUBR-ENTRY '[ANA USE-REG #DECL ("VALUE" <OR FALSE FIX>)] 9560>> 

<SETG UNUSE-REG %<RSUBR-ENTRY '[ANA UNUSE-REG #DECL ("VALUE" FIX)] 9603>> 

<SETG REGFLS %<RSUBR-ENTRY '[ANA REGFLS #DECL ("VALUE" FIX)] 9630>> 

<SETG ANALYZERS <DISPATCH ,SUBR-ANA (,QUOTE-CODE ,QUOTE-ANA) (,FUNCTION-CODE ,
FUNC-ANA) (,SEGMENT-CODE ,SEGMENT-ANA) (,FORM-CODE ,FORM-AN) (,PROG-CODE ,
PRG-REP-ANA) (,SUBR-CODE ,SUBR-ANA) (,COND-CODE ,COND-ANA) (,COPY-CODE ,COPY-AN)
(,RSUBR-CODE ,RSUBR-ANA) (,ISTRUC-CODE ,ISTRUC-ANA) (,ISTRUC2-CODE ,ISTRUC2-ANA)
(,READ-EOF-CODE ,READ-ANA) (,READ-EOF2-CODE ,READ2-ANA) (,GET-CODE ,GET-ANA) (,
GET2-CODE ,GET2-ANA) (,MAP-CODE ,MAPPER-AN) (,MARGS-CODE ,MARGS-ANA) (,
ARITH-CODE ,ARITH-ANA) (,TEST-CODE ,ARITHP-ANA) (,0-TST-CODE ,ARITHP-ANA) (,
1?-CODE ,ARITHP-ANA) (,MIN-MAX-CODE ,ARITH-ANA) (,ABS-CODE ,ABS-ANA) (,FIX-CODE 
,FIX-ANA) (,FLOAT-CODE ,FLOAT-ANA) (,MOD-CODE ,MOD-ANA) (,LNTH-CODE ,LENGTH-ANA)
(,MT-CODE ,EMPTY?-ANA) (,NTH-CODE ,NTH-ANA) (,REST-CODE ,REST-ANA) (,PUT-CODE ,
PUT-ANA) (,PUTR-CODE ,PUTREST-ANA) (,UNWIND-CODE ,UNWIND-ANA) (,FORM-F-CODE ,
FORM-F-ANA) (,IRSUBR-CODE ,IRSUBR-ANA) (,ROT-CODE ,ROT-ANA) (,LSH-CODE ,LSH-ANA)
(,BIT-TEST-CODE ,BIT-TEST-ANA) (,CASE-CODE ,CASE-ANA) (,COPY-LIST-CODE ,COPY-AN)
>> 
