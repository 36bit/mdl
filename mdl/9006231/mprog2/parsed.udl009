<PACKAGE "PARSE-DATE">

<ENTRY PARSE-DATE PARSE-NUM SYM=? MONTH-SIZE DAYS MONTHS>

<USE "ITIME">

"*************************** DATE HACKING ***************************"

"Parse all sorts of hairy date specs:
	Used in :REMIND and in ACK. ON FAILURE."

<DEFINE PARSE-DATE (HAIRY "OPTIONAL" (FUTURE? T)
		    "AUX" (DF <ITIME>) (YMD <LTIME>) (DV <1 .YMD>)
		    (DT <2 .YMD>) (YY <>) (MM <>) (DD <>) P) 
   #DECL ((HAIRY) LIST (DF) FIX (VALUE) <OR FALSE FIX> (YMD) <LIST [2 LIST]>
	  (DV DT) <LIST [3 FIX]> (P) ANY (YY MM DD) <OR STRING FIX FALSE>
	  (FUTURE?) <OR ATOM FALSE>)
   <COND
    (<AND <1? <LENGTH .HAIRY>>
	  <TYPE? <SET P <PARSE-NUM <1 .HAIRY>>> STRING>
	  <SET P <SYM=? .P ,DAYS>>>
     <SET DD <IDAY>>
     <COND (<1? .P>)
	   (<==? .P 2> <SET P -1>)
	   (<==? .P 3> <SET P 0>)
	   (ELSE
	    <SET P <- .P 4>>
	    <COND (.FUTURE?
		   <SET P <COND (<L=? .P .DD> <- <+ .P 7> .DD>)
				(ELSE <- .P .DD>)>>)
		  (ELSE
		   <SET P <COND (<=? .DD .P> 0)
				(<G? .P .DD> <- .P <+ .DD 7>>)
				(ELSE <- .P .DD>)>>)>)>
     <CHTYPE <PUTBITS <+ .DF <* .P 262144>> <BITS 18> </ 262144 4>> FIX>)
    (<MAPR <>
	   <FUNCTION (XX "AUX" (X <1 .XX>)) 
		   #DECL ((X) ANY)
		   <COND (<AND <TYPE? <SET P <PARSE-NUM .X>> FIX>
			       <COND (<L? .P 0> <>)
				     (<G? .P 31>
				      <AND <NOT .YY>
					   <PUT .DV 1 <SET YY <MOD .P 100>>>>)
				     (<G? .P 12>
				      <AND <NOT .DD> <PUT .DV 3 <SET DD .P>>>)
				     (<1? <LENGTH .XX>>
				      <COND (<NOT .DD> <PUT .DV 3 <SET DD .P>>)
					    (<NOT .MM>
					     <PUT .DV 2 <SET MM .P>>)>)
				     (<NOT .MM> <PUT .DV 2 <SET MM .P>>)
				     (ELSE
				      <AND <NOT .DD>
					   <PUT .DV 3 <SET DD .P>>>)>>)
			 (<AND <TYPE? .P STRING> <SET P <SYM=? .P ,MONTHS>>>
			  <COND (<NOT .MM> <PUT .DV 2 .P>)
				(<TYPE? .MM FIX>
				 <PUT .DV 3 <SET DD .MM>>
				 <PUT .DV 2 .P>)>
			  <SET MM .P>)
			 (ELSE <MAPLEAVE <CHTYPE (.X) FALSE>>)>>
	   .HAIRY>
     <SET DF <BTIME <1 .DV> <2 .DV> <3 .DV> 6 0 0>>)>>

"Parse a number from a string and return it or the string if can't"

<DEFINE PARSE-NUM (ST "AUX" (N 0))
	#DECL ((ST) STRING (N) FIX (VALUE) <OR FIX STRING>)
	<COND (<MAPF <>
		     <FUNCTION (C)
		         #DECL ((C) <PRIMTYPE WORD>)
			 <COND (<AND <G=? <SET C <ASCII .C>> *60*>
				     <L=? .C *72*>>
				<SET N <+ <* .N 10> .C -48>>)
			       (ELSE <MAPLEAVE <>>)>>
		     .ST>
	       .N)
	      (ELSE .ST)>>

<DEFINE SYM=? (STR MON) 
	#DECL ((STR) STRING (MON) <VECTOR [REST STRING]> (VALUE) <OR FALSE FIX>)
	<REPEAT ()
		<COND (<EMPTY? .MON> <RETURN <>>)
		      (<G=? <COMPS .STR <1 .MON>> 3>
		       <RETURN <+ 1 <- <LENGTH <TOP .MON>> <LENGTH .MON>>>>)
		      (ELSE <SET MON <REST .MON>>)>>>

<SETG MONTH-SIZE '![31 29 31 30 31 30 31 31 30 31 30 31!]>

<SETG DAYS '["TOMORROW" "YESTERDAY" "TODAY" "SUNDAY" "MONDAY" "TUESDAY"
	     "WEDNESDAY" "THURSDAY" "FRIDAY" "SATURDAY"]>

<SETG MONTHS
      '["JANUARY"
	"FEBRUARY"
	"MARCH"
	"APRIL"
	"MAY"
	"JUNE"
	"JULY"
	"AUGUST"
	"SEPTEMBER"
	"OCTOBER"
	"NOVEMBER"
	"DECEMBER"]>

<GDECL (MONTH-SIZE) <UVECTOR [REST FIX]>
       (DAYS MONTHS) <VECTOR [REST STRING]>>

"Take two strings and return number of characters they have in common."

<DEFINE COMPS (S1 S2 "AUX" (N 0)) 
	#DECL ((S1 S2) STRING (N VALUE) FIX)
	<MAPF <>
	      <FUNCTION (C1 C2 "AUX" (A1 <ASCII .C1>) (A2 <ASCII .C2>)) 
		      #DECL ((C1 C2) CHARACTER (A1 A2) FIX)
		      <COND (<==? <COND (<AND <G? .A1 96> <L? .A1 123>>
					 <- .A1 32>)
					(ELSE .A1)>
				  <COND (<AND <G? .A2 96> <L? .A2 123>>
					 <- .A2 32>)
					(ELSE .A2)>>
			     <SET N <+ .N 1>>)
			    (ELSE <MAPLEAVE>)>>
	      .S1
	      .S2>
	.N>

<ENDPACKAGE>
