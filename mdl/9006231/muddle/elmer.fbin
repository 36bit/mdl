'<PCODE "1ELMER">

<PACKAGE "GLUE"> 

<ENTRY GLUE-MAX-SPACE PKG SURV VICTIMS GROUP-GLUE FLUSHED> 

<USE "LIST-HACKS"> 

<SETG RAND  %<RSUBR!- '[ %<PCODE!- "1ELMER" 0> RAND #DECL ("VALUE" FIX FIX) 
LREVERSE PASS-1 VICTIMS SURV PKG RSBS (LIST) WINNERS FOO 
"Group glue ELMER at work." T %<RGLOC FLUSHED T> #FALSE ("Not a valid GROUP.") 
"Finished pass 1 of GLUE, code length = " #FALSE ("No RSUBRS") ![!] %<RGLOC 
GLUE-MAX-SPACE T> "PRINTB" %<RGLOC MUDDLE T> "GLUETEMP" "_GLUE >" "READB" ":<" 
PHRED RSUBR-NOT-IN-SENT-LIST!-ERRORS "Starting final code update." 
BAD-INTERNAL-GLUE-STUFF!-ERRORS "DONE" (0 #CODE ![!]) CODE-RAN-OUT PACKAGE 
OBLIST %<RGLOC UNIQ.TABLE T> %<TYPE-W ASOTAB UVECTOR> %<TYPE-W HASH WORD> ANY 
GVAL UVECTOR WORD ![0!] AND <ASSIGNED? GLUE> .GLUE PUT GLUE SETG VALUE 
"RSUBR-ENTRY named:  " %<RGLOC OUTCHAN T> "Warning--Lacks glue bits. " 
"RSUBR named:  " RSUBR "Lacks good FIXUPS." FIX #CODE ![!] "ERROR:  " 
" must be mcalled by " 
",
has no entry code.  Is one of your crufties a chomper?" BAD-GLUE-BITS!-ERRORS 
"Bit is " " Index is " " Word is " " Rel-loc is " "Copying fixups." 
"Final group cleanup." "Flushing RSUBR-ENTRY "]>> 
<AND <ASSIGNED? GLUE> .GLUE <PUT ,RAND PGLUE ![738197503 -1 -1 -64 0!]>> 


<SETG ROTATE %<RSUBR-ENTRY '[RAND ROTATE #DECL ("VALUE" WORD <PRIMTYPE WORD> 
"OPTIONAL" FIX)] 141>> 

<SETG RGLOC-CHTYPE %<RSUBR-ENTRY '[RAND RGLOC-CHTYPE #DECL ("VALUE" <PRIMTYPE 
WORD> LOCR)] 165>> 

<SETG HASHER %<RSUBR-ENTRY '[RAND HASHER #DECL (<OR <PRIMTYPE ATOM> <PRIMTYPE 
STRING>>)] 175>> 

<SET VICTIMS <SET PKG <SET SURV <>>>> 

<BLOCK (<ROOT>)> 

<SET GLUE T> 

<ENDBLOCK> 

<NEWTYPE ASOTAB UVECTOR> 

<NEWTYPE HASH WORD> 

<SETG BYTER %<RSUBR-ENTRY '[RAND BYTER #DECL ("VALUE" <BYTES 2 0> <UVECTOR [REST
<PRIMTYPE WORD>]>)] 206>> 

<SETG SUBUV %<RSUBR-ENTRY '[RAND SUBUV #DECL ("VALUE" UVECTOR UVECTOR FIX)] 220>
> 

<SETG FIXMUNG %<RSUBR-ENTRY '[RAND FIXMUNG #DECL ("VALUE" ANY UVECTOR FIX)] 245>
> 

<SETG MAKE-CODE %<RSUBR-ENTRY '[RAND MAKE-CODE #DECL ("VALUE" <UVECTOR [REST FIX
]> FIX <LIST [REST <LIST FIX <UVECTOR [REST FIX]>>]> <LIST [REST <PRIMTYPE WORD>
]> FIX)] 277>> 

<MANIFEST R M HW HW-1 PJC LHW AC INSFLD INDEX-FIELD> 

<SETG R 14> 

<SETG M 13> 

<SETG HW-1 <BITS 17 1>> 

<SETG PJC 23751557120> 

<SETG INSFLD <BITS 9 27>> 

<SETG HW <BITS 18>> 

<SETG LHW <BITS 18 18>> 

<SETG AC <BITS 4 23>> 

<SETG INDEX-FIELD <BITS 4 18>> 

<SETG ICL 1> 

<SETG PCL 2> 

<SETG MCL 3> 

<MANIFEST ICL PCL MCL> 

<SETG FIN-LH <BITS 16 18>> 

<SETG FIN-TYPE <BITS 2 34>> 

<MANIFEST FIN-LH FIN-TYPE> 

<SETG GLUE-MAX-SPACE <>> 

"" 

<SETG GROUP-GLUE %<RSUBR-ENTRY '[RAND GROUP-GLUE #DECL ("VALUE" <OR FALSE STRING
> ATOM "OPTIONAL" <OR ATOM FALSE> <OR CHANNEL FALSE> <OR LIST STRING FALSE> <OR 
FALSE LIST> <OR FALSE LIST>)] 323>> 

"" 

<SETG FINALS-SLOT %<RSUBR-ENTRY '[RAND FINALS-SLOT #DECL ("VALUE" FIX FIX FIX 
FIX)] 1562>> 

<SETG SLOT %<RSUBR-ENTRY '[RAND SLOT #DECL ("VALUE" ANY RSUBR <PRIMTYPE WORD>)] 
1583>> 

"" 

<SETG CM %<RSUBR-ENTRY '[RAND CM #DECL ("VALUE" FALSE <LIST [REST <LIST FIX 
UVECTOR>]> FIX FIX <OR ATOM FALSE> <LIST <PRIMTYPE WORD> [REST <PRIMTYPE WORD>]>
)] 1607>> 

"" 

<SETG SPLOUT %<RSUBR-ENTRY '[RAND SPLOUT #DECL ("VALUE" LIST <LIST ANY ANY> <
LIST ANY ANY>)] 1683>> 

"" 

<SETG UPINT %<RSUBR-ENTRY '[RAND UPINT #DECL ("VALUE" LIST <UVECTOR [REST FIX]> 
FIX)] 1723>> 

"" 

<SETG SPLOUTN %<RSUBR-ENTRY '[RAND SPLOUTN #DECL ("VALUE" <LIST [REST ATOM]> 
LIST ATOM)] 1767>> 

"" 

<SETG OUT-INFO %<RSUBR-ENTRY '[RAND OUT-INFO #DECL ("VALUE" ATOM <OR FALSE 
CHANNEL> STRING "OPTIONAL" ANY)] 1802>> 

"" 

<DEFMAC NEXTBITS (ITEM) #DECL ((ITEM) FIX) <FORM PROG () <FORM COND '(<L? .ELNO 
0> <SET ELNO 34> <SET NGLUBITS (-1 !.NGLUBITS)>)> <FORM PUT '.NGLUBITS 1 <FORM 
PUTBITS '<1 .NGLUBITS> '<BITS 2 .ELNO> .ITEM>> '<SET ELNO <- .ELNO 2>>>> 

"" 

<SETG ZEROBIT %<RSUBR-ENTRY '[RAND ZEROBIT #DECL ("VALUE" FALSE FIX <LIST <
PRIMTYPE WORD> [REST <PRIMTYPE WORD>]>)] 1845>> 

"" 

<SETG CODUP %<RSUBR-ENTRY '[RAND CODUP #DECL ("VALUE" <LIST [REST <PRIMTYPE WORD
>]> <LIST [REST <PRIMTYPE WORD>]>)] 1906>> 

"" 

<SETG GET-SURV %<RSUBR-ENTRY '[RAND GET-SURV #DECL ("VALUE" <OR FALSE <LIST ANY>
> <OR <LIST [REST STRING]> STRING>)] 1939>> 

"" 

<SETG FIXZER %<RSUBR-ENTRY '[RAND FIXZER #DECL ("VALUE" UVECTOR <UVECTOR [REST <
PRIMTYPE WORD>]> FIX)] 2059>> 

"" 

<SETG CREATE %<RSUBR-ENTRY '[RAND CREATE #DECL ("VALUE" <PRIMTYPE UVECTOR> FIX 
"OPTIONAL" <OR ATOM FALSE>)] 2323>> 

"" 

<SETG INSERT-ASSOC %<RSUBR-ENTRY '[RAND INSERT-ASSOC #DECL ("VALUE" ANY ANY 
"OPTIONAL" <OR FALSE FIX> <<PRIMTYPE UVECTOR> [REST LIST]>)] 2376>> 

"" 

<SETG LOOKUP-ASSOC %<RSUBR-ENTRY '[RAND LOOKUP-ASSOC #DECL ("VALUE" ANY ANY 
"OPTIONAL" <<PRIMTYPE UVECTOR> [REST LIST]>)] 2480>> 

"" 

<SETG HASH %<RSUBR-ENTRY '[RAND HASH #DECL ("VALUE" HASH ANY)] 2538>> 

"" 

<SETG MINIMIZE %<RSUBR-ENTRY '[RAND MINIMIZE #DECL ("VALUE" FIX <UVECTOR [REST <
PRIMTYPE WORD>]>)] 2760>> 

"" 

<SETG GVALABLE %<RSUBR-ENTRY '[RAND GVALABLE #DECL ("VALUE" <OR ATOM FALSE <LIST
[REST ATOM]>> ANY)] 2793>> 

"" 

<SETG CODE-TO-DISK %<RSUBR-ENTRY '[RAND CODE-TO-DISK #DECL ("VALUE" ATOM CHANNEL
FIX <LIST [REST <LIST FIX UVECTOR>]> <LIST [REST <PRIMTYPE WORD>]> FIX)] 2981>> 

<SETG READ-IN-CODE %<RSUBR-ENTRY '[RAND READ-IN-CODE #DECL ("VALUE" UVECTOR 
CHANNEL)] 3130>> 

"" 

"IS IT '<AND <ASSIGNED? GLUE> .GLUE <PUT .GLUE ..." 

<SETG GLUE? %<RSUBR-ENTRY '[RAND GLUE? #DECL ("VALUE" <OR ATOM FALSE> ANY)] 3168
>> 

"" 

"IF SOMBTHINGS A GVAL CONS ONTO THE GVAL LIST" 

<SETG GVAL? %<RSUBR-ENTRY '[RAND GVAL? #DECL ("VALUE" <OR FALSE LIST> ANY <OR 
FALSE LIST>)] 3288>> 

"" 

"IS SOMETHING A RSUBR ENTRY?" 

<SETG RSUBR-ENTRY? %<RSUBR-ENTRY '[RAND RSUBR-ENTRY? #DECL ("VALUE" <OR FALSE 
LIST> ANY LIST LIST <OR FALSE CHANNEL>)] 3434>> 

"" 

"THIS IS IT.  THIS FUNCTION DOES MOST OF THE WORK OF GLUE.  IT LOOKS OVER THE GLUE
 BITS AND HACKS THE RSUBRS" 

<SETG PASS-1 %<RSUBR-ENTRY '[RAND PASS-1 #DECL ("VALUE" <LIST FIX LIST LIST LIST
LIST LIST FIX FIX LIST <LIST [REST <LIST FIX <VECTOR ATOM ATOM DECL>>]> ANY LIST
FIX <LIST [REST <PRIMTYPE WORD>]> FIX <LIST <PRIMTYPE WORD> [REST <PRIMTYPE WORD
>]> <OR FALSE LIST>> LIST FIX FIX <OR CHANNEL FALSE> <OR FALSE LIST> <OR FALSE 
LIST> LIST <LIST FIX> <LIST FIX> <LIST FIX> <LIST <UVECTOR [REST FIX]>> <LIST 
FIX [REST FIX]> LIST LIST FIX LIST LIST <OR FALSE ATOM> FIX <LIST <PRIMTYPE WORD
> [REST <PRIMTYPE WORD>]>)] 3798>> 

"" 

"ROUTINE TO HACK THE FINAL RSUBRS AND RSUBR ENTRYS" 

<SETG FINAL-RSUBR-ENTRYS %<RSUBR-ENTRY '[RAND FINAL-RSUBR-ENTRYS #DECL ("VALUE" 
ANY <LIST [REST <LIST FIX <VECTOR ATOM ATOM DECL>>]> <OR FALSE ATOM> <OR FALSE 
LIST> <OR FALSE LIST> <LIST [REST <PRIMTYPE WORD>]> ATOM RSUBR <LIST <PRIMTYPE 
WORD> [REST <PRIMTYPE WORD>]>)] 5594>> 

"" 

<SETG FIXUP-COPY %<RSUBR-ENTRY '[RAND FIXUP-COPY #DECL ("VALUE" RSUBR <LIST <
UVECTOR [REST FIX]>> RSUBR <OR FALSE CHANNEL>)] 5768>> 

"" 

<SETG FINAL-GROUP-CLEANUP %<RSUBR-ENTRY '[RAND FINAL-GROUP-CLEANUP #DECL (
"VALUE" LIST <OR FALSE CHANNEL> LIST ATOM <OR ATOM FALSE> <OR LIST FALSE> <OR 
LIST FALSE> <OR ATOM FALSE>)] 5886>> 

"" 

<SETG MCALL-RESOLVE %<RSUBR-ENTRY '[RAND MCALL-RESOLVE #DECL ("VALUE" LIST FIX 
LIST <LIST FIX> ANY LIST LIST <LIST <PRIMTYPE WORD> [REST <PRIMTYPE WORD>]>)] 
6245>> 

"" 

<SETG CONS-SYMBOLS %<RSUBR-ENTRY '[RAND CONS-SYMBOLS #DECL ("VALUE" <LIST FIX [
REST FIX]> <<PRIMTYPE UVECTOR> [REST FIX]> FIX <LIST FIX [REST FIX]> FIX)] 6409>
> 

<ENDPACKAGE> 
