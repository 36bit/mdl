; "AGC / ACOPY
	Argument 1 - SPACE into which the object will appear
	Argument 2 - An object
"

;"AC Conventions
     O/ LOWEST LEGAL ADDRESS IN SPACE
     A/ TYPE WORD (AND OTHER)
     B/ VALUE WORD (AND OTHER)
     C/ CURRENT ADDRESS IN SPACE (SIGN BIT FOR COPY VS AGC)
     D/ RANDOM
     E/ RANDOM
     F/ SPACE INTO WHICH WE ARE COPYING"

<DEFINE PUSHEM ()
	#SPLICE (<PUSH P* O>
		 <PUSH P* A>
		 <PUSH P* B>
		 <PUSH P* C>
		 <PUSH P* D>
		 <PUSH P* E>)> 

<DEFINE POPPEM ()
	#SPLICE (<POP P* E>
		 <POP P* D>
		 <POP P* C>
		 <POP P* B>
		 <POP P* A>
		 <POP P* O>)>

<SETG AGCUV <IUVECTOR 2 #WORD *0*>>

<TITLE ACOPY>
	<DECLARE ("VALUE" ANY SPACE ANY)>
	<DPUSH	TP* (AB)>
	<DPUSH	TP* 2(AB)>
	<PUSHJ	P* ACOPY1>
	<JRST	FINIS>

<INTERNAL-ENTRY ACOPY1 2>
	<SUBM	M* (P)>
	<MOVSI	C* *400000*>
	<JRST	AGC2>

<SUB-ENTRY AGC ("VALUE" ANY SPACE ANY)>
	<DPUSH	TP* (AB)>
	<DPUSH	TP* 2(AB)>
	<PUSHJ	P* AGC1>
	<JRST	FINIS>

<INTERNAL-ENTRY AGC1 2>
	<SUBM	M* (P)>
	<SETZ	C*>
AGC2	<MOVE	A* -1(TP)>
	<MOVE	B* (TP)>
	<MOVE	F* -2(TP)>	; "SAVE SPACE IN F, NONE OF THIS -1 IDIOCY"
	;<PUSH	TP* <TYPE-WORD WORD>>
	;<PUSH	TP* [<*777777*>]>
	;<PUSH	P* [<*777777*>]>
	;<PUSH	P* [<*777777*>]>
	<HRR	C* -2(TP)>
	<MOVE	O* 5(C)>
	<HRR	C* 3(C)>	; "PUT POINTER TO BOTTOM OF SPACE"
	<SUBI	C* 1>		; "LEAVE FREE WORD"
	<PUSHJ	P* MARKER>	; "CHARGE..."
	<MOVE	D* -2(TP)>
	<MOVEI	C* 1(C)>
	<MOVEM	C* 3(D)>
	<SUB	TP* [<4 (4)>]>
	<JRST	MPOPJ>

; "HERE TO DISPATCH FOR FIXING POINTERS"

INTHAK	<SUBM	M* (P)>
	<PUSH	P* O>
	<PUSH	P* A>
	<PUSH	P* B>
	<PUSH	P* C>
	<PUSH	P* D>
	<PUSH	P* E>
	<PUSH	TP* <TYPE-WORD SPACE>>
	<PUSH	TP* F>
	<JSR	LCKINT>
	<POP	TP* F>	;"RECOVER POSSIBLY CHANGED SPACE"
	<POP	TP* E>	;"THROW AWAY"
	<POP	P* E>
	<POP	P* D>
	<POP	P* C>
	<POP	P* B>
	<POP	P* A>
	<POP	P* O>
	<JRST	MPOPJ>

MARKER	<SUBM	M* (P)>	
	<PUSH	TP* A>
	<PUSH	TP* B>
	<SKIPGE	INTFLG>
	<PUSHJ	P* INTHAK>
	<GETYP	D* A>		; "MOST COMMON TYPES WILL"
	<LSH	D* 1>
	<ADD	D* TYPVEC 1 >
	<HRRZ	D* (D)>
	<ANDI	D* *777*>
	<CAILE	D* 5>
	<JRST	MARKX>
	<MOVEI	E* TYPTBL>
	<ADDI	E* -1(D)>
	<JRST	@ (E)>
MARKX	<CAIE	D* *14*>	; "BYTE STRINGS ARE STRINGS AFTER ALL"
	<CAIN	D* *20*>
	<JRST	SFIX>
	<CAILE	D* NUMSAT>
	<JRST	MFIX>
MARK0	<SETZ	E*>		; "THIS IS NOT STRUCTURED"
MARK1	<POP	TP* B>
	<POP	TP* A>
	<JRST	MPOPJ>

TYPTBL	<MARK0>
	<LFIX>
	<DFIX>
	<UFIX>
	<VFIX>

; "HERE TO LOOP FOR UVECTORS"

UHACK	<SUBM	M* (P)>
	<MOVE	A* -1(P)>	; "GET THE UTYPE"
	<MOVE	B* (B)>
	<PUSHJ	P* MARKER>	; "FIX UP EACH ELEMENT IN TURN"
	<SKIPE	E>
	<JRST	UHACK1>
UHACK2	<MOVE	B* (TP)>
	<ADD	B* [<1 (1)>]>
	<MOVEM	B* (TP)>
	<JUMPL	B* UHACK 1>
	<JRST	POPJBA>

UHACK1	<MOVE	A* (TP)>
	<HRRM	B* (A)>
	<JRST	UHACK2>

UFIX1	<JUMPG	E* THACK>
	<GETYP	A* (D)>		; "CAN WE CHEAT?"
	<LSH	A* 1>		; "ELSE TRY SOME HAIR"
	<ADD	A* TYPVEC 1 >
	<HRRZ	A* (A)>		; "HAVE SAT IN D"
	<ANDI	A* *777*>
	<CAIN	A* 1>
	<JRST	UEASY>		; "YES!"
UFOO	<GETYP	A* (D)>
	<HRLZM	A* (P)>
	<SKIPL	(TP)>		; "UVECTOR IS EMPTY?"
	<JRST	UVEXIT>
	<PUSHJ	P* UHACK>
	<SKIPA>
UEASY	<SUB	TP* [<2 (2)>]>
	<POP	P* D>
	<JRST	MARK1>

MFIX	<PUSH	P* [1]>
	<JRST	VFIXE>		; "JUMPED TO PUSH FOR VECTORS SO TEMPLT FLAG WASN'T TOP"

UFIX	<JUMPE	B* MARK0>	; "FIX EMPTY UVECTOR BUG"
	<PUSH	P* [0]>		; "SAVE SLOT FOR UTYPE"
	<PUSH	P* [-1]>	; "SAY THIS IS A UVECTOR"
	<JRST	VFIXE>		; "TAA 12/13/76--BECAUSE SKIPPED TO PUSH FOR VECTORS"

; "HERE TO FIX UP VECTORS / UVECTORS"

VFIX	<JUMPE	B* MARK0>	; "FIX EMPTY VECTOR BUG"
	<PUSH	P* [0]>	
VFIXE	<PUSH	TP* A>		; "SAVE POINTER TO US"
	<PUSH	TP* B>
	<HLRE	D* B>
	<SUBM	B* D>		; "POINT TO DOPE WORD 1"
	<SKIPGE	1(D)>
	<JRST	VFIX1>		; "ALREADY MOVED"
	<HLRZ	E* 1(D)>
VRETRY	<PUSH	P* C>		; "SAVE POINTER TO 2ND DOPE WORD"
	<SUBI	C* -1(E)>	; "CALCULATE NEW POINTER"
	<CAILE	O* (C)>
	<JRST	VLOSE>
	<SUBI	E* 2>
	<HLRZ	A* B>
	<ADD	A* E>
	<ADD	A* C>
	<HRR	B* A>
	<HRRM	B* -2(TP)>	; "SAVE THIS FOR FUTURE FIXUPS"
	<MOVEM	B* (TP)>	; "SAVE AOBJN TO NEW VECTOR"
	<MOVEI	A* 1(D)>	; "BETTER THAN <HRRZ A* 1(D)>"
	<SUBI	A* 1(E)>
	<MOVSS	A>
	<HRR	A* C>
	<POP	P* E>
	<SKIPL	C>		; "I DONT THINK THIS SKIPL IS NEEDED"
	<HRRM	E* 1(D)>	; "MAKE OLD VECTOR LOOK LIKE NEW ONE"
	<BLT	A* (E)>		; "BLT VECTOR OVER TO NEW HOME"
	<HRRM	E* (E)>		; "FIX DOPE WORD 2 TO POINT TO ITSELF"
	<SUBI	C* 1>
	<MOVSI	E* *400000*>	; "BIT OFF"
	<SKIPL	C>		
	<IORM	E* 1(D)>	; "MARK AS COPIED/GCED"
	<POP	P* E>
	<SKIPE	E>		; "FLAG FOR UVECTOR/VECTOR"
	<JRST	UFIX1>
	<SKIPL	(TP)>		; "EMPTY VECTOR?"
	<JRST	UVEXIT>
	<PUSHJ	P* VHACK>	; "MUNG"
	<JRST	MARK1>

UVEXIT	<SETO	E*>
	<SUB	TP* [<2 (2)>]>
	<JRST	MARK1>

; "HERE FOR SHARED VECTORS"

VFIX1	<SUB	TP* [<2 (2)>]>	; "FIX UP TP"
	<SKIPLE	(P)>
	<JRST	TFIX1>
	<HLRE	A* B>		; "CALCULATE POINTER TO NEW OBJECT"
	<ADD	A* 1(D)>
	<SUBI	A* 1>
	<HLL	A* B>
	<MOVE	B* -2(TP)>
	<MOVEM	A* 1(B)>	; "STUFF IT"
	<SUB	P* [<1 (1)>]>	; "FIX UP P"
	<JRST	MARK0>

TFIX1	<HRRZ	A* 1(D)>
	<SUBI	A* 1>
	<MOVEM	A* (TP)>
	<SETO	E*>
	<SUB	P* [<1 (1)>]>
	<JRST	MARK1>

; "LOOP HERE FOR VECTORS"

VHACK	<SUBM	M* (P)>
	<MOVE	A* (B)>		; "GET NEXT ELEMENT"
	<MOVE	B* 1(B)>
	<PUSHJ	P* MARKER>	; "AND MUNG IT"
	<SKIPE	E>		; "FLAG FOR POINTER UPDATES"
	<JRST	VHACK1>
VHACK2	<MOVE	B* (TP)>	; "SAVED POINTER TO SELF"
	<ADD	B* [<(2) 2>]>	; "NEXT ELEMENT"
	<MOVEM	B* (TP)>	; "DONT TRUST ADDB INSTRUCTION"
	<JUMPL	B* VHACK 1>
POPJBA	<POP	TP* B>		; "RESET TP AND SET FIXUP FLAG"
	<POP	TP* A>
	<SETO	E*>
	<JRST	MPOPJ>

VHACK1	<MOVE	A* (TP)>	; "DO FIXUP"
	<HRRM	B* 1(A)>	; "SMASH OLD POINTER"
	<JRST	VHACK2>

VLOSE	<MOVE	C* (P)>		; "GET BACK OLD LAST POSITION"
	<MOVEM	A* (P)>
	<MOVE	A* E>		; "LENGTH OF OBJECT TO MOVE"
	<PUSHJ	P* GETMORE>	; "LEAVES LOC OF OK SPACE IN C"
	<POP	P* A>
	<JRST	VRETRY>	

; "HERE TO FIX UP STRINGS"


SFIX	<PUSH	P* O>
	<HRRZ	O* A>		; "GET LENGTH"
	<LDB	E* [<(*300600*) B>]>
	<MOVEI	D* 36>
	<IDIV	D* E>
	<IDIV	O* D>
	<MOVNS	A>
	<HRL	A* A>
	<MOVE	D* B>
	<ADD	D* O>
	<POP	P* O>
	<SKIPE	A>
	<IBP	D>
	<AOBJN	A* HERE -1>
	<ADDI	D* 1>
	<HLRZ	A* 1(D)>	; "COUNT OF WORDS"
SRETRY	<PUSH	P* C>
	<SKIPGE	1(D)>
	<JRST	SFIX1>		; "YES"
	<MOVEI	E* 1(D)>	; "GET LOCATION"
	<SKIPL	C>		; "THIS MAY BE OK"
	<HRRM	C* 1(D)>	; "STUFF NEW LOCATION"
	<SUBI	C* -1(A)>	; "OK FOR BLT'ING"
	<SUBI	E* -1(A)>	; "FROM"
	<CAILE	O* (C)>
	<JRST	SLOSE>
	<HRL	C* E>
	<MOVE	E* (P)>
	<BLT	C* (E)>		; "BLT OVER"
	<MOVSI	C* *400000*>
	<SKIPL	(P)>
	<IORM	C* 1(D)>	; "MARK AS COPIED"
	<HRRM	E* (E)>		; "FIX DOPE WORD 2"
	<HRRZI	C* 1(D)>
	<HRRZ	A* B>
	<SUB	A* C>
	<ADD	A* (P)>
	<HRRM	A* (TP)>
	<POP	P* C>
	<HLRZ	A* (C)>
	<SUB	C* A>
	<SETO	E*>
	<JRST	MARK1>
	
; "HERE FOR SHARED STRINGS"

SFIX1	<HRRZ	A* (TP)>
	<HRRZI	D* 1(D)>
	<SUB	A* D>
	<HRRZ	B* (D)>
	<ADD	A* B>
	<HRRM	A* (TP)>
	<POP	P* C>
	<SETO	E*>
	<JRST	MARK1>

SLOSE	<MOVE	C* (P)>
	<MOVEM	A* (P)>
	<PUSHJ	P* GETMORE>
	<POP	P* A>
	<JRST	SRETRY>


; "HERE TO FIX UP LISTS"

LFIX	<HRRZ	E* B>
	<JUMPE	E* EFIX>	; "EMPTY LIST"
	<TLNE	A* *400000*>
	<JRST	MARK1>		; "IGNORE??"
	<SKIPGE	(E)>
	<JRST	[<MOVE	A* 1(E)>
		 <HRRM	A* (TP)>
		 <JRST 	EFIX>]>
	<PUSHJ	P* LMOVE>
	<HRRM	D* (TP)>	; "STUFF"
	<PUSHJ	P* LHACK>
EFIX	<SETO	E*>
	<JRST	MARK1>

; "HERE TO MOVE A LIST CELL"

LMOVE	<SUBM	M* (P)>	
	<CAILE	O* -1(C)>	;"MSB 1/29/76, CHANGED FROM -2(C)"
	<JRST	LLOSE>
	<MOVE	D* (E)>		; "MOVE LIST CELL"
	<MOVEM	D* -1(C)>
	<MOVE	D* 1(E)>
	<MOVEM	D* (C)>
	<MOVSI	D* *400000*>
	<SKIPL	C>
	<IORM	D* (E)>		; "SET MARK BIT"
	<SUBI	C* 2>		; "RESET POINTER"
	<MOVEI	D* 1(C)>	; "POINT TO NEW LIST CELL"
	<SKIPL	C>
	<MOVEM	D* 1(E)>
	<JRST	MPOPJ>

LLOSE	<PUSH	P* A>
	<MOVEI	A* 2>
	<PUSHJ	P* GETMORE>
	<POP	P* A>
	<JRST	LMOVE 1>

; "HERE TO FOLLOW THE YELLOW BRICK ROAD"

LHACK	<SUBM	M* (P)>
	<MOVE	A* (D)>
	<MOVE	B* 1(D)>
	<PUSH	P* D>
	<PUSHJ	P* MARKER>	; "FIX UP THE ELEMENT"
	<POP	P* D>
	<SKIPE	E>
	<JRST	LFIX1>
LHACK0	<HRRZ	E* (D)>		; "GET POINTER TO CDR"
	<JUMPE	E* CHOMP>	; "END OF THE LINE"
	<MOVE	A* D>
	<MOVE	B* (E)>
	<TLNE	B* *400000*>
	<JRST	LFIX2>	
	<PUSHJ	P* LMOVE>
LHACK1	<HRRM	D* (A)>		; "STUFF IT"
	<JRST	LHACK 1>	

LFIX1	<HRRM	B* 1(D)>
	<JRST	LHACK0>

LFIX2	<MOVE	D* 1(E)>
	<JRST	LHACK1>

DFIX	<MOVE	A* (B)>
	<MOVE	B* 1(B)>
	<PUSHJ	P* MARKER>
DRETRY	<CAILE	O* -1(C)>	;"MSB 1/29/76, CHANGED FROM -2(C)"
	<JRST	DLOSE>
	<MOVEM	A* -1(C)>
	<MOVEM	B* (C)>
	<SUBI	C* 2>	
	<MOVEI	B* 1(C)>
	<MOVEM	B* (TP)>
	<SETO	E*>
	<JRST	MARK1>

DLOSE	<PUSH	P* A>
	<MOVEI	A* 2>
	<PUSHJ	P* GETMORE>
	<POP	P* A>
	<JRST	DRETRY>

; "GETS MORE STORAGE BY AMOUNT OF WORDS IN A.  THIS CODE
   IS A BIT CROCKISH, BUT IT WORKS"

GETMORE	<SUBM	M* (P)>
	<PUSH	P* E>		; "SAVE THE UNIVERSE IN CASE OF MCALL"
	<PUSH	P* D>
	<PUSH	P* B>
	<PUSH	P* C>
	<TLZ	C* *400000*>	; "TURN OFF SIGN BIT"
	<ADDI	C* 1>		; "KEEP WITH CONVENTION"
	<MOVEM	C* 3(F)>	; "FILL THE LAST USED SLOT"	
	<PUSH	TP* <TYPE-WORD SPACE>>
	<PUSH	TP* F>		; "PUSH THE SPACE"
	<PUSH	TP* <TYPE-WORD FIX>>
	<PUSH	TP* A>		; "WORDS NEEDED"
	<MCALL	2 ADD-ALLOC>	; "CALL FOR NEW STORAGE"
	<MOVE	O* 5(B)>	; "BOTTOM LOCATION"
	<MOVE	F* B>		; "CHANGED SPACE"
	<POP	P* C>		; "POP C BACK FOR SIGN BIT"
	<HRR	C* 3(B)>	; "SAVE THE SIGN BIT"
	<SUBI	C* 1>		; "AGAIN, CONVENTION"
	<POP	P* B>
	<POP	P* D>
	<POP	P* E>
CHOMP	<JRST	MPOPJ>


ILLOBJ	<PUSH	TP* <PQUOTE ILLEGAL-OBJECT!-ERRORS>>
	<PUSH	TP* <MQUOTE ILLEGAL-OBJECT!-ERRORS>>
	<PUSH	TP* A>		; "GIVE THE LOSER THE BARFED OBJECT"
	<PUSH	TP* B>
	<MCALL	2 ERROR>
	<ERRUUO* <MQUOTE INTERNAL-ERROR!-ERRORS>>


THACK	<PUSH	P* O>
	<PUSH	P* A>
	<PUSH	P* B>		; "POINTER TO TEMPLATE"
	<PUSH	P* C>
	<HLRE	D* (B)>
	<TRZ	D* *40000*>
	<ANDI	D* *377777*>
	<HLRZ	C* 1(B)>
	<SUBI	B* -2(C)>
	<SUBI	C* 2>
	<SUBI	D* NUMSAT 1>
	<HRLI	D* (D)>
	<ADD	D* TD.LNT 1 >
	<SKIPL	D>
	<ERRUUO* <MQUOTE MUNGED-TEMPLATE!-ERRORS>>
TD.UPD	<EXCH	C* -1(P)>	; "GET BACK REAL C"
	<XCT	(D)>
	<EXCH	C* -1(P)>
	<HLRZ	E* B>		; "POSSIBLE BASIC LENGTH"
	<PUSH	P* [0]>
	<PUSH	P* E>
	<MOVEI	B* (B)>		; "ISOLATE LENGTH"
	<PUSH	P* -3(P)>	; "SAVE POINTER TO OBJECT"
	<PUSH	P* [0]>		; "HOME FOR VALUES"
	<PUSH	P* [0]>		; "SLOT FOR TEMP"
	<PUSH	P* B>		; "SAVE"
	<SUB	D* TD.LNT 1 >
	<PUSH	P* D>		; "SAVE FOR FINDING OTHER TABLES"
	<JUMPE	E* TD.UP2>	; "NO REPEATING SEQ"
	<ADD	D* TD.GET 1 >	; "COMP LNTH OF REPEATING SEQ"
	<HLRE	D* (D)>		; "D ==> - LNTH OF TEMPLATE"
	<ADDI	D* (E)>		; "D ==> -LENGTH OF REP SEQ"
	<MOVNS	D>
	<HRLM	D* -5(P)>	; "SAVE IT AND BASIC"

TD.UP2	<SKIPG	D* -1(P)>	; "ANY LEFT?"
	<JRST	TD.UP1>
	<MOVE	E* TD.GET 1 >
	<ADD	E* (P)>
	<MOVE	E* (E)>		; "POINTER TO VECTOR IN E"
	<MOVEM	D* -6(P)>	; "SAVE ELMENT #"
	<SKIPN	B* -5(P)>	; "SKIP IF RESTS EXIST"
	<SOJA	D* TD.UP3>
	<MOVEI	O* (B)>		; "BASIC LNT TO 0"
	<SUBI	O* (D)>		; "SEE IF PAST BASIC"
	<JUMPGE	O* HERE -3>	; "JUMP IF O.K."
	<MOVSS	B>		; "REP LNT TO RH*  BASIC TO LH"
	<IDIVI	O* (B)>		; "A==> -WHICH REPEATER"
	<MOVNS	A>
	<ADD	A* -5(P)>	; "PLUS BASIC"
	<ADDI	A* 1>		; "AND FUDGE"
	<MOVEM	A* -6(P)>	; "SAVE FOR PUTTER"
	<ADDI	E* -1(A)>	; "POINT"
	<SOJA	D* HERE 2>

TD.UP3	<ADDI	E* (D)>		; "POINT TO SLOT"
	<MOVE	C* -4(P)>
	<XCT	(E)>		; "GET THIS ELEMENT INTO A AND B"
	<JFCL>
	<PUSH	TP* A>		; "SAVE A AND B ON TP (!!)"
	<PUSH	TP* B>
	<MOVEI	D* -1(TP)>
	<GETYP	C* (D)>
	<LSH	C* 1>		; "CODE TO GET SAT IN C"
	<ADD	C* TYPVEC 1 >
	<HRRZ	C* (C)>
	<CAIN	C* 1>		; "ONE SAYS PRIMTYPE WORD"
	<JRST	TD.UP4>	
	<MOVE	O* -10(P)>	; "SPACE POINTER"
	<MOVE	A* (D)>		; "TYPE WORD"
	<MOVE	B* 1(D)>	; "VALUE WORD"
	<MOVE	C* -7(P)>	; "SPACE POINTER"
	<PUSHJ	P* MARKER>	; "MARK THIS OBJECT"
	<MOVEI	D* -1(TP)>	; "RESTORE D FROM TP"
	<MOVEM	C* -7(P)>
	<SKIPN	E>		
	<JRST	TD.UP4>		; "NON-STRUCTURED"
	<MOVE	A* 2(TP)>	; "GET UPDATED POINTER"
	<HRRM	A* 1(D)>	; "SMASH SLOT"
TD.UP4	<MOVE	C* -4(P)>	; "GET POINTER FOR UPDATE OF ELEMENT"
	<MOVE	E* TD.PUT 1 >
	<SOS	D* -1(P)>	; "RESTORE COUNT"
	<ADD	E* (P)>
	<MOVE	E* (E)>		; "POINTER TO VECTOR IN E"
	<MOVE	B* -6(P)>	; "SAVED OFFSET"
	<ADDI	E* -1(B)>	; "POINT TO SLOT"
	<POP	TP* B>		; "RESTORE FROM TP STACK"
	<POP	TP* A>
	<XCT	(E)>		; "SMASH IT BACK"
	<ERRUUO* <MQUOTE TEMPLATE-LOSSAGE!-ERRORS>>
TD.WIN	<MOVE	C* -4(P)>
	<JRST	TD.UP2>

TD.UP1	<SUB	P* [<(7) 7>]>
	<SUB	TP* [<2 (2)>]>
	<POP	P* C>
	<POP	P* B>
	<POP	P* A>
	<POP	P* O>
	<SETO	E*>
	<JRST	MARK1>

