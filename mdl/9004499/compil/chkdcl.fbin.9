'<PCODE "3CHKDC">

<SETG HIGHBOUND 2> 

<SETG LOWBOUND 1> 

<SETG ALLWORDS '<PRIMTYPE WORD>> 

<SETG TASTEFUL-DECL  %<RSUBR!- '[ %<PCODE!- "3CHKDCL" 0> TASTEFUL-DECL #DECL (
"VALUE" ANY ANY) FOSE BYTE-SIZE MESSAGE TYPE-MERGE FOSE NO-RETURN ANY DECL FIX 
NOT OPT OPTIONAL T <NOT ANY> OR ANDF (<OR FALSE ATOM>) ORF MAYBEF #FALSE (
BAD-SYNTAX!-ERRORS) ![STRUCTURED LOCATIVE APPLICABLE ANY!] #FALSE (
EMPTY-TYPE-FORM!-ERRORS) ![OR AND NOT PRIMTYPE!] QUOTE #FALSE (
EMPTY-OR-MATCH!-ERRORS) PRIMTYPE STRUCTURED LOCATIVE APPLICABLE <OR APPLICABLE 
STRUCTURED> <OR RSUBR RSUBR-ENTRY FUNCTION CLOSURE MACRO> ![LIST VECTOR UVECTOR 
TEMPLATE STRING TUPLE STORAGE BYTES!] ![LOCL LOCAS LOCD LOCV LOCU LOCS LOCA!] ![
RSUBR SUBR FIX FSUBR FUNCTION RSUBR-ENTRY MACRO CLOSURE OFFSET!] ![STRUCTURED 
LOCATIVE APPLICABLE!] AND <PRIMTYPE BYTES> [REST FIX] SEGMENT %<RGLOC ALLWORDS T
> [] #FALSE (EMPTY-FORM-IN-DECL!-ERRORS) FORM REST ![OPT OPTIONAL!] #FALSE (
BAD-VECTOR-SYNTAX!-ERRORS) #FALSE (BAD-FORM-SYNTAX!-ERRORS) BYTES ![OR AND NOT!]
 ALL STRING ERROR "BAD-DECL-SYNTAX" [REST OPT OPTIONAL] "BAD DECL " %<RGLOC MIN 
T> %<RGLOC MAX T> ![BYTES STRING LOCD TUPLE FRAME!] ![STRUCTURED APPLICABLE ANY 
LOCATIVE!] <NOT UNBOUND> ![STRING TUPLE LOCD FRAME BYTES!] " " "TYPE MISUSE "]>
> 
<AND <ASSIGNED? GLUE> .GLUE <PUT ,TASTEFUL-DECL PGLUE ![716177407 -1 -1 -4096 0!
]>> 


<SETG TMERGE %<RSUBR-ENTRY '[TASTEFUL-DECL TMERGE #DECL ("VALUE" ANY ANY ANY)] 
241>> 

<SETG TYPE-AND %<RSUBR-ENTRY '[TASTEFUL-DECL TYPE-AND #DECL ("VALUE" ANY ANY ANY
)] 356>> 

<SETG TMATCH %<RSUBR-ENTRY '[TASTEFUL-DECL TMATCH #DECL ("VALUE" ANY ANY ANY)] 
380>> 

<SETG CTMATCH %<RSUBR-ENTRY '[TASTEFUL-DECL CTMATCH #DECL ("VALUE" ANY ANY ANY <
OR FALSE ATOM> <OR FALSE ATOM> <OR FALSE ATOM>)] 404>> 

<SETG DTMATCH %<RSUBR-ENTRY '[TASTEFUL-DECL DTMATCH #DECL ("VALUE" ANY ANY ANY)]
450>> 

<SETG VTS %<RSUBR-ENTRY '[TASTEFUL-DECL VTS #DECL ("VALUE" ANY ANY)] 536>> 

<SETG 2-ELEM %<RSUBR-ENTRY '[TASTEFUL-DECL 2-ELEM #DECL ("VALUE" <OR ATOM FALSE>
<PRIMTYPE LIST>)] 574>> 

<SETG TYPMAT %<RSUBR-ENTRY '[TASTEFUL-DECL TYPMAT #DECL ("VALUE" ANY ATOM ANY)] 
595>> 

"" 

<SETG TEXP1 %<RSUBR-ENTRY '[TASTEFUL-DECL TEXP1 #DECL ("VALUE" ANY <OR FORM 
SEGMENT> ANY)] 721>> 

<SETG ACTORT %<RSUBR-ENTRY '[TASTEFUL-DECL ACTORT #DECL ("VALUE" ANY <PRIMTYPE 
LIST> ANY)] 795>> 

<SETG PTACT %<RSUBR-ENTRY '[TASTEFUL-DECL PTACT #DECL ("VALUE" ANY ANY ANY)] 
1025>> 

"" 

<SETG STRUC %<RSUBR-ENTRY '[TASTEFUL-DECL STRUC #DECL ("VALUE" ANY ANY ATOM ANY)
] 1077>> 

<SETG PRIMATCH %<RSUBR-ENTRY '[TASTEFUL-DECL PRIMATCH #DECL ("VALUE" ANY <OR <
FORM ANY ANY> <SEGMENT ANY ANY>> ANY)] 1194>> 

"" 

<SETG NOT-IT %<RSUBR-ENTRY '[TASTEFUL-DECL NOT-IT #DECL ("VALUE" ANY <OR FORM 
SEGMENT> ANY)] 1495>> 

<SETG NOTIFY %<RSUBR-ENTRY '[TASTEFUL-DECL NOTIFY #DECL ("VALUE" ANY ANY)] 1654>
> 

"" 

<SETG FORMATCH %<RSUBR-ENTRY '[TASTEFUL-DECL FORMATCH #DECL ("VALUE" ANY <OR <
FORM ANY> <SEGMENT ANY>> ANY)] 1702>> 

"" 

<SETG BYTES-HACK %<RSUBR-ENTRY '[TASTEFUL-DECL BYTES-HACK #DECL ("VALUE" ANY <OR
FORM SEGMENT> <OR FORM SEGMENT> ANY)] 2103>> 

<SETG FOSE %<RSUBR-ENTRY '[TASTEFUL-DECL FOSE #DECL ("VALUE" <OR FORM SEGMENT> 
"TUPLE" ANY)] 2508>> 

<SETG SEGANDOR %<RSUBR-ENTRY '[TASTEFUL-DECL SEGANDOR #DECL ("VALUE" <OR ATOM 
FALSE> ANY ANY ANY)] 2621>> 

<SETG WRDFX %<RSUBR-ENTRY '[TASTEFUL-DECL WRDFX #DECL ("VALUE" ANY <OR FORM 
SEGMENT> <OR FORM SEGMENT> ANY)] 2659>> 

<SETG MAP-MERGE %<RSUBR-ENTRY '[TASTEFUL-DECL MAP-MERGE #DECL ("VALUE" LIST 
"TUPLE" <TUPLE [REST FIX]>)] 2884>> 

<SETG AND-MERGE %<RSUBR-ENTRY '[TASTEFUL-DECL AND-MERGE #DECL ("VALUE" <OR FALSE
<LIST [REST FIX]>> <LIST [REST FIX]> <LIST [REST FIX]>)] 2961>> 

"" 

<SETG GET-RANGE %<RSUBR-ENTRY '[TASTEFUL-DECL GET-RANGE #DECL ("VALUE" <OR FALSE
<LIST ANY>> ANY)] 3082>> 

"" 

<SETG ELETYPE %<RSUBR-ENTRY '[TASTEFUL-DECL ELETYPE #DECL ("VALUE" ANY <PRIMTYPE
LIST> <PRIMTYPE LIST> ANY)] 3139>> 

"" 

<SETG RESTER? %<RSUBR-ENTRY '[TASTEFUL-DECL RESTER? #DECL ("VALUE" ANY <VECTOR 
ANY ANY ANY ANY ANY VECTOR> <VECTOR ANY ANY ANY ANY ANY VECTOR> <LIST ANY> ANY 
ANY)] 3966>> 

<SETG UNIQUE-VECTOR-CHECK %<RSUBR-ENTRY '[TASTEFUL-DECL UNIQUE-VECTOR-CHECK #
DECL ("VALUE" <VECTOR [2 ANY]> <VECTOR [2 ANY]>)] 4240>> 

<SETG NEXTP %<RSUBR-ENTRY '[TASTEFUL-DECL NEXTP #DECL ("VALUE" <OR FALSE <VECTOR
[6 ANY]>> <VECTOR <PRIMTYPE LIST> ANY FIX ANY ANY ANY>)] 4289>> 

"" 

<SETG NTHREST %<RSUBR-ENTRY '[TASTEFUL-DECL NTHREST #DECL ("VALUE" <VECTOR ANY 
ANY ANY ANY ANY VECTOR> <VECTOR ANY ANY ANY ANY ANY VECTOR>)] 4469>> 

"" 

<SETG GET-ELE-TYPE %<RSUBR-ENTRY '[TASTEFUL-DECL GET-ELE-TYPE #DECL ("VALUE" ANY
ANY ANY "OPTIONAL" ANY ANY)] 4511>> 

"" 

<SETG GET-ELE-BYTE %<RSUBR-ENTRY '[TASTEFUL-DECL GET-ELE-BYTE #DECL ("VALUE" ANY
ANY ANY ANY ANY)] 6038>> 

<SETG GETBSYZ %<RSUBR-ENTRY '[TASTEFUL-DECL GETBSYZ #DECL ("VALUE" <OR FALSE FIX
> ANY)] 6158>> 

<SETG MINL %<RSUBR-ENTRY '[TASTEFUL-DECL MINL #DECL ("VALUE" FIX ANY)] 6219>> 

<SETG STRUCTYP %<RSUBR-ENTRY '[TASTEFUL-DECL STRUCTYP #DECL ("VALUE" ANY ANY)] 
6546>> 

<SETG PRIMHK %<RSUBR-ENTRY '[TASTEFUL-DECL PRIMHK #DECL ("VALUE" ANY <OR FORM 
SEGMENT> ANY)] 6604>> 

"" 

<SETG TYPESAME %<RSUBR-ENTRY '[TASTEFUL-DECL TYPESAME #DECL ("VALUE" <OR ATOM 
FALSE> ANY ANY)] 6799>> 

<SETG ISTYPE-GOOD? %<RSUBR-ENTRY '[TASTEFUL-DECL ISTYPE-GOOD? #DECL ("VALUE" <OR
ATOM FALSE> ANY "OPTIONAL" ANY)] 6835>> 

<SETG TOP-TYPE %<RSUBR-ENTRY '[TASTEFUL-DECL TOP-TYPE #DECL ("VALUE" ANY ANY)] 
6879>> 

<SETG ISTYPE? %<RSUBR-ENTRY '[TASTEFUL-DECL ISTYPE? #DECL ("VALUE" <OR ATOM 
FALSE> ANY "OPTIONAL" ANY)] 7010>> 

<SETG DCX %<RSUBR-ENTRY '[TASTEFUL-DECL DCX #DECL ("VALUE" ANY ANY)] 7189>> 

"DETERMINE IF A TYPE PATTERN REQUIRES DEFERMENT 0=> NO 1=> YES 2=> DONT KNOW " 

"" 

<SETG DEFERN %<RSUBR-ENTRY '[TASTEFUL-DECL DEFERN #DECL ("VALUE" ANY ANY)] 7236>
> 

" Define a decl for a given quoted object for maximum winnage." 

"" 

<SETG GEN-DECL %<RSUBR-ENTRY '[TASTEFUL-DECL GEN-DECL #DECL ("VALUE" <OR ATOM 
SEGMENT> ANY)] 7427>> 

"" 

<SETG REST-DECL %<RSUBR-ENTRY '[TASTEFUL-DECL REST-DECL #DECL ("VALUE" ANY ANY 
FIX)] 7609>> 

<SETG ANY-PAT %<RSUBR-ENTRY '[TASTEFUL-DECL ANY-PAT #DECL ("VALUE" LIST FIX)] 
7944>> 

" TYPE-OK? are two type patterns compatible.  If the patterns
  don't parse, send user a message." 

<SETG TYPE-OK? %<RSUBR-ENTRY '[TASTEFUL-DECL TYPE-OK? #DECL ("VALUE" ANY ANY ANY
)] 7976>> 

" TYPE-ATOM-OK? does an atom's initial value agree with its DECL?" 

<SETG TYPE-ATOM-OK? %<RSUBR-ENTRY '[TASTEFUL-DECL TYPE-ATOM-OK? #DECL ("VALUE" 
ANY ANY ANY ATOM)] 8035>> 

" Merge a group of type specs into an OR." 

"" 

<SETG TYPE-MERGE %<RSUBR-ENTRY '[TASTEFUL-DECL TYPE-MERGE #DECL ("VALUE" ANY 
"TUPLE" TUPLE)] 8065>> 

<SETG PUT-IN %<RSUBR-ENTRY '[TASTEFUL-DECL PUT-IN #DECL ("VALUE" LIST <PRIMTYPE 
LIST> ANY)] 8146>> 

<SETG ORSORT %<RSUBR-ENTRY '[TASTEFUL-DECL ORSORT #DECL ("VALUE" <FORM ANY ANY> 
<FORM ANY ANY>)] 8339>> 

<SETG LSORT %<RSUBR-ENTRY '[TASTEFUL-DECL LSORT #DECL ("VALUE" LIST LIST)] 8362>
> 

"" 

<SETG FCOMPARE %<RSUBR-ENTRY '[TASTEFUL-DECL FCOMPARE #DECL ("VALUE" <OR ATOM 
FALSE> <PRIMTYPE LIST> <PRIMTYPE LIST>)] 8511>> 

<SETG CANONICAL-DECL %<RSUBR-ENTRY '[TASTEFUL-DECL CANONICAL-DECL #DECL ("VALUE"
ANY ANY)] 8569>> 

<SETG CAN-ELE %<RSUBR-ENTRY '[TASTEFUL-DECL CAN-ELE #DECL ("VALUE" FORM <
PRIMTYPE LIST>)] 8641>> 

<SETG GR-RET %<RSUBR-ENTRY '[TASTEFUL-DECL GR-RET #DECL ("VALUE" ANY ANY FIX)] 
9056>> 
