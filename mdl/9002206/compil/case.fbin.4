'<PCODE "2CASE">

<SETG PMAX ,NUMPRI!-MUDDLE> 

<SETG MAX-DENSE 2> 

<NEWTYPE OR LIST> 

<FLOAD "PRCOD.NBIN"> 

<SETG CASE-FCN  %<RSUBR!- '[ %<PCODE!- "2CASE" 0> CASE-FCN #DECL ("VALUE" NODE <
FORM ANY> ANY) PRIM-CODE MERGE-STATES FIX-ACLINK RESTORE-STATE MOVE:ARG 
REFERENCE VAR-STORE ACFIX SEQ-GEN SAVE-STATE LABEL:TAG IMCHK REFERENCE:ADR 
RET-TMP-AC MUNG-AC GETREG TOACV BRANCH:TAG EMIT ADDR:TYPE GEN ISTYPE? 
PREFER-DATUM GOODACS REGSTO MAKE:TAG DATUM ADD-TYPE-LIST TYPE-OK? GEN-DECL 
TYPE-MERGE MANIFESTQ MESSAGE PMACRO NODEB PCOMP NODECOND PARENT (NODE) T GVAL ![
==? TYPE? PRIMTYPE?!] DEFAULT %<TYPE-C OR LIST> ==? QUOTE WORD ATOM CASE %<
TYPE-W NODE VECTOR> ELSE ERROR "BAD CASE USAGE" ASCII CHTYPE ERROR!-INTERRUPTS 
INTERRUPT "ERROR"  %<RSUBR!- '[ %<PCODE!- "2CASE" 2948> ANONF2!-TMP #DECL (
"VALUE" ANY ANY "TUPLE" ANY) MACACT %<RGLOC MACACT T> "OVALRET!-COMBAT!-" " "]> 
MACACT (ACTIVATION) %<RGLOC MACACT T> " MACRO EXPANSION LOSSAGE " TYPE? PRIMTYPE
 ANY NOT <OR FALSE ATOM> FALSE %<TYPE-W SYMTAB VECTOR> TRUTH UNTRUTH %<TYPE-C 
DATUM LIST> %<TYPE-W DATUM LIST> %<TYPE-W SAVED-STATE LIST> "CASEDF" X "CASETBL"
 "CASEND" FLUSHED ANY-AC DONT-CARE NOTE " CASE PHRASE ALWAYS FALSE " 
" NON REACHABLE CASE CLAUSE(S) " FOO "CASE" %<RGLOC PMAX T> %<RGLOC MAX-DENSE T>
 " DUPLICATE CASE ENTRY " GETYP!-OP %<TYPE-W OPCODE!-OP WORD> TYPE-CODE!-OP 
TYPVEC!-MUDDLE (`CAMGE  `CAIGE ) (`CAMLE  `CAILE ) NO-RETURN %<RGLOC NO-DATUM T>
 %<TYPE-C AC VECTOR> %<TYPE-W AC VECTOR> (`CAME  `CAIE ) (`CAMN  `CAIN )]>> 
<AND <ASSIGNED? GLUE> .GLUE <PUT ,CASE-FCN PGLUE ![715827882 -22906492246 
-22817013761 -1 -1 -64 0!]>> 


<SETG VAL-CHK %<RSUBR-ENTRY '[CASE-FCN VAL-CHK #DECL ("VALUE" ANY ANY)] 679>> 

<SETG EMACRO %<RSUBR-ENTRY '[CASE-FCN EMACRO #DECL ("VALUE" ANY ANY)] 875>> 

<SETG SPEC-ANA %<RSUBR-ENTRY '[CASE-FCN SPEC-ANA #DECL ("VALUE" ANY ANY ANY ANY 
ANY ANY NODE ANY)] 987>> 

<SETG DATFIX %<RSUBR-ENTRY '[CASE-FCN DATFIX #DECL ("VALUE" ANY ANY)] 1268>> 

<DEFINE CASE-GEN (N W
		  "AUX" (K <KIDS .N>) (P <NODE-NAME <1 <KIDS <1 .K>>>>)
			(N1 <2 .K>) (SKIP-CH <>) (RW .W) (LNT 0) (DF <>) DN
			(DFT <MAKE:TAG "CASEDF">) MI MX RNGS W1 (TAGS (X))
			(TBL <MAKE:TAG "CASETBL">) (ET <MAKE:TAG "CASEND">) NOW
			DAC TG TT W2 (FIRST T) S1 (S2 ()) TNUM)
   #DECL ((N DN N1) NODE (P) ATOM (S1) SAVED-STATE
	  (S2) <LIST [REST SAVED-STATE]> (RNGS) UVECTOR)
   <REGSTO <>>
   <SET W
	<COND (<==? .W FLUSHED> FLUSHED) (ELSE <GOODACS .N .W>)>>
   <PREFER-DATUM .W>
   <SET W2
	<GEN .N1
	     <COND (<AND <==? .P ==?> <SET TT <ISTYPE? <RESULT-TYPE .N1>>>>
		    <DATUM .TT ANY-AC>)
		   (ELSE DONT-CARE)>>>
   <SET K
	<MAPR ,UVECTOR
	      <FUNCTION (NP "AUX" (N <1 .NP>)) 
		      #DECL ((N) NODE)
		      <COND (<==? <NODE-TYPE .N> ,QUOTE-CODE>
			     <SET DF T>
			     <MAPRET>)>
		      <COND (.DF <SET DN .N> <SET DF <>> <MAPRET>)>
		      <COND (<==? <RESULT-TYPE .N> FALSE>
			     <MESSAGE NOTE " CASE PHRASE ALWAYS FALSE " .N>
			     <MAPRET>)>
		      <COND (<AND <==? <RESULT-TYPE .N> ATOM>
				  <NOT <EMPTY? <REST .NP>>>>
			     <MESSAGE NOTE
				      " NON REACHABLE CASE CLAUSE(S) "
				      <2 .NP>>
			     (.N () FOO))>
		      (.N () FOO)>
	      <REST .K 2>>>
   <SET LNT
    <LENGTH
     <SET RNGS
      <MAPF ,UVECTOR
       <FUNCTION (L "AUX" (N <1 .L>) (NN <NODE-NAME <PREDIC .N>>)) 
	  #DECL ((N) NODE)
	  <PUT .L 3 <MAKE:TAG "CASE">>
	  <COND
	   (<==? .P ==?>
	    <COND (<TYPE? .NN LIST>
		   <MAPR <> <FUNCTION (L) <PUT .L 1 <FIX <1 .L>>>> .NN>)
		  (ELSE <SET NN <CHTYPE .NN FIX>>)>)
	   (<==? .P TYPE?>
	    <COND (<TYPE? .NN LIST>
		   <MAPR <>
			 <FUNCTION (L "AUX" TT) 
				 <COND (<G? <SET TT <CHTYPE <1 .L> FIX>> ,PMAX>
					<SET SKIP-CH T>)>
				 <PUT .L 1 .TT>>
			 .NN>)
		  (ELSE
		   <COND (<G? <SET NN <CHTYPE <TYPE-C .NN> FIX>> ,PMAX>
			  <SET SKIP-CH T>)>
		   .NN)>)
	   (<TYPE? .NN LIST>
	    <MAPR <>
		  <FUNCTION (L) <PUT .L 1 <CHTYPE <PTYPE-C <1 .L>> FIX>>>
		  .NN>)
	   (ELSE <SET NN <CHTYPE <PTYPE-C .NN> FIX>>)>
	  <COND (<TYPE? .NN LIST> <PUT .L 2 .NN> <MAPRET !.NN>)
		(ELSE <PUT .L 2 (.NN)> .NN)>>
       .K>>>>
   <SORT <> .RNGS>
   <SET TNUM <1 .RNGS>>
   <COND (<L=? .LNT 3> <SET SKIP-CH T>)
	 (<G? <- <SET MX <NTH .RNGS .LNT>> <SET MI .TNUM>>
		  <* .LNT ,MAX-DENSE>>
	  <SET SKIP-CH T>)>
   <MAPF <>
	 <FUNCTION (NUM) 
		 <COND (<==? .NUM .TNUM>
			<MESSAGE ERROR " DUPLICATE CASE ENTRY " .N>)>
		 <SET TNUM .NUM>>
	 <REST .RNGS>>
   <COND
    (<==? .P ==?>
     <COND
      (<NOT .TT>
       <EMIT <INSTRUCTION GETYP!-OP!-PACKAGE `O  !<ADDR:TYPE .W2>>>
       <EMIT
	<INSTRUCTION
	 `CAIE 
	 `O 
	 <FORM
	  TYPE-CODE!-OP!-PACKAGE
	  <TYPE <COND (<TYPE? <SET TT <NODE-NAME <PREDIC <1 <1 .K>>>>> LIST>
		       <1 .TT>)
		      (ELSE .TT)>>>>>
       <BRANCH:TAG .DFT>)>
     <SET W2 <TOACV .W2>>
     <SET DAC <DATVAL .W2>>)
    (<==? .P TYPE?>
     <SET DAC <GETREG <>>>
     <EMIT <INSTRUCTION GETYP!-OP!-PACKAGE
			<ACSYM .DAC>
			!<ADDR:TYPE .W2>>>)
    (ELSE
     <SET DAC <GETREG <>>>
     <EMIT <INSTRUCTION GETYP!-OP!-PACKAGE
			<ACSYM .DAC>
			!<ADDR:TYPE .W2>>>
     <EMIT <INSTRUCTION `ASH  <ACSYM .DAC> 1>>
     <EMIT <INSTRUCTION `ADD  <ACSYM .DAC> TYPVEC!-MUDDLE 1 `(TVP) >>
     <EMIT <INSTRUCTION `LDB 
			<ACSYM .DAC>
			[<FORM (576) (<ADDRSYM .DAC>)>]>>)>
   <COND
    (<NOT .SKIP-CH>
     <MUNG-AC .DAC .W2>
     <RET-TMP-AC .W2>
     <COND (<0? .MI> <EMIT <INSTRUCTION `JUMPL  <ACSYM .DAC> .DFT>>)
	   (<==? .MI 1>
	    <EMIT <INSTRUCTION `JUMPLE  <ACSYM .DAC> .DFT>>)
	   (ELSE
	    <IMCHK '(`CAMGE `CAIGE) <ACSYM .DAC> <REFERENCE:ADR .MI>>
	    <BRANCH:TAG .DFT>)>
     <COND (<0? .MX> <EMIT <INSTRUCTION `JUMPG  <ACSYM .DAC> .DFT>>)
	   (<==? .MX -1>
	    <EMIT <INSTRUCTION `JUMPGE  <ACSYM .DAC> .DFT>>)
	   (ELSE
	    <IMCHK '(`CAMLE `CAILE) <ACSYM .DAC> <REFERENCE:ADR .MX>>
	    <BRANCH:TAG .DFT>)>
     <EMIT <INSTRUCTION `ADDI  <ACSYM .DAC> .TBL>>
     <EMIT <INSTRUCTION `JRST `@ <- .MI> (<ADDRSYM .DAC>)>>
     <LABEL:TAG .DFT>
     <SET S1 <SAVE-STATE>>
     <COND (<ASSIGNED? DN>
	    <SET W1 <SEQ-GEN <KIDS .DN> <DATFIX .W>>>
	    <ACFIX .W .W1>
	    <COND (<N==? <RESULT-TYPE .DN> NO-RETURN>
		   <SET S2 (<SAVE-STATE>)>
		   <BRANCH:TAG .ET>)>
	    <VAR-STORE <>>)
	   (ELSE
	    <SET W1 <MOVE:ARG <REFERENCE <>> <DATFIX .W>>>
	    <ACFIX .W .W1>
	    <SET S2 (<SAVE-STATE>)>
	    <VAR-STORE <>>
	    <BRANCH:TAG .ET>)>
     <LABEL:TAG .TBL>
     <SET NOW <+ .MI 1>>
     <REPEAT ()
	     <COND (<EMPTY? .RNGS> <RETURN>)>
	     <COND (<N==? .NOW <+ <1 .RNGS> 1>>
		    <SET NOW <+ .NOW 1>>
		    <EMIT <INSTRUCTION `SETZ .DFT>>)
		   (ELSE
		    <EMIT <INSTRUCTION `SETZ <DOTAGS <1 .RNGS> .K>>>
		    <SET NOW <+ .NOW 1>>
		    <SET RNGS <REST .RNGS>>)>>
     <MAPF <>
      <FUNCTION (L "AUX" (N <1 .L>) (TG <3 .L>)) 
	 <RET-TMP-AC .W1>
	 <RESTORE-STATE .S1>
	 <COND (<NOT .FIRST> <OR <==? .W1 ,NO-DATUM> <BRANCH:TAG .ET>>)
	       (ELSE <SET FIRST <>>)>
	 <LABEL:TAG .TG>
	 <COND
	  (<NOT <EMPTY? <KIDS .N>>>
	   <SET W1 <SEQ-GEN <KIDS .N> <DATFIX .W>>>)
	  (ELSE
	   <SET W1
		<MOVE:ARG
		 <REFERENCE <COND (<==? .P ==?> T)
				  (ELSE <NODE-NAME <PREDIC .N>>)>>
		 <DATFIX .W>>>)>
	 <OR <==? .W1 ,NO-DATUM> <SET S2 (<SAVE-STATE> !.S2)>>
	 <ACFIX .W .W1>>
      .K>)
    (ELSE
     <RET-TMP-AC .W2>
     <SET S1 <SAVE-STATE>>
     <REPEAT (L)
	     <COND (<EMPTY? .K> <RETURN>)>
	     <DISTAG <2 <SET L <1 .K>>> .DAC <SET TG <3 .L>>>
	     <COND (<NOT <EMPTY? <KIDS <1 .L>>>>
		    <SET W1 <SEQ-GEN <KIDS <1 .L>> <DATFIX .W>>>)
		   (ELSE <SET W1 <MOVE:ARG <REFERENCE T> <DATFIX .W>>>)>
	     <OR <==? .W1 ,NO-DATUM> <SET S2 (<SAVE-STATE> !.S2)>>
	     <VAR-STORE <>>
	     <RESTORE-STATE .S1>
	     <ACFIX .W .W1>
	     <OR <==? .W1 ,NO-DATUM> <BRANCH:TAG .ET>>
	     <LABEL:TAG .TG>
	     <SET K <REST .K>>
	     <RET-TMP-AC .W1>>
     <COND (<ASSIGNED? DN> <SET W1 <SEQ-GEN <KIDS .DN> <DATFIX .W>>>)
	   (ELSE <SET W1 <MOVE:ARG <REFERENCE <>> <DATFIX .W>>>)>
     <OR <==? .W1 ,NO-DATUM> <SET S2 (<SAVE-STATE> !.S2)>>)>
   <COND (<AND <TYPE? .W DATUM> <N==? <RESULT-TYPE .N> NO-RETURN>>
	  <SET W2 .W>
	  <AND <ISTYPE? <DATTYP .W2>>
	       <TYPE? <DATTYP .W1> AC>
	       <NOT <==? <DATTYP .W2> <DATTYP .W1>>>
	       <RET-TMP-AC <DATTYP .W1> .W1>>
	  <AND <TYPE? <DATTYP .W2> AC>
	       <FIX-ACLINK <DATTYP .W2> .W2 .W1>>
	  <AND <TYPE? <DATVAL .W2> AC>
	       <FIX-ACLINK <DATVAL .W2> .W2 .W1>>)>
   <MERGE-STATES .S2>
   <LABEL:TAG .ET>
   <MOVE:ARG .W .RW>> 

<SETG DOTAGS %<RSUBR-ENTRY '[CASE-FCN DOTAGS #DECL ("VALUE" <OR ATOM FALSE> FIX 
<UVECTOR [REST <LIST NODE <LIST [REST FIX]> ATOM>]>)] 2770>> 

<SETG DISTAG %<RSUBR-ENTRY '[CASE-FCN DISTAG #DECL ("VALUE" ATOM <LIST [REST FIX
]> AC ATOM)] 2806>> 

<SETG PTYPE-C %<RSUBR-ENTRY '[CASE-FCN PTYPE-C #DECL ("VALUE" FIX ANY)] 2903>> 
