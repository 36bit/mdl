'<PCODE "CARGEN">

"	This file contains analyzers and code generators for arithmetic
 SUBRs and predicates.  For convenience many of the SUBRs that are
similar are combined into one analyzer/generator.  For more info
on analyzers see SYMANA and on generators see CODGEN.
" 

<NEWTYPE TRANS VECTOR '<<PRIMTYPE VECTOR> NODE <UVECTOR [7 FIX]> <UVECTOR [7 FIX
]>>> 

"	A type TRANS specifies to an inferior node what arithmetic transforms are
prohibited, permitted or desired.  A transform consists of 3 main elements:
a NODE, an input, an output.  The input and output are UVECTORS of 7 fixes:

1)	negative ok	0-no, 1-ok, 2-pref
2)	+ or - const ok	0-no, 1-ok, 2-pref
3)	const for + or -
4)	* or / const ok	0-no, 1-* ok, 2-* pref, 3-/ ok, 4-/ pref
5)	hw ok		0-no, 1-ok, 2-pref
6)	hw swapped also	0-no, 1-ok, 2-pref
" 

<SETG SNODES ![,QUOTE-CODE ,LVAL-CODE ,GVAL-CODE!]> 

<SETG SNODES1 <REST ,SNODES>> 

<SETG COMMUTE  %<RSUBR!- '[ %<PCODE!- "CARGEN" 0> COMMUTE #DECL ("VALUE" LIST <
LIST [REST NODE]> ANY LIST) CONFORM ANY2ACS FREE-ACS UPDATE-WHERE LIST-LNT-SPEC 
REFERENCE D:B:TAG VAR-STORE BRANCH:TAG ADDR:TYPE MESSAGE MOVE:TYP MOVE:VALUE 
REG? GET2REG AC+1OK? LABEL:TAG IMCHK REFERENCE:ADR MINL GET-ELE-TYPE MAKE:TAG 
ISTYPE-GOOD? FLUSH-RESIDUE DELAY-KILL POPWR2 DATTYP-FLUSH TOACV RET-TMP-AC 
GET-DF STRUCTYP GEN MOVE:ARG EMIT ADDR:VALUE LADDR DATUM GETREG SGETREG MUNG-AC 
GOODACS ISTYPE? %<TYPE-W NODE VECTOR> T %<RGLOC SNODES T> ![/ * - +!] NO-KILL (
LIST) ![0 1 0 1!] ![+ + * *!] FIX %<TYPE-C AC VECTOR> ![`AOS  `SOS !] %<TYPE-W 
OPCODE!-OP WORD> %<TYPE-W AC VECTOR> %<TYPE-W DATUM LIST> ANY-AC STORE-SET 
TRANSFORM (TRANS) FLOAT ![FIX FLOAT!] DONT-CARE %<TYPE-C DATUM LIST> %<TYPE-W 
SYMTAB VECTOR> ALL (`MOVE  `MOVEI  `MOVNI ) UVECTOR LIST [<2 (2)>] ![`CAMG  
`CAML !] %<RGLOC INS1 T> %<RGLOC LAST-AC T> %<RGLOC ALLACS T> MAX (`CAMG  
`CAIG ) (`CAML  `CAIL ) ABS %<TYPE-C NODE VECTOR> TUPLE %<RGLOC LAST-AC-1 T> (
`AND  `ANDI ) (`IDIV  `IDIVI ) (`ADD  `ADDI ) WORD WARNING "UNECESSARY FLOAT " 
GETYP!-OP "UNECESSARY FIX " <TYPE-CODE!-OP FIX> <`CAIE  0 <TYPE-CODE!-OP FLOAT>>
 ![G? L? G? G=? L=? G=? ==? ==? N==? N==? 1? -1? 1? 0? 0?!] %<RGLOC 0SUBRS T> %<
RGLOC PREDV T> FLUSHED NO-RETURN %<RGLOC NO-DATUM T> %<RGLOC GENERATORS T> ![0? 
N0? 1? -1? N1? N-1? ==? N==?!] %<TYPE-W TRANS VECTOR> G? L=? 1? ![G? G=? G? L? 
L=? L?!] %<RGLOC 0JMPS T> %<RGLOC 0SKPS T> CAREFUL %<RGLOC SKIPS T> %<RGLOC 
CMSUBRS T> [-1] %<RGLOC AOJS T> %<RGLOC SOJS T> [-1.0] [1.0] <TYPE-CODE!-OP 
FLOAT> %<TYPE-W MUDREF!-OP WORD> AC]>> 
<AND <ASSIGNED? GLUE> .GLUE <PUT ,COMMUTE PGLUE ![715827882 -22906492246 
-22906404865 -1 -1 -1 -4096 0!]>> 


" Generate code for +,-,* and /.  Note sexy AOS and SOS generator. Also
note bug causing result to be left in AC even if not wanted." 

<SETG ARITH-GEN %<RSUBR-ENTRY '[COMMUTE ARITH-GEN #DECL ("VALUE" ANY NODE ANY)] 
272>> 

<SETG SAME-AC-FIX %<RSUBR-ENTRY '[COMMUTE SAME-AC-FIX #DECL ("VALUE" DATUM DATUM
DATUM)] 1455>> 

<SETG SHIFT-INS %<RSUBR-ENTRY '[COMMUTE SHIFT-INS #DECL ("VALUE" ANY DATUM FIX 
FIX)] 1536>> 

<SETG SEGINS %<RSUBR-ENTRY '[COMMUTE SEGINS #DECL ("VALUE" FIX FIX ANY NODE 
DATUM DATUM FIX ANY)] 1584>> 

<SETG ADVANCE %<RSUBR-ENTRY '[COMMUTE ADVANCE #DECL ("VALUE" ANY ATOM AC)] 1849>
> 

<SETG ADVANCE-AND-CHECK %<RSUBR-ENTRY '[COMMUTE ADVANCE-AND-CHECK #DECL ("VALUE"
ANY ATOM AC ANY)] 1912>> 

<SETG EMPTY-JUMP %<RSUBR-ENTRY '[COMMUTE EMPTY-JUMP #DECL ("VALUE" ANY ATOM AC 
ATOM)] 1998>> 

<SETG EMITSEG %<RSUBR-ENTRY '[COMMUTE EMITSEG #DECL ("VALUE" ANY AC AC ANY FIX 
FIX FIX)] 2040>> 

<SETG GENINS %<RSUBR-ENTRY '[COMMUTE GENINS #DECL ("VALUE" ANY FIX FIX AC FIX 
ANY)] 2149>> 

<SETG GETEL %<RSUBR-ENTRY '[COMMUTE GETEL #DECL ("VALUE" ANY ANY ANY ANY)] 2253>
> 

<SETG INS1 ![![![`ADDM  `SUBM  `IMULM  `IDIVM !] ![`FADRM  `FSBRM  `FMPRM  
`FDVRM !]!] ![![(`ADD  `ADDI  `SUBI ) (`SUB  `SUBI  `ADDI ) (`IMUL  `IMULI ) (
`IDIV  `IDIVI )!] ![(`FADR  () () `FADRI ) (`FSBR  () () `FSBRI ) (`FMPR  () () 

`FMPRI ) (`FDVR  () () `FDVRI )!]!]!]> 

" Do the actual arithmetic code generation here with all args set up." 

<SETG ARITH-INS %<RSUBR-ENTRY '[COMMUTE ARITH-INS #DECL ("VALUE" DATUM FIX DATUM
DATUM ANY FIX)] 2303>> 

<SETG MIN-MAX %<RSUBR-ENTRY '[COMMUTE MIN-MAX #DECL ("VALUE" ANY NODE ANY)] 2654
>> 

<SETG ABS-GEN %<RSUBR-ENTRY '[COMMUTE ABS-GEN #DECL ("VALUE" ANY NODE ANY)] 3022
>> 

<SETG MOD-GEN %<RSUBR-ENTRY '[COMMUTE MOD-GEN #DECL ("VALUE" ANY NODE ANY)] 3508
>> 

<SETG ROT-GEN %<RSUBR-ENTRY '[COMMUTE ROT-GEN #DECL ("VALUE" ANY ANY ANY)] 3842>
> 

<SETG LSH-GEN %<RSUBR-ENTRY '[COMMUTE LSH-GEN #DECL ("VALUE" ANY ANY ANY)] 3862>
> 

<SETG ROT-LSH-GEN %<RSUBR-ENTRY '[COMMUTE ROT-LSH-GEN #DECL ("VALUE" ANY NODE 
ANY ANY)] 3882>> 

<SETG FLOAT-GEN %<RSUBR-ENTRY '[COMMUTE FLOAT-GEN #DECL ("VALUE" ANY NODE ANY)] 
4076>> 

<SETG FIX-GEN %<RSUBR-ENTRY '[COMMUTE FIX-GEN #DECL ("VALUE" ANY NODE ANY)] 4227
>> 

<SETG GEN-FLOAT %<RSUBR-ENTRY '[COMMUTE GEN-FLOAT #DECL ("VALUE" DATUM DATUM 
"OPTIONAL" ANY)] 4372>> 

<SETG GEN-FIX %<RSUBR-ENTRY '[COMMUTE GEN-FIX #DECL ("VALUE" DATUM DATUM 
"OPTIONAL" ANY)] 4616>> 

<SETG FLOP %<RSUBR-ENTRY '[COMMUTE FLOP #DECL ("VALUE" ATOM ATOM)] 4880>> 

<SETG FLIP %<RSUBR-ENTRY '[COMMUTE FLIP #DECL ("VALUE" ATOM ATOM)] 4905>> 

<SETG 0SUBRS ![1? N1? -1? N-1? 0? N0? G? L=? L? G=? ==? N==?!]> 

<SETG PRED? %<RSUBR-ENTRY '[COMMUTE PRED? #DECL ("VALUE" <OR ATOM FALSE> FIX)] 
4957>> 

<SETG PRED:BRANCH:GEN %<RSUBR-ENTRY '[COMMUTE PRED:BRANCH:GEN #DECL ("VALUE" ANY
ANY NODE ANY "OPTIONAL" ANY ANY)] 4987>> 

<SETG LN-LST %<RSUBR-ENTRY '[COMMUTE LN-LST #DECL ("VALUE" <OR ATOM FALSE> NODE)
] 5200>> 

<SETG 0-TEST %<RSUBR-ENTRY '[COMMUTE 0-TEST #DECL ("VALUE" ANY NODE ANY 
"OPTIONAL" ANY ANY ANY)] 5230>> 

<SETG SW? %<RSUBR-ENTRY '[COMMUTE SW? #DECL ("VALUE" FIX ATOM)] 5339>> 

<SETG MAKE-TRANS %<RSUBR-ENTRY '[COMMUTE MAKE-TRANS #DECL ("VALUE" TRANS NODE 
FIX FIX FIX FIX FIX FIX FIX)] 5359>> 

<SETG DO-TRANS %<RSUBR-ENTRY '[COMMUTE DO-TRANS #DECL ("VALUE" FIX FIX TRANS)] 
5418>> 

<SETG UPDATE-TRANS %<RSUBR-ENTRY '[COMMUTE UPDATE-TRANS #DECL ("VALUE" TRANS ANY
TRANS)] 5483>> 

<SETG TEST-DISP %<RSUBR-ENTRY '[COMMUTE TEST-DISP #DECL ("VALUE" ANY NODE ANY 
ANY ANY ANY ANY <OR FIX FLOAT> ANY)] 5584>> 

<SETG 0-TEST1 %<RSUBR-ENTRY '[COMMUTE 0-TEST1 #DECL ("VALUE" ANY NODE ANY ANY 
ANY ANY DATUM ANY)] 5732>> 

<SETG ZER-JMP %<RSUBR-ENTRY '[COMMUTE ZER-JMP #DECL ("VALUE" ANY ANY DATUM ANY <
OR FALSE DATUM>)] 6060>> 

<SETG 0SKPS ![`SKIPN  `SKIPE  `SKIPGE  `SKIPL  `SKIPLE  `SKIPG  `SKIPN  `SKIPE !
]> 

<SETG 0JMPS ![`JUMPE  `JUMPN  `JUMPL  `JUMPGE  `JUMPG  `JUMPLE  `JUMPE  `JUMPN !
]> 

<SETG 1?-GEN %<RSUBR-ENTRY '[COMMUTE 1?-GEN #DECL ("VALUE" ANY NODE ANY 
"OPTIONAL" ANY ANY ANY)] 6197>> 

<SETG 1?-TEST %<RSUBR-ENTRY '[COMMUTE 1?-TEST #DECL ("VALUE" ANY NODE ANY ANY 
ANY ANY DATUM ANY)] 6308>> 

<SETG AOJS ![`AOJL  `AOJLE  `AOJG  `AOJGE  `AOJE  `AOJN  `AOJE  `AOJN  `AOJE  
`AOJN  `AOJE  `AOJN !]> 

<SETG SOJS ![`SOJL  `SOJLE  `SOJG  `SOJGE  `SOJE  `SOJN  `SOJE  `SOJN  `SOJE  
`SOJN  `SOJE  `SOJN !]> 

<SETG GEN-COMP %<RSUBR-ENTRY '[COMMUTE GEN-COMP #DECL ("VALUE" ANY ATOM <DATUM 
ANY AC> ANY ATOM ANY ANY ANY)] 6680>> 

<SETG GENFLOAT %<RSUBR-ENTRY '[COMMUTE GENFLOAT #DECL ("VALUE" ANY ANY ANY ANY 
ANY)] 6874>> 

<SETG CFFLARG %<RSUBR-ENTRY '[COMMUTE CFFLARG #DECL ("VALUE" ANY DATUM)] 6929>> 

<SETG TEST-GEN %<RSUBR-ENTRY '[COMMUTE TEST-GEN #DECL ("VALUE" ANY NODE ANY 
"OPTIONAL" ANY ANY ANY)] 6996>> 

<SETG TEST-GEN2 %<RSUBR-ENTRY '[COMMUTE TEST-GEN2 #DECL ("VALUE" ANY NODE ANY 
ANY ANY ANY DATUM <OR FIX FLOAT> ANY)] 7758>> 

<SETG GEN-COMP2 %<RSUBR-ENTRY '[COMMUTE GEN-COMP2 #DECL ("VALUE" ANY ATOM ATOM 
ATOM DATUM <DATUM ANY AC> ANY ATOM)] 8021>> 

<SETG CMSUBRS '![0? N0? 1? N1? -1? N-1? ==? N==? G? G=? L? L=?!]> 

<SETG SKIPS '![(`CAMGE  `CAIGE ) (`CAMG  `CAIG ) (`CAMLE  `CAILE ) (`CAML  
`CAIL ) (`CAMN  `CAIN ) (`CAME  `CAIE ) (`CAMN  `CAIN ) (`CAME  `CAIE ) (
`CAMN  `CAIN ) (`CAME  `CAIE ) (`CAMN  `CAIN ) (`CAME  `CAIE )!]> 

 
