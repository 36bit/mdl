
<PACKAGE "R-GC">

<ENTRY READER-GC>

<USE "ASYLUM" "MADMAN" "R-DEFS" "R-IO" "M-DEFS">

<DEFINE READER-GC ("AUX" RES NEW C (OUTCHAN .OUTCHAN))
	#DECL ((RES) ANY (NEW) STRING (C OUTCHAN) CHANNEL)
	<COND (<NOT ,READER-ASYLUM> <PRINC "No Reader Asylum?">)
	      (ELSE
	       <UPDATE-TABLE T>
	       <SET C <1 ,READER-ASYLUM>>
	       <SET NEW <STRING <9 .C> !\: <10 .C> !\; <7 .C> " NEW">>
	       <SET RES
		    <AND <RGC .NEW>
			 <RENAME
			  <STRING <9 .C> !\:
				  <10 .C> !\;
				  <7 .C> !\ 
				  <8 .C>>
			  TO
			  <STRING <7 .C> " OLD">>
			 <RENAME
			  .NEW
			  TO
			  <STRING <7 .C> !\  <8 .C>>>>>
	       <COND (.RES
		      <SETG READER-ASYLUM <>>
		      <READER-INIT>
		      <PRINC "Compaction successful.">)
		     (ELSE
		      <PRINC "Reader Asylum compaction failed:">
		      <PRINT .RES>
		      <CRLF>)>)>>

<DEFINE RGC RG ("OPTIONAL" (NEWNAM "NEW ASYLUM")
		      "AUX" NEWASY (OLDASY ,READER-ASYLUM)
			    (SS <ARESET ,SCRATCH-SPACE>) TMP
			    (MY-SPACE <AFIND 3>) (MS <ARESET ,MSG-SPACE>)
			    (SPARE <AFIND 3>) L-ASYLUM)
   #DECL ((NEWASY) <OR ASYLUM FALSE> (OLDASY) ASYLUM
	  (SPARE MS SS MY-SPACE) SPACE (TMP) ANY
	  (L-ASYLUM) <VECTOR [REST FIX]> (NEWNAM) STRING)
   <COND (<NOT <SET TMP <CREATE-NEW-ASYLUM .OLDASY .NEWNAM .SPARE>>>
	  <RETURN .TMP .RG>)>
   <COND
    (<SET NEWASY <OPEN-DATA-FILE .NEWNAM>>
     <DATA-RESERVE .NEWASY 10>
     <DO-COPY .OLDASY .NEWASY ,M-TABLE .SS .SPARE>
     <DO-COPY .OLDASY .NEWASY ,M-FOLDERS .SS .SPARE .MY-SPACE>
     <COND (<SET TMP <DATA-AREAD .OLDASY ,M-ASYLUM .MY-SPACE>>
	    <SET L-ASYLUM [!.TMP]>)
	   (ELSE <SET L-ASYLUM []>)>
     <DO-COPY .OLDASY .NEWASY ,M-FIXES .SS .SPARE>
     <DO-COPY .OLDASY .NEWASY ,M-TAILOR .SS .SPARE>
     <COND (<NOT <EMPTY? .L-ASYLUM>>
     <REPEAT (M N (CT 0) NL (MT <DATA-AREAD .OLDASY ,M-TABLE .MY-SPACE>)
	      (ALL <GET-ALL .MT>))
       #DECL ((N) <OR MANIAC FALSE> (CT) FIX (ALL) <LIST [REST FIX]>
	      (MT) MTABLE (NL) <VECTOR [REST FIX]>)
       <COND
	(<MEMQ <1 .L-ASYLUM> .ALL>
	 <SET CT <+ .CT 1>>
	 <COND (<SET M <DATA-AREAD .OLDASY <2 .L-ASYLUM> <ARESET .SPARE>>>
		<COND (<SET N
			    <DATA-APRINT .NEWASY -1 <ARESET .MS> <AGC .MS .M>>>
		       <COND (<L? <1 .N> 11>
			      <ERROR OVERWROTE-RESERVED-MANIAC!-ERRORS
				     .N
				     READER-GC>)>
		       <PUT .L-ASYLUM 2 <1 .N>>)
		      (<ERROR MESSAGE-PRINT-FAILED!-ERRORS
			      <1 .L-ASYLUM>
			      <2 .L-ASYLUM>
			      .N
			      READER-GC>
		       <PUT .L-ASYLUM 2 0>)>)
	       (<ERROR MESSAGE-READ-FAILED!-ERRORS
		       <1 .L-ASYLUM>
		       <2 .L-ASYLUM>
		       .M>)>)
	(<PUT .L-ASYLUM 2 0>)>
       <COND (<EMPTY? <SET L-ASYLUM <REST .L-ASYLUM 2>>>
	      <SET NL <AIVECTOR <ARESET .SS> <* 2 .CT> 0>>
	      <SET L-ASYLUM <TOP .L-ASYLUM>>
	      <REPEAT ()
		      <COND (<NOT <0? <2 .L-ASYLUM>>>
			     <PUT .NL 1 <1 .L-ASYLUM>>
			     <PUT .NL 2 <2 .L-ASYLUM>>
			     <SET NL <REST .NL 2>>)>
		      <COND (<OR <EMPTY? .NL>
				 <EMPTY? <SET L-ASYLUM <REST .L-ASYLUM 2>>>>
			     <RETURN>)>>
	      <DATA-APRINT .NEWASY ,M-ASYLUM .SS <TOP .NL>>
	      <RETURN>)>>)>
     <CLOSE-DATA-FILE .NEWASY>
     <CLOSE-DATA-FILE .OLDASY>
     <AGIVE .MY-SPACE>
     <AGIVE .SPARE>
     "DONE")>>

<DEFINE DO-COPY (OLDASY NEWASY ID FINAL-SPACE SCRATCH-SPACE
		 "OPTIONAL" (COPY-SPACE <>)
		 "AUX" TMP)
  #DECL ((OLDASY NEWASY) ASYLUM (ID) <OR FIX STRING>
	 (FINAL-SPACE SCRATCH-SPACE) SPACE (COPY-SPACE) <OR FALSE SPACE>)
  <COND (<SET TMP <DATA-AREAD .OLDASY .ID <ARESET .SCRATCH-SPACE>>>
	 <DATA-APRINT .NEWASY .ID <ARESET .FINAL-SPACE>
		      <SET TMP <AGC .FINAL-SPACE .TMP>>>
	 <COND (.COPY-SPACE
		<ACOPY .COPY-SPACE .TMP>)>)>>

<DEFINE CREATE-NEW-ASYLUM (OLDASY NEWNAM SPARE
			   "AUX" (CLEN <* 5 1024>) TMP CH UV ALL)
	#DECL ((OLDASY) ASYLUM (NEWNAM) STRING (SPARE) SPACE (CLEN) FIX
	       (TMP) <OR VECTOR FALSE> (CH) <OR CHANNEL FALSE>
	       (ALL) <LIST [REST FIX]>)
	<SET CLEN
	     <+ .CLEN
		<GET-LENGTH .OLDASY ,M-TABLE T>
		<GET-LENGTH .OLDASY ,M-FOLDERS <>>
		<GET-LENGTH .OLDASY ,M-ASYLUM <>>
		<GET-LENGTH .OLDASY ,M-FIXES T>
		<GET-LENGTH .OLDASY ,M-TAILOR <>>>>
	<SET TMP <DATA-AREAD .OLDASY ,M-ASYLUM <ARESET .SPARE>>>
	<SET ALL <GET-ALL <DATA-AREAD .OLDASY ,M-TABLE .SPARE>>>
	<COND (.TMP
	       <REPEAT ((T .TMP))
		#DECL ((T) <VECTOR [REST FIX]>)
		<COND (<MEMQ <1 .T> .ALL>
		       <SET CLEN <+ .CLEN <GET-LENGTH .OLDASY <2 .T> T>>>)>
		<COND (<EMPTY? <SET T <REST .T 2>>> <RETURN>)>>)>
	<SET CLEN <+ .CLEN <MAX <* 6 1024> </ .CLEN 10>>>>
	<COND (<SET CH <OPEN "PRINTB" .NEWNAM>>
	       <SET UV <IUVECTOR 1024>>
	       <REPEAT ((N </ <+ .CLEN 1023> 1024>))
		       #DECL ((N) FIX)
		       <PRINTB .UV .CH>
		       <COND (<0? <SET N <- .N 1>>> <RETURN>)>>
	       <CLOSE .CH>)>>

<DEFINE GET-LENGTH (ASY ID ERR? "AUX" MANIAC TMP)
  #DECL ((ASY) ASYLUM (ID) <OR STRING FIX> (ERR?) <OR ATOM FALSE>
	 (MANIAC) <OR MANIAC FALSE> (TMP) FIX)
  <COND (<SET MANIAC <DATA-OPEN "READ" .ASY .ID>>
	 <SET TMP <2 .MANIAC>>
	 <DATA-CLOSE .ASY .MANIAC>
	 .TMP)
	(.ERR?
	 <ERROR OPEN-FAILED!-ERRORS .ID .MANIAC GET-LENGTH>
	 0)
	(0)>>

<DEFINE GET-ALL (MT) #DECL ((MT) <UVECTOR [REST FIX]>)
  <REPEAT ((A <REST .MT <R-HEADER .MT>>) (TLEN <R-TUPLE .MT>) (R ()))
    #DECL ((A) <UVECTOR [REST FIX]> (TLEN) FIX (R) <LIST [REST FIX]>)
    <COND (<OR <EMPTY? .A> <0? <1 .A>>> <RETURN .R>)>
    <SET R (<MSG .A> !.R)>
    <SET A <REST .A .TLEN>>>>

<ENDPACKAGE>
