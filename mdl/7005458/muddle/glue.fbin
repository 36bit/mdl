'<PCODE "2ELMER">

<PACKAGE "GLUE"> 

<ENTRY GLUE-MAX-SPACE PKG SURV VICTIMS GROUP-GLUE FLUSHED> 

<USE "LIST-HACKS"> 

<SETG RAND  %<RSUBR!- '[ %<PCODE!- "2ELMER" 0> RAND #DECL ("VALUE" FIX FIX) 
LREVERSE PASS-1 VICTIMS SURV PKG RSBS (LIST) WINNERS FOO 
"Group glue ELMER at work." T %<RGLOC FLUSHED T> #FALSE ("Not a valid GROUP.") 
"Finished pass 1 of GLUE, code length = " #FALSE ("No RSUBRS") ![!] %<RGLOC 
GLUE-MAX-SPACE T> "PRINTB" %<RGLOC MUDDLE T> "GLUETEMP" "_GLUE >" "READB" ":<" 
PHRED RSUBR-NOT-IN-SENT-LIST!-ERRORS "Starting final code update." 
BAD-INTERNAL-GLUE-STUFF!-ERRORS "DONE" (0 #CODE ![!]) CODE-RAN-OUT PACKAGE 
OBLIST %<RGLOC UNIQ.TABLE T> %<TYPE-W ASOTAB UVECTOR> %<TYPE-W HASH WORD> ANY 
GVAL UVECTOR WORD ![0!] AND <ASSIGNED? GLUE> .GLUE PUT GLUE SETG VALUE 
"RSUBR-ENTRY named:  " %<RGLOC OUTCHAN T> "Warning--Lacks glue bits. " 
"RSUBR named:  " RSUBR "Lacks good FIXUPS." FIX #CODE ![!] "ERROR:  " 
" must be mcalled by " 
",
has no entry code.  Is one of your crufties a chomper?" BAD-GLUE-BITS!-ERRORS 
"Bit is " " Index is " " Word is " " Rel-loc is " "Copying fixups." 
"Final group cleanup." "Flushing RSUBR-ENTRY "]>> 
<AND <ASSIGNED? GLUE> .GLUE <PUT ,RAND PGLUE ![738197503 -1 -1 -64 0!]>> 


<SET VICTIMS <SET PKG <SET SURV <>>>> 

<BLOCK (<ROOT>)> 

<SET GLUE T> 

<ENDBLOCK> 

<NEWTYPE ASOTAB UVECTOR> 

<NEWTYPE HASH WORD> 

<MANIFEST R M HW HW-1 PJC LHW AC INSFLD INDEX-FIELD> 

<SETG R 14> 

<SETG M 13> 

<SETG HW-1 <BITS 17 1>> 

<SETG PJC 23751557120> 

<SETG INSFLD <BITS 9 27>> 

<SETG HW <BITS 18>> 

<SETG LHW <BITS 18 18>> 

<SETG AC <BITS 4 23>> 

<SETG INDEX-FIELD <BITS 4 18>> 

<SETG ICL 1> 

<SETG PCL 2> 

<SETG MCL 3> 

<MANIFEST ICL PCL MCL> 

<SETG FIN-LH <BITS 16 18>> 

<SETG FIN-TYPE <BITS 2 34>> 

<MANIFEST FIN-LH FIN-TYPE> 

<SETG GLUE-MAX-SPACE <>> 

"" 

<SETG GROUP-GLUE %<RSUBR-ENTRY '[RAND GROUP-GLUE #DECL ("VALUE" <OR FALSE STRING
> ATOM "OPTIONAL" <OR ATOM FALSE> <OR CHANNEL FALSE> <OR LIST STRING FALSE> <OR 
FALSE LIST> <OR FALSE LIST>)] 279>> 

"" 

"" 

"" 

"" 

"" 

"" 

"" 

<DEFMAC NEXTBITS (ITEM) #DECL ((ITEM) FIX) <FORM PROG () <FORM COND '(<L? .ELNO 
0> <SET ELNO 34> <SET NGLUBITS (-1 !.NGLUBITS)>)> <FORM PUT '.NGLUBITS 1 <FORM 
PUTBITS '<1 .NGLUBITS> '<BITS 2 .ELNO> .ITEM>> '<SET ELNO <- .ELNO 2>>>> 

"" 

"" 

"" 

"" 

"" 

"" 

"" 

"" 

"" 

"" 

"" 

"" 

"IS IT '<AND <ASSIGNED? GLUE> .GLUE <PUT .GLUE ..." 

"" 

"IF SOMBTHINGS A GVAL CONS ONTO THE GVAL LIST" 

"" 

"IS SOMETHING A RSUBR ENTRY?" 

"" 

"THIS IS IT.  THIS FUNCTION DOES MOST OF THE WORK OF GLUE.  IT LOOKS OVER THE GLUE
 BITS AND HACKS THE RSUBRS" 

<SETG PASS-1 %<RSUBR-ENTRY '[RAND PASS-1 #DECL ("VALUE" <LIST FIX LIST LIST LIST
LIST LIST FIX FIX LIST <LIST [REST <LIST FIX <VECTOR ATOM ATOM DECL>>]> ANY LIST
FIX <LIST [REST <PRIMTYPE WORD>]> FIX <LIST <PRIMTYPE WORD> [REST <PRIMTYPE WORD
>]> <OR FALSE LIST>> LIST FIX FIX <OR CHANNEL FALSE> <OR FALSE LIST> <OR FALSE 
LIST> LIST <LIST FIX> <LIST FIX> <LIST FIX> <LIST <UVECTOR [REST FIX]>> <LIST 
FIX [REST FIX]> LIST LIST FIX LIST LIST <OR FALSE ATOM> FIX <LIST <PRIMTYPE WORD
> [REST <PRIMTYPE WORD>]>)] 3593>> 

"" 

"ROUTINE TO HACK THE FINAL RSUBRS AND RSUBR ENTRYS" 

"" 

"" 

"" 

"" 

<ENDPACKAGE> 
