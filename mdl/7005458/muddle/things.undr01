
<BLOCK (<ROOT>)>
INQUIRE SMALL-OUT SMALL-IN DUAL-OUT PEEK FLOAD-BUT
END-SMALL-OUT END-SMALL-IN END-DUAL-OUT THINGIES BBC DISPENSATION
<ENDBLOCK>

<BLOCK (<MOBLIST THINGIES 17> <ROOT>)>

<DEFINE FLOAD-BUT (CHN "TUPLE" GOODS "AUX" (FOO <MAPF ,LIST ,GVAL .GOODS>)
					   (KEEP-FIXUPS T) (REDEFINE T))
	<FLOAD .CHN>
	<MAPF <> ,SETG .GOODS .FOO>
	T>

<DEFINE PEEK ()
    <VALRET <STRING "P" <JNAME> "JP">> "A BOO">

<DEFINE IPC-MHND (MS TYPM F1 F2 "TUPLE" FOO "AUX" CHN)
	<PROG ()
		<COND (<NOT <==? .TYPM *400000000001*>> <RETURN>)>
		<INT-LEVEL 0>
		<PRINC "ACKNOWLEDGEMENT FROM ">
		<PRINC .F1> <PRINC " "> <PRINC .F2> <TERPRI>
		<SET CHN <OPEN "READ" .MS>>
		<AND .CHN <RENAME .MS>>
		<AND .CHN <FILECOPY .CHN>>
		<TERPRI>
		<TERPRI>
		#DISMISS T>>

<ON "IPC" ,IPC-MHND 1>

<DEFINE INQUIRE (UNAM JNAM 'TODO "AUX" (PTODO <UNPARSE <FORM PRINT .TODO>>) (OBLIST ()))
	<SEND .UNAM .JNAM
	    <UNPARSE <FORM
		PROG LERR\ !-INTERRUPTS
		'((OUTCHAN <OR <OPEN "PRINT" "DSK:_NQRY_ >">
				<OPEN "PRINT" "DSK:HUDINI;_NQRY_ >">>)
		(EPRINT <ON "ERROR" #FUNCTION (("TUPLE" FRATM)
			<COND (<ASSIGNED? INDENT-TO> <PRINC "*ERROR* ">
				<PRINT .FRATM> <INT-LEVEL 0>
				<RETURN T .INDENT-TO>) (T)>) 10000 0>)
		  (OBLIST ,OBLIST))
		'<SET LERR\ !-INTERRUPTS <FRAME <FRAME <FRAME>>>>
		'<PUT .OUTCHAN 13 80>
		<FORM PROG INDENT-TO () <FORM EVAL <FORM PARSE .PTODO>>>
		'<OFF .EPRINT>
		'<CLOSE .OUTCHAN>
		<FORM SEND <UNAME> <JNAME>
		    '<STRING <10 .OUTCHAN> ";"
				<7 .OUTCHAN> " " <8 .OUTCHAN>>
			*400000000001*>>>
	     *400000000000*>>

<DEFINE DUAL-OUT (CHN "OPTIONAL" (SCHN .OUTCHAN) "AUX" (FOO <TOP .CHN>))
	<PUT .FOO 1 (.SCHN !<1 .FOO>)>
	.CHN>

<DEFINE END-DUAL-OUT (CHN)
	<PUT <TOP .CHN> 1 ()>
	.CHN>

<DEFINE SMALL-IN (FROM "AUX" FOO) #DECL ((FROM) CHANNEL)
	<SET FOO <ISTORAGE 6 0>>
	<PUT .FOO 1 <12 .FROM>>
	<PUT .FOO 2 *301040000141*>
	<PUT .FOO 3 *301040000173*>
	<PUT .FOO 4 *334000000000*>
	<PUT .FOO 5 *275040000040*>
	<PUT .FOO 6 *263740000000*>
	<PUT .FROM SMALL-IN .FOO>
	<SET FOO <+ *260740000000* <CHTYPE <GETBITS .FOO <BITS 18>> FIX>>>
	<PUT .FROM 12 .FOO>>

<DEFINE END-SMALL-IN (FROM "AUX" FOO)
	<PROG ()
		<SET FOO <GET .FROM SMALL-IN>>
		<OR .FOO <RETURN .FOO>>
		<PUT .FROM 12 <1 .FOO>>
		<FREE .FOO>
		.FROM>>

<DEFINE SMALL-OUT (FROM "AUX" FOO) #DECL ((FROM) CHANNEL)
	<SET FOO <ISTORAGE 6 0>>
	<PUT .FOO 1 *301040000101*>
	<PUT .FOO 2 *301040000133*>
	<PUT .FOO 3 *334000000000*>
	<PUT .FOO 4 *271040000040*>
	<PUT .FOO 5 <12 .FROM>>
	<PUT .FOO 6 *263740000000*>
	<PUT .FROM SMALL-OUT .FOO>
	<SET FOO <+ *260740000000* <CHTYPE <GETBITS .FOO <BITS 18>> FIX>>>
	<PUT .FROM 12 .FOO>>

<DEFINE END-SMALL-OUT (FROM "AUX" FOO)
	<PROG ()
		<SET FOO <GET .FROM SMALL-OUT>>
		<OR .FOO <RETURN .FOO>>
		<PUT .FROM 12 <5 .FOO>>
		<FREE .FOO>
		.FROM>>

<COND (<NOT <GASSIGNED? RTIME!->> <FLOAD "MUDDLE;DATIME BINARY">)>

<DEFINE BBC (TIM)
	<SETG BBC-PERIOD .TIM>
	<SETG BBC-TIME <RTIME:SEC>>
	<ON "UNBLOCKED" <FUNCTION (P) <SETG BBC-TIME <RTIME:SEC>>> 1>
	<ON "BLOCKED" ,BBCER 1>
	T>

<DEFINE BBCER (P)
	<COND (<G? <- <RTIME:SEC> ,BBC-TIME>
		   ,BBC-PERIOD>
		<IMAGE 7> <SLEEP .5> <IMAGE 7>)>>

<DEFINE DISPENSATION ()
	<OFF "BLOCKED">
	<OFF "UNBLOCKED">
	T>

<ENDBLOCK>
