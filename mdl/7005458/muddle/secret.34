
"SECRETS_______ KNOWN_____ ONLY____ TO__ A_ FEW___"

						last updated: 9/15/77

(Compiled mostly by Dave Lebling, with the patient assistance of Chris Reeve)

I.	Making an FBIN from an NBIN.
II.	Recovering SAV and FIXUP files from the Library
III.	(obsolete)
IV.	Patching MUDDLE.
V.	Patching a Running MUDDLE.
VI.	Making a MUDDLE.
VII.	Making a MUDDLE Subsystem.
VIII.	Why a MUDDLE is garbage collecting.
IX.	How to tell what caused "ERROR-IN-COMPILED-CODE".
X.	Using MSB's cleanup stuff for creating a save file.
XI.	Using DDT to debug MUDDLE
XII.	Using the MUDDLE unassembler
XIII.	Saving TEMPLATE descriptions and RSUBRs
XIV.	Making a new EPARSE

----------I. Making an FBIN from an NBIN----------------------------

1) Get the group-purifier.

		<USE "PDUMP">

(or get TS GLUE and type ^S to get back to the normal MUDDLE listen
loop:  there is a PDUMP preloaded in GLUE.)

2) Get your group (or groups).

		<GROUP-LOAD "yourfile NBIN" groupname>

3) Create the pure files.

		<PDUMP groupname1 groupname2 ...>

Creates several files, only one of which is interesting to you:

		<sname>;<first-group-name> FBIN

PDUMP takes a TUPLE of groupnames.  It will create one FBIN file for
each group, and a single FIXnm and a single SAVnm file containing the
code for all of the groups named.

The FBINs are put in the sname directory, using temporary file names to
avoid clobbering the current FBIN if there is one (until the last moment
of course).  The FIXUP and SAV files are put on MUDTMP and eventually
migrate into the files "MUDSAV;SAV FILE" and "MUDSAV;FIXUP FILE".  See a
later section for how to get them out again.

     An alternative method of FBINing is to specify that as an option
in TS GLUE (see MUDMAN; GLUE INFO).


----------II. Recovering SAV and FIXUP files from the Library--------

	First figure out which ones you want.  The "real" name of the
fbin as recorded in the first form of the file is what you want:

	'<PCODE "3FROB">

for example.

	If your SAV and FIXUP files are relatively new they may be in
MUDTMP still.  Check.

	Otherwise, get a

	:MUDDLE;NEWLF

which has all the library manipulation stuff loaded.

	Say

	<GET-FILE "SAV;name SAVnm" output-file:string>
	<GET-FILE "FIXUP;name FIXnm" output-file:string>

Note that if you are planning to ship the FBIN to a TENEX, you should
name the FIXUP file "name FIXUP" rather than "FIXnm", as the new FBIN
scheme has not been exported yet.

Another useful thing NEWLF is

	<CLISTF "FIXUP">
	<CLISTF "SAV">

which are listfs of the obvious things.

----------III. (obsolete)---------------------------------------------

----------IV. Patching MUDDLE----------------------------------------

0) Get permission from someone who knows what they are doing.

1) Get a fresh copy of the MUDDLE you are patching.

		JJ				; (to DDT)

		L SYS1;TS MUDnm		; (to DDT)

2) Make your patches.  MUDDLE has a PATCH space defined, so the DDT
patch commands will work reasonably.  (If the previous sentence is at
all mysterious, this is a good time to stop and think twice before
proceding).

3) Dump out the world.

		Y MUDSYS;MUDDLE DUMP		; (to DDT)

Testing your patch is a good idea here.

4) Make a pure version of the dump.

		:CLR;XPLOAD			; (to DDT)

		PL MUDSYS;MUDDLE DUMP

Eventually returns to DDT.  Now create the new MUDDLE.

		:PDUMP SYS1;TS MUDnm		; (nm is version)

-------------V.  Patching a Running MUDDLE.--------------------------

This process is known as "desecration" (Thanks, NDR).  It allows a
user to make the pure part of his core image become the pure part
of a MUDDLE's core image.

0)  Think twice, ask someone who knows what they are doing.

1)  Get the Desecration program.

		<FLOAD "MUDSYS;CRATE">

2)  Desecrate the MUDDLE.

		<DESECRATE "name">

Where "name" is a string giving the file to desecrate  (defaults if not
given to "MUDDLE") to desecrate.  The pure part of the PDUMPed file 

		DSK:SYS;TS name

is changed to be the same as the corresponding pages of your core image.
Thus, changes to the pure pages of your MUDDLE will propagate to other
users and to the file.

3)  Make your patch.  Note that this method of patching does not change
the symbol table of the file.  Consequently, there is only a limited
range of patches that can be put in in this way.

---------------VI. Making a MUDDLE.-----------------------------------

How to create a new MUDDLE.  This section is probably somewhat out of
date and should be updated.

1)  If this MUDDLE is for ITS, print the file

		MUDSYS;MUD STINK

If any of the files specified have not been created since their corres-
ponding source files were last modified, reassemble them.

2)  If this MUDDLE is for TENEX, do the above step using the file

		MUDSYS;TNX STINK

3)  To reassemble any module, get a MIDAS (the special version kept on
the MUDSYS; directory).  Type:

		MUDSYS;_MUDSYS;<-module name>-	; (to MIDAS)

4)  Make sure you are running under DDT.  Get a STINK (the special
version on the MUDSYS; directory).  Type:

		MMUDSYS;MUD STINK@		; (to STINK)
	     or MMUDSYS;TNX STINK@

Eventually STINK will type out a symbol table.  Check for any undefined
globals (symbols printed out indented 1 space). Type:

		TD				; (to STINK)

and wait.

5)  You are now back in DDT.  Type a rubout and wait for DDT to respond
with "??".  DDT is now ready.  If this MUDDLE is for ITS, type:

		:XFILE MUDSYS;SYMBOL CLEANR	; (to DDT)

If this MUDDLE is for TENEX, type:

		:XFILE MUDSYS;TNX SYMBOL	; (to DDT)

6)  If this is going to be a real new version of MUDDLE, type:

		VCREATG			; (to DDT)

to create a new version number.

7)  If this MUDDLE is for ITS, type

		G				; (to DDT)

MUDDLE will type 

		MUDDLE INITIALIZATION.

and eventually it will cause DDT to type a *

8)  If this MUDDLE is for TENEX, dump out the current core image using
Y in DDT.  Kill the job.  Get a MUDDLE and type 

		<FLOAD "CLR;ITSNX NBIN">	; (to MUDDLE)

Invoke

		<ITSEX <-name of dump file>->	; (to MUDDLE)

ITSEX will return a closed CHANNEL when it is done.  Two new files now
exist, they both have the same name as the original dump file with the
second name of one SAV and the other SYMBOL. These will be referred to
as the SAV file and the SYMBOL file from now on.

Go to ISI (for example) via telnet.  Log in and get an FTP.  Type

		CON(tenex completes) DMS	; (to FTP)

Type

		GET(tenex completes) <-SAV file>-
		<-local file name>-		; (to FTP)

after TENEX says the transfer has completed.

Do the GET for the SYMBOL file.  Now get an IDDT. Type

		L<-sav file>-		; (to IDDT)
	    and ;O<-symbol file>-

Now type

		SETUPG				; (to IDDT)

MUDDLE will type

		MUDDLE INITIALIZATION

and eventually return to IDDT via a JRST 4,.

9)  Depending on whether new bugs are suspected or not, it may be wise
to dump the MUDDLE at this point.

10)  Type G and MUDDLE will respond

		MUDDLE <-version>- IN OPERATION

etc.  To get PPRINT, EDIT, etc. loaded, type

		<FLOAD "MUDSYS;NEWMUD">	; (to MUDDLE)

After :INPOPping, your new MUDDLE may be dumped and tested.

---------------VII. Making a MUDDLE Subsystem.------------------------

This process is used to create one-block startup files that load a
MUDDLE on top of them in such a way that the MUDDLE will execute an
initialization file.  The initialization file usually contains a herald
message and/or a RESTORE of some SAVE file.

1)  Create the startup file.  This is done using MIDAS, but not the
MUDSYS version (version number < 100), the normal version (version
number > 100).

		MIDAS^K

		SYS1;TS name_MUDSYS;SUBSYS MAKER	; (to MIDAS)

Where "name" is the name of the subsystem.  (Note that you may rename
the output file to anything you want later, and don't, in fact, have
to put it on SYS1;).

The MIDAS will eventually type:

		MUDDLE BOOTSTRAP

Tell the name of the subsystem.  MIDAS types:

		TYPE IN SUBSYSTEM NAME:

You type the name (up to six characters) followed by a carriage return.

There are two different types of subsystems that can be created using
this file.  The first floads a file from the MUDSUB directory when the
MUDDLE is started.  The second directly restores a SAVE file and falls
into it.  Which type you are making depends on the answer to the second
question asked.

	TYPE Y IF YOU WISH TO HAVE SAVE FILE DIRECTLY RESTORED:

A. Direct Restore.

If you are directly restoring a SAVE file, its name and location must be
given.  Its first name is the name of the subsystem.

	TYPE 2ND NAME OF SAVED FILE: 

Here you specify the 2nd name of the save file to be restored (first
name is the subsystem name).

	TYPE SNAME OF SAVE FILE:

Specify the directory to get the save file from.  The direct restore
method is somewhat faster than the INIT method, and has the advantage
that it automatically determines (from the information in the SAVE) what
version of MUDDLE is needed.

B. INIT File.

If you are FLOADing an INIT, the name of the subsystem will be used as a
first file name to be passed to the MUDDLE once it is bootstrapped in. 
It will "FLOAD" the file

		DSK:uname;name INIT

or, if that does not exist,

		DSK:MUDSUB;name INIT

as soon as it comes up.

Tell which version of MUDDLE the subsystem works with.  MIDAS will
type:

		TYPE IN MUDDLE, MUDnm OR NMUDDL: 

The usual response is MUDnm followed by a carriage return.  It will
then ask for the directory in which the MUDDLE version lives:

		TYPE IN SYS OR SYS1:

The usual response is SYS for MUDDLE or NMUDDL, SYS1 for MUDnm.

2)  The resulting one-block startup can be linked to, renamed and so
on, removing the limitations of JNAME based bootstraps.

----------VIII. Why Muddle is garbage collecting.------------------

	First load symbols.  Then put DDT breakpoint at AGC.  Then when
break occurs, contents of P points to a PC.  If that contains REAGC,
then problem was due to PDL overflow.  If it contained GC or BLOAT, etc,
the GC was due to an explicit GC or BLOAT.  If it contained CIVECT,
ICONS, etc., it needed more random storage space (free storage).  If
it contains GROW3, then it is either requesting more space for top
level LVALS and GVALs.  To determine which, look at contents of TB and
say $Q+OTBSAV/     and $Q+FSAV/    and result should indicate answer.

----------IX. How to determine cause of "ERROR-IN-COMPILED-CODE"--------

	First load symbols.  Then put a DDT breakpoint at COMPERR.
Then when break occurs, look in .JPC/ to find the return address.
Then look at the code just before the return address and guess what
it was trying to do.  Good luck.

----------X. How to use MSB's CLEAN package to cleanup a save file--------

	(By ERB)

     MSB's CLEAN package can be used to cause a MDL to share much
storage otherwise wasted (e.g. DECLs) plus doing many other nice things.
For example #DECL ((X) <UVECTOR <LIST FIX>> (Y) <LIST FIX>) could share
the <LIST FIX> parts.

     CLEAN is particularly useful before doing a SAVE.  This is a brief
description of the simplest possible thing to do--hopefully MSB will add
more to this someday.

	<USE "CLEAN">

	<CLEANUP <> T T T <> T>
	<PRINT-CLEANUP>
	<CLEAR-CLEANUP>
	<FLUSH-CLEANUP>
	<GC 0 T>

	...and then save or proceed or whatever...

     CLEAN is much more powerful than this.

----------XI. How to use DDT to debug MUDDLE and win sometimes.------

	(by ERB)

   First load symbols via $.  (See also section VIII.)  Then...

	1. To get frame:

		TB/	.+FSAV/
		LF 	.+FSAV/
		(TB/ tab .+FSAV/		;TO GET FIRST FRAME
		linefeed tab .+FSAV)		;TO GET SUBSEQUENT FRAMES
		and repeat last line for each next frame

	2. to get type:

		$TLOSE+type#_
		(dollarTLOSE plus type number underbar)
		e.g. $TLOSE+1_  ==>  TFIX

	3. to print MUDDLE object in DDT

		DP .$X   where . is a word pair address of a muddle pointer
		(DP space . alt-mode X)
		e.g. DP 23757$X   #ASOC (ITEM INDICATOR VALUE)

----------XII. Using the muddle unassembler -----------------------

	The unassembler is used to produce pseudo-source code such as
that generated by the compiler.

	:MUDDLE;UNASSM

	<GROUP-LOAD ....>
	<SET CH <OPEN "PRINT" "OUTPUT-FILE-NAME">>
	<CONVERT-RSUBR ,rsubr's-name .CH>
	<CLOSE .CH>


----------XIII.  Saving TEMPLATE descriptions and RSUBRs--------------

	The most recent version of the TEMPLATE rpackage allows template
data to be dumped to files, with the rsubrs used to create templates.
There are two procedures available for saving this data, depending on the
nature of the file containing the template definitions.

	A package has been written to mung files which define templates
to contain the template descriptions and rsubrs rather than the calls
to TEMPLATE.  It is only useful, of course, when the templates are defined
in a file which will not be edited in TECO as a normal procedure:  the
rsubrs are dumped in non-ascii format.  To win, <USE "TEMHAK">, and use
one of the two entries:

	TEMPLATE-DUMP takes a group and modifies it such that the use of
"TEMPLATE" becomes a use of "TEMHLP", and all t_o_p_-l_e_v_e_l_ invocations
of TEMPLATE are replaced by calls to BUILD-TEMPLATE (for the template
descriptions), SETG's of the template rsubrs, and the glue bits for the
rsubrs.  FILE-TEMPLATE takes a file name and performs the same service,
group-dumping to "zork NBIN", if no second argument is given, or to the
file specified by its second argument.  This is chiefly useful for files
which contain nothing but type definitions.

	If the templates are defined in a file which will be edited
frequently, the following procedure should be followed:

	Create the templates, by floading a file which invokes TEMPLATE,
or from top level.  Then incant

		<DUMP-TEMPLATES <-file name>->

This will place the template descriptions (n_o_t_ the rsubrs) in the
specified file.  It does so for all templates in the muddle.

		<DUMP-RSUBRS <-file name>- <-template names (atoms)>->

will perform the same service for the template rsubrs.

	There will now be two files floating around, one containing the
template descriptions and the other the rsubrs.  These may now be used
to create the templates in a MUDDLE, without loading TEMPLATE FBIN.  To
do so:

	  	<USE "TEMHLP">

Rumor has it that this will eventually be preloaded:  This defines
the rsubrs needed to take the template descriptions and make them
useful to MUDDLE;

  		<FLOAD "description file">

(or GROUP-LOAD or whatever) the file of descriptions (the first file
created):  this m_u_s_t_ be loaded before the rsubrs file.  Then load the
rsubrs file.

		<FLOAD "rsubrs file">

	For maximum convenience, it may be necessary to put a relatively
obscene form in files that create templates:  if the template files
exist, fload them; otherwise, use template and create the templates from
scratch.  It is of course possible to manually merge the two template
files (preferably by using group-load and group-dump), so long as the
template descriptions precede the template rsubrs.

	Since template rsubrs are now created with glue bits, it is
possible to glue them into groups and to purify them.  It may therefore
be convenient to have the file which loads them do a group-load, that
they may be more conveniently glued when occasion arises.
