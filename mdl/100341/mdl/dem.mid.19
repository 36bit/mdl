.SYMTAB 6000.,3000.
TITLE DEM FOR TENEX

IF1,[	.DECSAV
]

ITS==0

LOC 300

UUOH:
LOC 41
	JSR	UUOH
LOC UUOH
	0
	JRST	PURUUO

LOC 1000



; DEFINITIONS FOR DEM

P=17				; STACK POINTER
A=1
B=2
C=3
D=4
E=5
F=6
A1=11				; ARGUMENTS ARE PASSED IN THE Ax REGISTERS
A2=12
A3=13
A4=14
A5=15
A6=16

.XCREF A,B,C,D,E,F,P

DMPDAT==3			; DATE TO DO DUMPING (TENTATIVELY WED)
ROUND==777
PAGE==1000
FROUND==377
MINLEN==-1			; FACTOR TO SHIFT OUT FIXUP PAGES
FIXLNT==2
PGSZ==9.			; PAGE SIZE
DIRS==0				; OFFSET IN MAIN DIRECTORY BUFFER TO # OF DIRS
BUFLNT==400			; LENGTH OF BUFFERS

FME==400000
FLS==-1
RDTP==100000
WRTP==140000
CWTP==100400

IMAPCH==0			; INPUT MAPPING CHANNEL (READ ONLY)
OMAPCH==1			; OTHER MAPPING CHANNEL
SCHAN==2			; SCRIPT CHANNEL
RCHAN==3			; READ CHANNEL FOR COMMAND FILES
WCHAN==4			; WRITE CHANNEL TO CREATE COMMAND FILE
TCHAN==5			; TEMPORARY CHANNEL TO SEE IF FILES EXIST, ETC..
STCHAN==6
CPYCHN==7			; CHANNEL USED TO COPY FILE
LKCHN==10
PDLNT==1000			; LENGTH OF PDL

CARRET==15			; CARRIAGE RETURN




; THIS GROUP OF MACROS TO DO DOTCAL AND FATAL WERE TAKEN FROM MUDDLE >

; MACRO TO HANDLE FATAL ERRORS

DEFINE FATAL MSG/
	FATINS	[ASCIZ /: FATAL ERROR MSG 
/]
	TERMIN

EQUALS E.END END
EXPUNGE END

DEFINE END ARG
	EQUALS END E.END
	EXPUNGE E.END
	CONSTANTS
	.LNKOT
	TOPB==.+1777
	END ARG
	TERMIN


%CKDMP:	POPJ	P,
%INTST:	RESET
	POPJ	P,
%FINIS:	MOVEI	A,FME			; CLOSE ALL FILES
	MOVNI	A,1
	MOVE	B,[FME,,SBUF]
	MOVE	C,[400000,,XBUF-SBUF]
	PMAP	
	MOVEI	A,400000
	CLZFF
	HALTF
	POPJ	P,

%SDMPB:	POPJ	P,


%CKLK:	OPEN	LKCHN,[HOLD?[SIXBIT /MDL/]?[SIXBIT /LOCK/]?[SIXBIT /MUDSAV/]]
        SKIPA
        POPJ	P,
	FATAL	FILE LOCKED
	JRST	.-1

	
%DATE:	PUSH	P,A			; SAVE ACS
	PUSH	P,B
	PUSH	P,C
	PUSH	P,D
	PUSH	P,E
	MOVNI	B,1
	MOVEI	D,0
	ODCNV
	MOVE	A,[440600,,A1]
	HLRZ	D,B			; CONVERT YEAR TO 6BIT
	IDIVI	D,100.			; GET <MOD .YEAR 100>
	MOVE	D,E
	IDIVI	D,10.
	ADDI	D,20
	IDPB	D,A
	ADDI	E,20
	IDPB	E,A
	HRRI	D,1(B)			; MUNG IN MONTH
	IDIVI	D,10.
	ADDI	D,20
	IDPB	D,A
	ADDI	E,20
	IDPB	E,A
	HLRZ	D,C			; GET DAY
	ADDI	D,1			; IT'S 0-BASED
	IDIVI	D,10.
	ADDI	D,20
	ADDI	E,20
	IDPB	D,A
	IDPB	E,A
	POP	P,E
	POP	P,D
	POP	P,C
	POP	P,B
	POP	P,A
	POPJ	P,

%TIME:	PUSH	P,A
	PUSH	P,B
	PUSH	P,C
	PUSH	P,D
	PUSH	P,E
	MOVNI	B,1
	MOVEI	D,0
	ODCNV
	MOVE	E,[440600,,A1]
	HRRZ	A,D			; GET TIME SINCE MIDNIGHT
	IDIVI	A,3600.			; GET HOURS INTO A, REM INTO B
	MOVEI	C,(A)			; LOAD FOR DIVISION
	IDIVI	C,10.
	ADDI	C,20
	ADDI	D,20
	IDPB	C,E
	IDPB	D,E
	MOVEI	A,(B)			; GET MINUTES+SECONDS
	IDIVI	A,60.			; #MINUTES IN A #SECS IN B
	MOVE	C,A
	IDIVI	C,10.			; OUT GO MINUTES
	ADDI	C,20
	ADDI	D,20
	IDPB	C,E
	IDPB	D,E
	MOVE	C,B			; GET SECONDS
	IDIVI	C,10.
	ADDI	C,20
	ADDI	D,20
	IDPB	C,E
	IDPB	D,E
	POP	P,E
	POP	P,D
	POP	P,C
	POP	P,B
	POP	P,A
	POPJ	P,


; INIT IS A ROUTINE TO INITIALIZE A DEM.
; IT PURIFIES THE DEM-CORE IMAGE FROM PAGE 1-TOPBLK

INIT:	PUSHJ	P,%CKLK
	POPJ	P,
	MOVEI	A1,TOPCOD			; ADDR OF TOP OF CODE
	ADDI	A1,1777				; COMPUTE LAST PAGE
	ASH	A1,-9.				; TO PAGES
	MOVEI	A2,1				; FIRST PAGE TO PURIFY
PURLP:	MOVSI	A,FME				; SET UP FORK HANDLE
	HRRI	A,(A2)				; GET FILE HANDLE
	RMAP					
	MOVSI	B,FME				; GET FORK HANDLE
	HRRI	B,(A2)
	MOVE	C,[120000,,0]			; READ+EXEC BITS
	PMAP					; MAKE PAGE READ-ONLY
	ADDI	A2,1				; AOS PAGE COUNT
	CAIGE	A2,(A1)				; DONE
	JRST	PURLP				; LOOP BACK
	POPJ	P,


; CODE TO FLUSH PAGES FROM SAV.FILE.  %FIXDE JUST POPJS, SINCE
; WE WON'T FLUSH PAGES FROM THAT; ON ITS, BOTH %FIXDE AND %SAVDE
; POPJ, SINCE IT DOESN'T SUPPORT HOLEY FILES.  ARGUMENTS:
; A1=FIRST PAGE, A2=# PAGES.  USES IMAPCH.

DELFIX:	0			; ANYBODY WHO DELETES HAS TO SET THIS UP

%FIXDE:	POPJ	P,

%SAVDE:	PUSH	P,A
	PUSH	P,B
	PUSH	P,C
	PUSH	P,A1
	PUSH	P,A2
	MOVNI	A,1
	MOVEI	C,1
	HRL	B,CHNTAB+IMAPCH		; SET UP TO DELETE PAGES
	HRR	B,A1
	JUMPE	A2,%SAVDO
%SAVDL:	PMAP
	SOJLE	A2,%SAVDO
	AOJA	B,%SAVDL
%SAVDO:	POP	P,A2
	POP	P,A1
	POP	P,C
	POP	P,B
	POP	P,A
	POPJ	P,


; ROUTINES USED TO SIMULATE SYSTEM CALLS FOR THE DEM PROGRAM.
; DEFINITIONS
; ACS 0,A,B,C MAY BE IN USE

%OUTCN==77770,,1			; <DIR>NM1.NM2;VER
%AC==270400
%UUO==330900
%36BIT==444400
%7BIT==440700
%6BIT==440600
%GTJFO==100100
%GTJFN==400100

AA=7
BB=10

READ==440000,,302000			; READ ACCESS (ALLOWS READ AND WRITE)
WRITE==440000,,100000			; WRITE ACCESS
READC==070000,,200000			; READ ASCII ACCESS
WRITEO==440000,,302000			; WRITEOVER MODE
DREAD==440000,,202000			; READ ONLY MODE
HOLD==440000,,300000			; NON THAWED READ ACCESS


READP==100000,,0			; GIVE PAGE READ ONLY ACESS
WRITP==140000,,0			; GIVE PAGE BOTH READ/WRITE ACCESS
CWRITP==100400,,0			; GIVE PAGE COPY/WRITE ACCESS

CREATE==1			; CODE TO CREATE CORE
FLUSH==2			; CODE TO FLUSH CORE

;SETUP UUO DISPATCH TABLE HERE

UUOTBL:	ILLUUO

IRP UUOS,,[[OPEN,DOPEN],[CLOSE,DCLOSE],[FILLEN,DFILLE],[RENNAM,DRENAM]
[DELETE,DDELET],[ACCESS,DACCES],[OUTPUT,DOUTPU],[INPUT,DINPUT],[ICHAR,DICHAR]
[OPEND,DOPEND],[GETF,DGETF],[STARTB,DSTRTB],[MAPIN,DMAPIN],[FATINS,DFATAL]
[PGDUMP,DPGDMP],[RFNAM,DRFNAM],[CORE,DCORE]]


UUFOO==.IRPCNT+1
IRP UUO,DISP,[UUOS]
UUO=UUFOO_33
DISP
.ISTOP
TERMIN
TERMIN

REPEAT 100-UUFOO,[ILLUUO
]


PURUUO:	PUSH	P,40
	PUSH	P,UUOH
	PUSH	P,0
	PUSH	P,A
	PUSH	P,B
	PUSH	P,C			
	LDB	AA,[%UUO,,40]			; GET UUO
	JRST	@UUOTBL(AA)			; DISPATCH OVER UUO
EUUOH:	POP	P,C
	POP	P,B
	POP	P,A
	POP	P,0
	SUB	P,[2,,2]
	JRST	@UUOH				; EXIT

NWEUUO:	SUB	P,[6,,6]		; CLEAN OFF STACK
	JRST	@UUOH

ILLUUO:	FATAL ILLEGAL UUO


; DOPEN IS A CHANNEL OPENER FOR TENEX TAKES THE FOLLOWING
; AC==> CHANNEL NUMBER  ADDR==>[MODE SNAME FN1 FN2]
; IT OPENS THE CHANNEL AND PUTS THE JFN IN A CHANNEL VECTOR

DOPEN:	HRRZ	AA,40			; GET ADDR
	MOVE	BB,@1(AA)		; GET SNAME
	MOVEM	BB,FILBLK+SNM		; SEND INTO FILE BLOCK
	MOVE	BB,@2(AA)		; FN1
	MOVEM	BB,FILBLK+NM1
	MOVE	BB,@3(AA)		; FN2
	MOVEM	BB,FILBLK+NM2
	PUSHJ	P,CKOPEN
	JRST	AEUUOH
	MOVEI	AA,FILBLK		; USE FILBLK TO GENERATE STRING
	MOVEI	BB,OUTBUF		; OUTPUT BLOCK
	PUSHJ	P,BLDFNM
	MOVE	B,[%7BIT,,OUTBUF]	; STRING
	HRRZ	BB,40			; GET BITS
	MOVE	BB,(BB)
	CAME	BB,[WRITE]
	JRST	NOWRIT
	HRLZI	A,%GTJFN
	SKIPA
NOWRIT:	HRLZI	A,%GTJFO		; GETJFN BITS
	GTJFN
	JRST	EUUOH
ADOPEN:	LDB	B,[%AC,,40]		; GET CHANNEL NUMBER
	MOVEM	A,CHNTAB(B)		; SMASH JFN INTO CHANNEL TABLE
	HRRZS	A
	HRRZ	B,40			; GET BITS
	MOVE	B,(B)
	TRO	B,OF%PLN
	OPENF
	JRST	ADOP1
	PUSHJ	P,STBLK
AEUUOH:	AOS	UUOH			; SKIP RETURN SUCCESSFUL
	JRST	EUUOH			; WIN

ADOP1:	HRRZ	B,40			; USED TO CHECK FOR LOCKING CASE
	MOVE	B,(B)
	CAMN	B,[HOLD]
	JRST	EUUOH
	FATAL	CANT OPEN CHANNEL


STBLK:	PUSH	P,A			; SAVE A
	IMULI	A,JFNLEN
	CAIL	A,JFNSLT		; SEE IF IN RANGE
	FATAL	BAD JFN
	ADDI	A,SAVJFN
	MOVE	0,SNM+FILBLK		; GET SNAME
	MOVEM	0,SNM(A)
	MOVE	0,NM1+FILBLK		; NM1
	MOVEM	0,NM1(A)
	MOVE	0,NM2+FILBLK		; NM2
	MOVEM	0,NM2(A)
	POP	P,A
	POPJ	P,

CKOPEN:	PUSH	P,A
	PUSH	P,B
	MOVEI	B,65
	MOVEI	A,SAVJFN
CKOP1:	MOVE	BB,SNM+FILBLK		;SNM
	CAME	BB,SNM(A)
	JRST	NOCK
	MOVE	BB,NM1+FILBLK		; NM1
	CAME	BB,NM1(A)
	JRST	NOCK
	MOVE	BB,NM2+FILBLK		; NM2
	CAME	BB,NM1(A)
	JRST	NOCK
ECKOP:	POP	P,B
	POP	P,A
	POPJ	P,
NOCK:	ADDI	A,JFNLEN		; AOS SLOT
	SOJG	B,CKOP1
	AOS	-2(P)
	JRST	ECKOP	

; HERE TO CLOSE A CHANNEL


DCLOSE:	LDB	AA,[%AC,,40]		; GET CHANNEL #
	HRRZ	A,CHNTAB(AA)		; GET JFN
	CLOSF
	JRST	EUUOH
KJFN:	PUSH	P,A
	MOVNI	A,1			; KILL ALL JFNS
	RLJFN				; RELEASE ALL JFNS
	JFCL
	POP	P,A
	PUSHJ	P,FLSJFN		; FLUSH THAT JFN	
	JRST	EUUOH


FLSJFN:	PUSH	P,A			; SAVE A
	IMULI	A,JFNLEN		; COMPUTE TABLE ENTRY
	CAIL	A,JFNSLT		; SEE IF IN RANGE
	FATAL	BAD JFN
	ADDI	A,SAVJFN
	SETZM	SNM(A)			; ZERO SLOTS
	SETZM	NM1(A)
	SETZM	NM2(A)
	POP	P,A
	POPJ	P,

; FILE-LENGTH

DFILLE:	LDB	AA,[%AC,,40]
	HRRZ	A,CHNTAB(AA)		; GET JFN
	SIZEF
	FATAL	SIZEF FAILED
	MOVE	AA,B			; GET LENGTH
	HRRZ	BB,40			; GET ADDRESS
	MOVEM	AA,(BB)			; WRITE RESULT
	JRST	EUUOH


; RENNAM RENAMES ONE FILE TO ANOTHER
; RENNAM [SNM FN1 FN2 NFN1 NFN2]

DRENAM:	HRRZ	AA,40			; GET ADDRESS OF ARGS
	MOVE	BB,@(AA)			; GET SNM OF FIRST
	MOVEM	BB,FILBLK+SNM
	MOVE	BB,@1(AA)		; FN1
	MOVEM	BB,FILBLK+NM1
	MOVE	BB,@2(AA)		; FN2
	MOVEM	BB,FILBLK+NM2
	MOVE	BB,@3(AA)		; SAVE OTHER ARGS
	MOVEM	BB,ARGSV1
	MOVE	BB,@4(AA)
	MOVEM	BB,ARGSV2
	MOVEI	AA,FILBLK		; FILE DESCRIPTOR BLOCK
	MOVEI	BB,OUTBUF		; STRING POINTER
	PUSHJ	P,BLDFNM		; GET FILE NAME
	HRLZI	A,%GTJFO		; GTJFN BITS
	MOVE	B,[%7BIT,,OUTBUF]	; STRING
	GTJFN
	JRST	EUUOH			; DONE PREMATURELY
	HRRZS	A			; CUT OFF BITS
	PUSH	P,A			; SAVE JFN
	MOVE	0,ARGSV1
	MOVEM	0,FILBLK+NM1
	MOVE	0,ARGSV2
	MOVEM	0,FILBLK+NM2
	MOVEI	AA,FILBLK		; GET FILE-BLOCK
	MOVEI	BB,OUTBUF		; STRING
	PUSHJ	P,BLDFNM
	HRLZI	A,%GTJFN
	MOVE	B,[%7BIT,,OUTBUF]	; STRING POINTER	
	POP	P,C			; RESTORE OLD JFN
	GTJFN
	JRST	KJFN			; KILL JFNS AND LEAVE UNSUCCESSFULLY
	HRRZ	B,A			; ARGS TO RENAMF
	HRRZ	A,C
	RNAMF
	JRST	KJFN			; KILL JFNS AND LEAVE UNSUCCESSFULLY
AKJFN:	AOS	UUOH			; LEAVE SUCCESSFULLY
	JRST	KJFN

; DELETE [SNM FN1 FN2]

DDELET:	HRRZ	AA,40			; BUILD JFN
	MOVE	BB,@(AA)			; SNAME
	MOVEM	BB,FILBLK+SNM
	MOVE	BB,@1(AA)		; FN1
	MOVEM	BB,FILBLK+NM1
	MOVE	BB,@2(AA)		; FN2
	MOVEM	BB,FILBLK+NM2
	MOVEI	AA,FILBLK
	MOVEI	BB,OUTBUF		; BUILD STRING
	PUSHJ	P,BLDFNM
	HRLZI	A,%GTJFO		; GETJFN BITS
	MOVE	B,[%7BIT,,OUTBUF]
	GTJFN
	JRST	EUUOH			; EXIT UNSUCCESSFULLY
	HRRZS	A			; DELETE FILE
	DELF
	JRST	KJFN
	JRST	AKJFN			; KILL JFNS AND LEAVE SUCCESSFULLY

; ACCESS CH,ADDR

DACCES:	MOVE	B,@40			; GET ACCESS POINTER
	LDB	A,[%AC,,40]		; GET CHNUM
	HRRZ	A,CHNTAB(A)		; CONVERT TO JFN
	SFPTR
	FATAL	ACCESS FAILED
	JRST	EUUOH			; SUCCESSFUL


; OUTPUT [CH LOC] ACTS LIKE AN ITS BLOCK IOT

DOUTPU:	HRRZ	BB,40			; GET ADDRESS
	HRRZ	AA,@1(BB)		; STRING POINTER
	HRLI	AA,%36BIT		; A 36BIT STRING POINTER
	HLRE	C,@1(BB)		; LENGTH
	MOVE	B,AA
	HRRZ	A,@(BB)
	HRRZ	A,CHNTAB(A)		; CONVERT TO JFN
	SOUT				; OUT IT GOES
	JRST	EUUOH

; INPUT [CH LOC] SKIPS IF NOT EOF

DINPUT:	HRRZ	BB,40
	HRRZ	AA,@1(BB)			; BUILD STRING POINTER
	HRLI	AA,%36BIT
	HLRE	C,@1(BB)			; LENGTH
	HRRZ	A,@(BB)
	HRRZ	A,CHNTAB(A)			; CONVERT TO JFN
	MOVE	B,AA
	SIN
	JUMPGE	C,AEUUOH			; EXIT
	JRST	EUUOH				; EXIT ON EOF

; ICHAR [CH LOC]

DICHAR:	HRRZ	AA,40		; BUILD STRING POINTER
	HRRZ	B,1(AA)
	HRLI	B,070700		; LAST BIT IN WORD
	MOVNI	C,1		; LENGTH
	HRRZ	A,@(AA)
	HRRZ	A,CHNTAB(A)
	SIN
	JUMPGE	C,AEUUOH		; EXIT
	JRST	EUUOH

; NOTE INPUT AND OUTPUT CANNOT BE FROM ACS 0,A,B,C


; OPEND	CH,[SNAME]

DOPEND:	HRRZ	AA,40		; GET SNAME
	MOVE	AA,@(AA)
	MOVEM	AA,ARGSV1
	MOVEI	AA,OUTBUF		; CREATE JFN
	PUSHJ	P,STRTBF
	MOVEI	AA,[ASCIZ /DSK:</]	; DEV
	PUSHJ	P,OUTSTR
	MOVE	AA,ARGSV1
	PUSHJ	P,OUTSIX
	MOVEI	AA,[ASCIZ />*.*.*/]
	PUSHJ	P,OUTSTR		; GET ALL FILES
	PUSHJ	P,FINBUF		; CLOSE BUFFER
	HRLZI	A,%GTJFO		; GTJFN BITS
	MOVE	B,[%7BIT,,OUTBUF]
	GTJFN
	FATAL	GTJFN FAILED
	LDB	AA,[%AC,,40]		; GET CHANNEL NUMBER
	MOVEM	A,CHNTAB(AA)		; SAVE JFN IN CHNTAB
	HRRZS	A
	MOVE	B,[DREAD]		; GET BITS FOR OPEN
	OPENF				; OPEN FILE
	JFCL				; COULDNT CARE LESS IF THIS LOST
	SETOM	DIRFLG			; INDICATE DIRECTORY IS JUST OPENED
	JRST	EUUOH			; EXIT

; GETF CH,LOC

DGETF:	LDB	AA,[%AC,,40]		; GET CHANNEL
	MOVE	AA,CHNTAB(AA)		; GET JFN
	MOVE	A,AA			; CLOSE FILE
	TLO	A,400000		; HOLD ONTO JFN
	CLOSF
	JFCL
	SKIPL	DIRFLG			; SEE IF JUST OPENED
	JRST	GENNEW			; GO GENERATE A NEW JFN
	SETZM	DIRFLG			; KILL DIRFLG
GENIT:	HRRZ	BB,40			; GET LOC INTO BB
	HRRZ	A,AA			; GET JFN
	MOVE	B,[DREAD]
	OPENF				; OPEN FILE TO HOLD ONTO JFN
	JRST	GENNEW			; TRY AGAIN
	PUSHJ	P,RFILEN		; READ FILE NAMES INTO LOC (BB) AND (BB)+1
	JRST	AEUUOH
GENNEW:	MOVE	A,AA			; GET JFN INTO A
	GNJFN
	JRST	EUUOH
	LDB	AA,[%AC,,40]
	HRRM	A,CHNTAB(AA)		; BITS
	MOVE	AA,CHNTAB(AA)		; GET THE WHOLE THING
	JRST	GENIT

; ROUTINE TO GET THE FILE NAMES FROM A JFN
; AA IS JFN BB IS LOC TO WRITE NAMES INTO

RFILEN:	MOVE	A,[%7BIT,,OUTBUF]	; BUILD DESTINATION DESIGNATER
	HRRZ	B,AA			; GET JFN
	MOVE	C,[%OUTCN]		; OUTPUT CONTROL
	JFNS
	PUSH	P,BB			; SAVE DESTINATION
	MOVE	AA,[%7BIT,,OUTBUF]	; BUILD A STRING POINTER
	MOVEI	BB,FILBLK		; FILE BLOCK
	PUSHJ	P,PFNAM			; PARSE THE FILE NAME
	POP	P,AA
	MOVE	BB,FILBLK+NM1		; GET FN1
	MOVEM	BB,(AA)			; WRITE OUT FIRST WORD
	MOVE	BB,FILBLK+NM2		; GET FN2
	MOVEM	BB,1(AA)
	POPJ	P,			; EXIT


; RFNAM CH,LOC

DRFNAM:	LDB	AA,[%AC,,40]		; READ CHNUM
	HRRZ	AA,CHNTAB(AA)		; GET JFN
	HRRZ	BB,40
	PUSHJ	P,RFILEN		; READ FILE NAMES
	JRST	EUUOH


; STARTB CH,[FPAGE CPAGE]

DSTRTB:	HRRZ	AA,40			; GET POINTER TO BLOCK
	LDB	BB,[%AC,,40]
	HRLZ	BB,CHNTAB(BB)
	HRR	BB,@(AA)			; GET FILE PAGE
	MOVSI	B,FME			; SHARE WITH ME
	HRR	B,1(AA)			; GET SECOND ARG (NOT INDIRECTED)
	MOVE	C,[WRITP]			; MAKE THE PAGE WRITEABLE
	MOVE	A,BB
	PMAP				; MAP IN PAGE
	MOVE	B,1(AA)			; RECOVER PAGE POINTER
	ASH	B,9.			; TO PAGES
	HRRI	A,-1000(B)		; BUILD BLT PTR
	HRLI	A,(B)
	BLT	A,-1(B)			; BLT OVER BUFFER
	JRST	EUUOH

; MAPIN CH,[MODE FPAGE CPAGE]

DMAPIN:	HRRZ	AA,40			; GET POINTER TO BLOCK
	LDB	BB,[%AC,,40]		; GET CHANNEL
	HRLZ	BB,CHNTAB(BB)		; GET JFN
	HRR	BB,@1(AA)		; GET FILE PAGE
	MOVE	A,BB
	HRRZ	BB,40
	MOVE	C,(BB)			; MODE
	CAMN	C,[WRITP]		; IF WANT WRITE
	 JRST	DMAPI2			; MAKE SURE PAGE EXISTS
DMAPI1:	MOVSI	B,FME			; FORK HANDLE
	HRR	B,2(BB)			; FORK PAGE
	PMAP
	JRST	EUUOH
DMAPI2:	RPACS
	TLNE	B,(PA%PEX)
	 JRST	DMAPI1			; PAGE THERE, GO MAP IT
	SETZM	NEWBUF
	MOVEI	B,NEWBUF
	LSH	B,-PGSZ
	HRLI	B,FME
	EXCH	A,B		; A HAS JFN & FILE PAGE, B HAS FORK & CORE
	PMAP
	EXCH	A,B
	JRST	DMAPI1		; PAGE EXISTS, GO MAP IT IN.

;PGDUMP [PAGE]

DPGDMP:	HRRZ	BB,40
	MOVE	A,@(BB)
	HRLI	A,FME
	RMAP
	MOVEI	B,1
	UFPGS
	FATAL	UFPGS FAILED
	JRST	EUUOH

; CORE [MODE PAGE]
; EITHER CREATES OR DELETES A PAGE FROM THE MAP

DCORE:	HRRZ	BB,40			; GET POINTER
	MOVE	AA,(BB)			; GET MODE
	CAIN	AA,FLUSH		; FLUSH A PAGE?
	JRST	FLSPAG
	CAIE	AA,CREATE
	FATAL	BADE MODE TO CORE
	JRST	EUUOH			; CREATION IS AUTOMATIC
FLSPAG:	MOVNI	A,1			; FLUSH A PAGE
	MOVSI	B,FME			; IN MY MAP
	HRR	B,@1(BB)		; GET PAGE
	SETZ	3,
	PMAP
	JRST	EUUOH


; DFATAL PRINTS OUT ERROR MESSAGE AND HALTS

DFATAL:	HRRZ	A,40			; BUILD MESSAGE
	HRLI	A,%7BIT
	ESOUT				; OUT IT GOES
	MOVEI	A,.PRIOU		; GET ERROR MESSAGE FROM SYSTEM
	MOVE	B,[FME,,-1]		; MOST RECENT ERROR IN THIS  FORK
	MOVEI	C,0			; NO OUTPUT LIMIT SPECS
	ERSTR
	HALTF
	HALTF
	HALTF

; ADD A CHARACTER TO THE BUFFER
; TAKES ARGUMENT IN AA


ADDCHR:	IDPB	AA,OUTBYT
	POPJ	P,

; FINBUF FINISHES OFF BUFFER POINTER

FINBUF:	MOVEI	AA,0
	PUSHJ	P,ADDCHR
	POPJ	P,

; STRTBF STARTS OFF AN OUTPUT BUFFER TAKES A STARTING LOCATION IN AA

STRTBF:	HRLI	AA,440700		; MAKE A BYTE POINTER
	MOVEM	AA,OUTBYT
	POPJ	P,

; OUTSIX SENDS OUT A SIXBIT BYTE POINTER INTO THE OUTPUT BUFFER
; IT TAKES ITS ARGUMENT IN AA AND FINISHES WHEN EITHER RUNNING OUT OF CHARS OR
; HITTING A 0

OUTSIX:	MOVE	BB,AA			; GET ARGUMENT INTO BB
	MOVE	B,[6]			; PUSH COUNT
	MOVE	A,[%6BIT,,BB]		; BUILD BYTE POINTER
OUTSX1:	ILDB	AA,A			; LOAD BYTE
	JUMPE	AA,CPOPJ		; DONE
	ADDI	AA,40			; CONVERT TO STRING
	PUSHJ	P,ADDCHR		; SEND IT OUT
	SOJG	B,OUTSX1		; GO BACK TO SEND OUT MORE CHARS
	POPJ	P,			; EXIT

; OUTPUT A ASCIZ STRING TO THE CURRENT BUFFER
; ARG IN AA

OUTSTR:	HRLI	AA,%7BIT
	PUSH	P,AA
OUTST1:	ILDB	AA,(P)			; GET ARGUMENT
	JUMPE	AA,POPOF		; IF 0 DONE
	PUSHJ	P,ADDCHR		; ADD TO BUFFER
	JRST	OUTST1	
POPOF:	SUB	P,[1,,1]		; CLEAN OFF STACK
	POPJ	P,


; BUILD FNAME BUILDS A FILE STRING.  IT TAKES AS AN ARGUMENT A POINTER TO A BLOCK
; CONSISTING OF SNAME FN1 AND FN2
; ARGUMENT IS IN AA AND STRING IS BUILT USING POINTER IN BB

BLDFNM:	PUSH	P,AA			; SAVE NAME FIELD POINTER
	MOVEI	AA,(BB)			; LOAD ADDRESS OF START OB BUFFER
	PUSHJ	P,STRTBF
	MOVEI	AA,[ASCIZ /DSK:/]
	PUSHJ	P,OUTSTR
	MOVEI	AA,"<			; PRINT A <
	PUSHJ	P,ADDCHR
	MOVE	AA,@(P)			; GET SNAME
	PUSHJ	P,OUTSIX
	MOVEI	AA,">			; PRINT A >
	PUSHJ	P,ADDCHR
	MOVE	A,(P)			; GET POINTER TO BLOCK
	MOVE	AA,1(A)			; GET FN1
	PUSHJ	P,OUTSIX
	MOVEI	AA,".			; PRINT A .
	PUSHJ	P,ADDCHR
	POP	P,A			; POP POINTER TO BLOCK
	MOVE	AA,2(A)			; PRINT FN2
	PUSHJ	P,OUTSIX
	PUSHJ	P,FINBUF		; FINISH BUFFER
	POPJ	P,			; EXIT




; ROUTINE TO PARSE A FILE NAME.  IT TAKES A POINTER TO A STRING IN AA
; AND A POINTER TO A FILE NAME BUFFER IN BB
; A FILE NAME BUFFER IS SNAME FN1 FN2 IN SIXBIT

PFNAM:	PUSH	P,BB			; SAVE BUFFER
FINDS:	ILDB	A,AA			; LOOK FOR "<
	CAIE	A,"<
	JRST	FINDS			; NO LOOP BACK
	MOVEI	BB,">			; TERMINATING CHARACTER OF FIELD
	PUSHJ	P,FDSIX			; CONVERT FIELD TO SIXBIT
	MOVEM	BB,@(P)			; MUNG SNAME INTO BUFFER
	MOVEI	BB,".			; EOFIELD IS .
	PUSHJ	P,FDSIX
	MOVE	A,(P)			; GET POINTER TO BLOCK
	MOVEM	BB,1(A)			; MUNG IN FILE NAME 1
	MOVEI	BB,".			; EOFIED IS .
	PUSHJ	P,FDSIX
	POP	P,A			; MUNG IN FN2
	MOVEM	BB,2(A)
	POPJ	P,			; EXIT

; ROUTINE TO PARSE A FIELD IN A TENEX FILE STRING.  IT TAKES AA==BYTE POINTER TO STRING
; BB==TERMINATING CHARACTER IN FIELD.  IT RETURNS AA==BYTE POINTER RESTED PAST
; TERMINATING CHARACTER AND BB==SIXBIT OF FIELD NAME

FDSIX:	PUSH	P,AA			; PUSH BYTE POINTER
	PUSH	P,BB			; PUSH TERMINATING CHAR
	MOVEI	AA,TBUF			; START A STRING BUFFER
	PUSHJ	P,STRTBF
FDSIX2:	ILDB	AA,-1(P)			; GET A CHAR
	CAMN	AA,(P)			; IS IT THE TERMINATING ONE
	JRST	FDSIX1
	PUSHJ	P,ADDCHR
	JRST	FDSIX2
FDSIX1:	PUSHJ	P,FINBUF		; TERMINATE BUFFER
	MOVE	AA,[%7BIT,,TBUF]	; CONVERT FIELD TO SIXBIT
	PUSHJ	P,STRTO6
	MOVE	AA,-1(P)		; LOAD BYTE POINTER
	SUB	P,[2,,2]
	POPJ	P,


; STRTO6 TAKES A BYTE POINTER IN A AND BUILDS A LEFT JUSTIFIED SIXBIT WORD OUT OF THE
; ASCIZ STRING.  6BIT IS RETURNED IN BB

STRTO6:	SETZ	BB,
	MOVE	A,[%6BIT,,BB]		; CREATE DEPOSIT BYTE POINTER
	MOVEI	B,6			; MAX NUMBER OF CHARS
STRT61:	ILDB	0,AA			; LOAD A CHAR
	JUMPE	0,CPOPJ		; IF 0 WE ARE DONE
	SUBI	0,40
	IDPB	0,A			; DEPOSIT CHAR
	SOJG	B,STRT61		; LOOP BACK
	POPJ	P,			; EXIT

0; ROUTINE TO DELET THE SAVE DIRECTORY


DELDIR:	POPJ	P,
	OPEND	CPYCHN,[SAVDIR]
LOPDIR:	GETF	CPYCHN,A1
	JRST	DONDIR
	CAME	A1,[SIXBIT /SAVED/]
	JRST	DELIT
	CAMN	A2,[SIXBIT /FILES/]
	JRST	LOPDIR
DELIT:	DELETE	[SAVDIR?A1?A2]
	JFCL
	JRST	LOPDIR
DONDIR:	CLOSE	CPYCHN,
	POPJ	P,


.INSRT DEM1 >



TOPCOD==.


LOC 	<<<.+ROUND>/PAGE>*PAGE>

SBUF==<./PAGE>
AMDBLK:	BLOCK	PAGE
MDBLK:	BLOCK	PAGE
AFDBLK:	BLOCK	PAGE
FDBLK:	BLOCK	PAGE
AFSBLK:	BLOCK	PAGE
FSBLK:	BLOCK	PAGE
AT2BLK:	BLOCK	PAGE
T2BLK:	BLOCK	PAGE
ATBLK:	BLOCK	PAGE
TBLK:	BLOCK	PAGE
NEWBUF:	BLOCK	PAGE		; USED BY DMAPIN TO MAKE NEW PAGES
XBUF==<./PAGE>

T2BLKN==T2BLK/PAGE
MDBLKN==MDBLK/PAGE
FDBLKN==FDBLK/PAGE
FSBLKN==FSBLK/PAGE
TBLKN==TBLK/PAGE


; CONSTANTS

MNFB:	SIXBIT	/SAV/
	SIXBIT /FILE/

MFDB:	SIXBIT /FIXUP/
	SIXBIT /FILE/


; VARIABLES

JFNLEN==3
JFNSLT==<JFNLEN*65.>

SAVJFN:	BLOCK JFNSLT

RCL:	0				; TEMP SLOTS
RCL1:	0
TOPBLK:	TOPB				; HIGHEST ADDRESS OF CORE
SCTFLG:	0				; -1 MEANS TO DISCONTINUE SCRIPTING
TSAVB:	0				; SAVE B REG FOR IN INTERRUPT HANDLER
BUFBYT:	0				; COUNT OF BYTE POINTER TO SCRIPT BUFFER
BUFCNT:	0				; # OF CHARACTERS LEFT IN CURRENT WORD OF BUFFER
CDATE:	0				; TODAY'S DATE
SAVPDL:	0				; SAVED PSTACK
TOTST1:	0				; TOTAL EXPANSION REQUEST FOR SAV FILE
TOTST2:	0				; TOTAL EXPANSION REQUEST FOR FIXUP FILE
HIBLK1:	0				; HI BLOCK OF SAV FILE
HIBLK2:	0				; HI BLOCK OF FIXUP FILE
GETLNT:	0				; LOCATION OF ROUTINE TO ADJUST PAGE LENGTHS
ADJPAG:	0				; LOCATION OF ROUTINES TO UPDATE DATA BASE
DIRLNT:	0				; NUMBER OF PAGES TO A REAL PAGE IN A DIRECTORY
NOMUNG:	0				; IF NON-ZERO THEN DUMP BIT WAS ORIGINALLY ON
					; (I.E. DONT TURN OFF)
CSFILE:	0				; IF -1 THEN RENAME ADDED FILES
NOFILE:	0				; IF -1 DON'T HACK WITH ADDED FILES
SAVSNM:	0				; SAVED SNAME

; BUFFERS

PATCH:	BLOCK	100
PATEND:

BITVEC:	BLOCK	400
BITEND:	0


PDS:	BLOCK	PDLNT
SCBUF:	BLOCK	BUFLNT
DIRVEC:	BLOCK	10.


; TABLES AND BUFFERS

CHNTAB:	BLOCK	20
OUTBUF:	BLOCK	200
TBUF:	BLOCK	200
FILBLK:	0			; SNAME SLOT
	0			; NM1 SLOT
	0			; NM2 SLOT
OUTBYT:	0


SNM==0
NM1==1
NM2==2
DIRFLG:	0			; FLAG IS -1 IF DIRECTORY WAS JUST OPENED
ARGSV1:	0
ARGSV2:	0

WRKDIR:	SIXBIT /MDL/			; WORKING DIRECTORY (FILES TO BE ADDED)
MNDIR:	SIXBIT /MDL/			; DIRECTORY CONTAING SAV AND FIXUP FILES
SAVDIR:	SIXBIT /MDL.SV/
FIXTMP:	SIXBIT /FTMP/
SAVTMP:	SIXBIT /STMP/


END START
