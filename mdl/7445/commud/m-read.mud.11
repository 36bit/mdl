<PACKAGE "M-READ">

<ENTRY SOPEN DOPEN DCLOSE LOSING-DATA INIT-SPACES AMEMBER AEQUAL?>

<ENTRY MDB MRD MSG-LOC MSG-GET COMSYS-ASYLUM-MAP SPLITS?>

<ENTRY DRD DRDA DUSERS DRDMSG GETDAT DUSERS GET-TAILOR READ-WRITE?>

<USE "M-DEFS"
     "M-TIME"
     "MADMAN"
     "ASYLUM"
     "M-DATA"
     "FIELDS"
     "M-TAI"
     "USRUTI"
     "OPSYS">

<SETG LOSING-DATA <>>
<SETG READ-WRITE? <>>	;"print goodies when r/w msg or pnq"

<GDECL (MDB) MDBVEC (LOSING-DATA) ANY (READ-WRITE?) <OR ATOM FALSE>>

<OR <GASSIGNED? MDB> <SETG MDB <VECTOR 0 <> [] () <>>>>

"message data base -- for current message:
	  1/ message number
	  2/ t ==> data has been modified
	  3/ actual data, vector, [adr data adr data ...]
	  4/ list, users who have had process scheduling done -- look at these
	     when updating daemon queue
	  5/ false or asylum to data base"

\ 

<DEFINE SOPEN ("AUX" (SA ,SYSTEM-ASYLUM))
	#DECL ((SA) <OR FALSE ASYLUM>)
	<COND (<DOPEN? .SA>)
	      (.SA <RESET-DATA-FILE .SA>)
	      (<SETG SYSTEM-ASYLUM
		     <OPEN-DATA-FILE <DATUM "COMSYS-SYSTEM-ASYLUM"> <> 2 1>>)
	      (<ERROR CANT-OPEN-SYSTEM-ASYLUM!-ERRORS>)>>

<DEFINE DOPEN ("OPTIONAL" (S <DATUM "COMSYS-MSG-ASYLUM">) (ARC? <>)
	       "AUX" (MDB ,MDB) A C) 
	#DECL ((VALUE) <OR FIX FALSE> (S) STRING (MDB) MDBVEC
	       (ARC?) <OR ATOM FALSE> (C) <OR ATOM <FALSE STRING>>
	       (A) <OR ASYLUM FALSE>)
	<COND (<AND <DOPEN?> <=? .S ,COMSYS-OPEN-MSG-ASYLUM>> 0)
	      (<AND <NOT .ARC?>
		    <=? .S ,COMSYS-OPEN-MSG-ASYLUM>
		    <SET A <MVCHAN .MDB>>
		    <0? <1 <1 .A>>>>
	       <AND <RESET-DATA-FILE .A> 0>)
	      (<PROG ((OLDIES? <>))
		     #DECL ((OLDIES?) <OR ATOM FALSE>)
		     <COND (<SET C <FILE-EXISTS? .S>>
			    <DCLOSE>
			    <PUT .MDB
				 ,MVCHAN
				 <OPEN-DATA-FILE .S <MVCHAN .MDB>>>
			    <COND (<MVCHAN .MDB>
				   <SETG COMSYS-OPEN-MSG-ASYLUM .S>
				   0)
				  (ELSE
				   <SETG COMSYS-OPEN-MSG-ASYLUM <>>)>)
			   (<AND <NOT .OLDIES?>
				 <=? <1 .C> "FILE NOT FOUND">>
			    <SET S <DATUM "COMSYS-LONGTERM">>
			    <SET OLDIES? T>
			    <AGAIN>)>>)>>

"DCLOSE -- function to deactivate data base, flushing any
  current message"

<DEFINE DCLOSE ("OPTIONAL" (BOTH? <>) "AUX" (MDB ,MDB)) 
	#DECL ((MDB) MDBVEC (BOTH?) <OR ATOM FALSE>)
	<COND (<AND .BOTH? ,SYSTEM-ASYLUM> <CLOSE-DATA-FILE ,SYSTEM-ASYLUM>)>
	<COND (<MVCHAN .MDB>
	       <COND (<MVMOD .MDB>
		      <ERROR MESSAGE-NOT-WRITTEN!-ERRORS DCLOSE <MVMSG .MDB>>)>
	       <CLOSE-DATA-FILE <MVCHAN .MDB>>)>>

"DOPEN? -- is an asylum open?"

<DEFINE DOPEN? ("OPTIONAL" (A <MVCHAN ,MDB>))
	#DECL ((A) <OR ASYLUM FALSE>)
	<AND .A <NOT <0? <1 <1 .A>>>>>>

\

"INIT-SPACES -- here to build initial spaces"

<DEFINE INIT-SPACES ()
	<COND (<AND ,MSG-SPACE <TYPE? ,MSG-SPACE SPACE>>
	       <OPSYS (ITS <ARESTORE ,MSG-SPACE>)>)
	      (ELSE <SETG MSG-SPACE <AFIND 5 <> ,ABIT-RELERR>>)>
	<COND (<AND ,SCRATCH-SPACE <TYPE? ,SCRATCH-SPACE SPACE>>
	       <OPSYS (ITS <ARESTORE ,SCRATCH-SPACE>)>)
	      (ELSE <SETG SCRATCH-SPACE <AFIND 5 <> ,ABIT-RELERR>>)>
	<COND (<AND ,QUEUE-SPACE <TYPE? ,QUEUE-SPACE SPACE>>
	       <OPSYS (ITS <ARESTORE ,QUEUE-SPACE>)>)
	      (ELSE <SETG QUEUE-SPACE <AFIND 1 <> ,ABIT-RELERR>>)>
	T>

\ 

"GETDAT -- finds data area for a specific addressee of the current msg
 returns false, or the specified data area vector"

<DEFINE GETDAT (S "AUX" DV VV NS)
	#DECL ((NS) <OR ADDRESS FALSE> (S) ADDRESS (VV VALUE) <OR VECTOR FALSE>
	       (DV) VECTOR)
	<COND (<0? <MVMSG ,MDB>> <ERROR NO-MESSAGE-OPEN!-ERRORS>)
	      (<SET VV <AMEMBER .S <SET DV <MVDATA ,MDB>>>>
	       <2 .VV>)
	      (<AND <SET NS <KEYGET .S>> <N=? .S .NS>>
	       <COND (<SET VV <AMEMBER .NS .DV>>
		      <2 .VV>)>)>>

<DEFINE AMEMBER (ADR D)
	#DECL ((ADR) ADDRESS (D) <OR LIST VECTOR>)
	<COND (<TYPE? .D LIST>
	       <COND (<MEMQ .ADR .D>)
		     (ELSE
		      <REPEAT ()
			      <COND (<EMPTY? .D> <RETURN <>>)
				    (<AEQUAL? .ADR <1 .D>>
				     <RETURN .D>)>
			      <SET D <REST .D>>>)>)
	      (ELSE
	       <COND (<MEMQ .ADR .D>)
		     (ELSE
		      <REPEAT ()
			      <COND (<EMPTY? .D> <RETURN <>>)
				    (<AEQUAL? .ADR <1 .D>>
				     <RETURN .D>)>
			      <SET D <REST .D 2>>>)>)>>

<DEFINE AEQUAL? (A1 A2 "AUX" N (H <>))
	#DECL ((A1 A2) ADDRESS (N) STRING (H) <OR STRING FALSE>)
	<COND (<==? .A1 .A2>)
	      (ELSE
	       <SET N <ANAME .A1>>
	       <COND (<NOT <LENGTH? .A1 1>>
		      <SET H <AHOST .A1>>)>
	       <AND <NOT <EMPTY? .A2>>
		    <STREQ? .N <ANAME .A2>>
		    <OR <AND <NOT .H>
			     <OR <LENGTH? .A2 1>
				 <NOT <AHOST .A2>>>>
			<STREQ? .H <AHOST .A2>>>>)>>

<DEFINE STREQ? (S1 S2 "AUX" C1 C2)
	#DECL ((S1 S2) STRING (C1 C2) CHARACTER)
	<COND (<==? <LENGTH .S1> <LENGTH .S2>>
	       <MAPR <>
		     <FUNCTION (S1 S2)
			  #DECL ((S1 S2) STRING)
			  <COND (<OR <==? <SET C1 <1 .S1>> <SET C2 <1 .S2>>>
				     <==? <COND (<AND <G=? <ASCII .C1>
							   <ASCII !\a>>
						      <L=? <ASCII .C1>
							   <ASCII !\z>>>
						 <ASCII <- <ASCII .C1> 32>>)
						(ELSE .C1)>
					  <COND (<AND <G=? <ASCII .C2>
							   <ASCII !\a>>
						      <L=? <ASCII .C2>
							   <ASCII !\z>>>
						 <ASCII <- <ASCII .C2> 32>>)
						(ELSE .C2)>>>)
				(ELSE <MAPLEAVE <>>)>>
		     .S1 .S2>)>>

\

"FUNCTIONS ASSOCIATED WITH VARIOUS STORAGE LOCATIONS OF MESSAGES"

<DEFINE MRD (M "OPTIONAL" (NEW? <>) "AUX" (MDB ,MDB) MSG) 
	#DECL ((M) FIX (MDB) MDBVEC (MSG) <OR VECTOR FALSE>
	       (NEW?) <OR ATOM FALSE>)
	<COND (<==? <MVMSG .MDB> .M> .M)
	      (ELSE
	       <COND (<SET MSG <MSG-GET .M .NEW?>>
		      <PUT .MDB ,MVDATA .MSG>
		      <PUT .MDB ,MVMSG .M>
		      .M)
		     (ELSE
		      <PUT .MDB ,MVDATA <AVECTOR ,MSG-SPACE>>
		      <PUT .MDB ,MVMSG .M>
		      .MSG)>)>>

<DEFINE MSG-GET (MSGNO "OPTIONAL" (NEW? <>) "AUX" S D) 
	#DECL ((MSGNO) FIX (S) <OR STRING FALSE> (VALUE) <OR FALSE VECTOR>
	       (NEW?) <OR ATOM FALSE> (D) ANY)
	<COND (<AND <SET S <MSG-LOC .MSGNO>> <DOPEN .S>>
	       <SET D <DATA-AREAD <MVCHAN ,MDB> .MSGNO ,MSG-SPACE>>
	       <COND (.D
		      <AND ,READ-WRITE? <SCROUT "Read: " .MSGNO>>
		      <COND (<AND <TYPE? .D VECTOR>
				  <DECL? .D '<VECTOR [REST ADDRESS VECTOR]>>>
			     <SETG LOSING-DATA <>>
			     .D)
			    (ELSE
			     <SETG LOSING-DATA .D>
			     #FALSE ("BAD MESSAGE DATA -- ,LOSING-DATA"))>)
		     (.NEW? <AVECTOR ,MSG-SPACE>)
		     (ELSE .D)>)>>

"MAP BETWEEN MESSAGE NUMBER AND ASYLUM CONTAINING IT"

<SETG COMSYS-ASYLUM-MAP <>>
<GDECL (COMSYS-ASYLUM-MAP) <OR FALSE <VECTOR [REST FIX STRING]>>>

<DEFINE MSG-LOC ("OPTIONAL" MSGNO "AUX" (MAP ,COMSYS-ASYLUM-MAP)) 
	#DECL ((MSGNO) FIX (MAP) <OR FALSE <VECTOR [REST FIX STRING]>>
	       (VALUE) <OR STRING FALSE>)
	<COND (<NOT .MAP>
	       <COND (<SET MAP
			   <DATA-AREAD ,SYSTEM-ASYLUM ,COMSYS-MSG-MAP ,SCRATCH-SPACE>>
		      <AND ,READ-WRITE? <SCROUT "Read Msg Map">>
		      <SET MAP
			   <MAPF ,VECTOR
				 <FUNCTION (X)
					   #DECL ((X) <OR FIX STRING>)
					   <COND (<TYPE? .X FIX> <MAPRET .X>)
						 (ELSE <MAPRET <STRING .X>>)>>
				 .MAP>>
		      <SETG COMSYS-ASYLUM-MAP .MAP>)
		     (<ERROR MAP-DISAPPEARED!-ERRORS MSG-LOC .MAP>)>)>
	<COND (<AND .MAP <ASSIGNED? MSGNO>>
	       <REPEAT ()
		       <COND (<LENGTH? .MAP 1>
			      <RETURN <DATUM "COMSYS-LONGTERM">>)
			     (<L=? <1 .MAP> .MSGNO> <RETURN <2 .MAP>>)
			     (ELSE <SET MAP <REST .MAP 2>>)>>)>>

\ 

"DRD -- read a specified field.  also implements search rules for
  finding default values from tailor data bases as well as other
  areas of the message, for split fields, for example."

<DEFINE DRD (ADR ITM "OPTIONAL" (TAILOR? T) (COPY? <>)
	     "AUX" ADRK DAT SDAT TAI L SITM (MS ,MSG-SPACE))
	#DECL ((SITM ITM) <OR FIX STRING> (ADR) ADDRESS (L) <OR LIST FALSE>
	       (SDAT) <OR FALSE <LIST [REST LIST]>> (DAT) ANY
	       (MS) SPACE (COPY? TAILOR?) <OR ATOM FALSE>
	       (TAI) <OR FALSE ADDRESS> (ADRK) <OR FALSE ADDRESS>)
	<COND (<NOT <TYPE? .ITM FIX>> <SET ITM <GETFIX .ITM>>)>
	<PROG ()
	      <COND (<SET DAT <DRDMSG .ADR .ITM>> <RETURN .DAT>)>
	      <COND (<EMPTY? .ADR>
		     <AND <F==? .ITM <GETFIX "AUTHOR">> <RETURN <>>>)
		    (<SET DAT <DRDMSG () .ITM>>
		     <COND (<AND <SET L <DRDFLT "LINK-TO-ADDRESSEE-AREA">>
				 <MEMF .ITM .L>>
			    <RETURN .DAT>)>
		     <COND (<AND <SET L <DRDFLT "COPY-TO-ADDRESSEE-AREA">>
				 <MEMF .ITM .L>
				 <SET SDAT .DAT>>
			    <SET ADRK <DRDMSG .ADR <GETFIX "ADDRESSED-TO">>>
			    <COND (<AND .ADRK <NOT <AEQUAL? .ADR .ADRK>>>)
				  (ELSE <SET ADRK <>>)>
			    <REPEAT (F)
				    #DECL ((F) <LIST <LIST [REST ADDRESS]> ANY>)
				    <COND (<EMPTY? .SDAT>
					   <SET DAT <>>
					   <RETURN>)>
				    <SET F <1 .SDAT>>
				    <COND (<AMEMBER .ADR <1 .F>>
					   <SET DAT <2 .F>>
					   <RETURN>)
					  (<AND .ADRK 
					        <AMEMBER .ADRK <1 .F>>>
					   <SET DAT <2 .F>>
					   <RETURN>)
					  (ELSE <SET SDAT <REST .SDAT>>)>>
			    <COND (.DAT <RETURN .DAT>)>)>
		     <COND (<AND <SET L <DRDMSG () <GETFIX "MISCELLANEOUS">>>
				 <MEMF .ITM .L>>
			    <RETURN .DAT>)>)>
	      <COND (<TYPE? .ITM FIX> <>)
		    (<AND .TAILOR?
			  <TYPE? <SET SITM <GETSTRING .ITM>> STRING>
			  <SET TAI <GET-TAILOR .ADR>>
			  <SET DAT <DRDT .TAI .SITM>>>
		     <COND (.COPY? <ACOPY .MS .DAT>)
			   (ELSE .DAT)>)
		    (<AND .TAILOR? <SET DAT <DRDFLT .ITM>>>
		     <COND (.COPY? <ACOPY .MS .DAT>)
			   (ELSE .DAT)>)>>>

"DRDA -- read only from message itself, don't fall into tailor or system
default."

<DEFINE DRDA (ADR ITM)
	#DECL ((ADR) ADDRESS (ITM) <OR FIX STRING>)
	<DRD .ADR .ITM <>>>

\ 

"DRDMSG -- read a field from an area of the actual message data"

<DEFINE DRDMSG (ADR ITM "AUX" (MDB ,MDB) VD V) 
	#DECL ((MDB) VECTOR (ADR) ADDRESS (ITM) <OR FIX STRING>
	       (V) <OR FALSE VECTOR> (VD) <OR FALSE <VECTOR [2 VECTOR]>>
	       (VALUE) ANY)
	<PROG ()
	      <COND (<0? <MVMSG .MDB>> <RETURN <ERROR NO-MESSAGE-OPEN!-ERRORS>>)>
	      <COND (<NOT <TYPE? .ITM FIX>> <SET ITM <GETFIX .ITM>>)>
	      <OR <SET VD <GETDAT .ADR>> <RETURN <>>>
	      <COND (<AND <TYPE? .ITM FIX> <L=? .ITM <LENGTH <1 .VD>>>>
		     <RETURN <NTH <1 .VD> .ITM>>)>
	      <COND (<TYPE? .ITM FIX> <RETURN <>>)
		    (<SET V <MEMBER <GETSTRING .ITM> <2 .VD>>>
		     <2 .V>)>>>

\ 

"GET-TAILOR -- return a string, name of tailor data area to be used
  for current message, or false, if none"

<DEFINE GET-TAILOR (ADR "AUX" GUY NGUY) 
	#DECL ((ADR) ADDRESS (VALUE GUY NGUY) <OR FALSE ADDRESS>)
	<COND (<SET GUY <DRDMSG .ADR "TAILOR">> .GUY)
	      (<EMPTY? .ADR> <DRDMSG () <GETFIX "AUTHOR">>)
	      (ELSE
	       <COND (<SET GUY <DRDT .ADR "TAILOR">> .GUY)
		     (ELSE
		      <SET GUY <KEYGET .ADR>>
		      <COND (<OR <NOT .GUY> <=? .GUY .ADR>>
			     .GUY)
			    (ELSE
			     <SET NGUY <DRDT .GUY "TAILOR">>
			     <COND (<NOT .NGUY> .GUY)
				   (ELSE .NGUY)>)>)>)>>

"DUSERS -- return list of user areas for this message"

<DEFINE DUSERS ("AUX" L (LL ()) (MDB ,MDB) (MS ,MSG-SPACE)) 
	#DECL ((DAT) <OR FALSE VECTOR> (VALUE) <OR FALSE LIST> (MDB) MDBVEC
	       (MS) SPACE (L) VECTOR (LL) LIST)
	<COND (<0? <MVMSG .MDB>> <ERROR NO-MSG-OPEN!-ERRORS>)
	      (<SET L <MVDATA .MDB>>
	       <REPEAT ()
		       <COND (<EMPTY? .L> <RETURN .LL>)>
		       <SET LL <ACONS .MS <1 .L> .LL>>
		       <SET L <REST .L 2>>>)>>

"SPLITS? -- returns T if there are any split fields for this addressee"

<DEFINE SPLITS? (ADR "AUX" (L <DRD .ADR "COPY-TO-ADDRESSEE-AREA">))
	#DECL ((ADR) ADDRESS (L) LIST)
	<MAPF <>
	      <FUNCTION (F)
		   #DECL ((F) <OR STRING FIX>)
		   <AND <DRD .ADR .F> <MAPLEAVE T>>>
	      .L>>

<ENDPACKAGE>
